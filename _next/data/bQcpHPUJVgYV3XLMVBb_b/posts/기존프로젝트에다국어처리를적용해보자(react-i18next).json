{"pageProps":{"postInfo":{"id":1647702000,"title":"기존 프로젝트에 다국어 처리를 적용해보자(react-i18next)","author":"jangky000","category":"업무 회고","desc":"회사에서 사업의 해외 진출을 준비하면서 영문 버전의 사이트가 필요해졌다. 대시보드라는 기존의 프로젝트에 어떻게 다국어 처리를 적용했는지에 대한 경험을 공유한다. 또한 두 번의 다국어 처리 작업 과정을 소개하고 업무 프로세스를 개선했던 경험을 이야기해보고자 한다.","date":"2022.03.20","content":"\n# 다국어 처리(i18n)\n\n다국어 처리란 웹 브라우저를 사용하는 국가에 따라 다양한 언어 및 지역을 지원하는 서비스이다.\n\ni18n 뜻은 국제화(internationalization)의 스펠링에서 ‘I’ + 18글자 + ‘N’을 뜻한다.\n\n## 기존 업무 프로세스\n\n이 작업을 맡기 직전에 `회사 소개 웹사이트`의 번역 작업이 진행된 적이 있었다. \n\n1. 기획을 담당하는 팀에서 웹사이트 전체를 살펴보며 번역이 필요한 부분을 찾는다.\n2. 번역이 필요한 문구를 모아 구글 스프레드 시트에 업로드한다.\n3. 번역팀이 구글 스프레드 시트를 전달 받아 번역 작업을 진행한다.\n4. 개발 팀이 번역 작업된 스프레드 시트를 전달 받아 json 파일을 생성하고, 프로젝트 내에서 번역이 필요한 부분과 번역 키를 매칭한 후, 번역이 잘 되었는지 확인하며 작업을 진행한다.\n\n## 기존 업무 프로세스의 장단점\n\n**장점**\n\n- 페이지 단위별로 번역 문구를 모아서 정리했기 때문에 해당 문구가 어느 페이지에 있는지 찾는 것이 수월했다.\n\n**단점** \n\n- 무수히 많은 번역 키를 직접 지정하는 것이 어려웠다.\n- 띄어쓰기 하나, 오타 하나, 대소문자 하나의 차이로 인해 번역 키를 인식하고 인식하지 못하는 일들이 발생하기 때문에 눈이 빠지도록 json 상의 번역 키와 html 상의 문구를 비교해야 했다.\n- 반복되는 문구의 중복을 제거하기 어려웠다.\n- 웹 사이트 상에서 쉽게 볼 수 없는 처리 응답 문구나 특정 조건 특정 상황에서 볼 수 있는 문구가 누락되는 경우가 많았다. 번역이 누락되는 경우 필요한 문구를 정리해서 다시 요청해야 했다.\n- 번역 작업보다 개발 작업 프로세스가 더 많고 단순 노동 작업이 많아 시간이 오래 걸렸다.\n\n## 변경 된 업무 프로세스\n\n`대시보드` 프로젝트는 `회사 소개 웹사이트`에 비해 훨씬 많은 기능들이 있었고, 고객들이 중점적으로 사용하는 웹사이트였다. 기존의 업무 프로세스로 번역 작업을 진행할 경우에 누락되는 문구가 아주 많을 것으로 예상되었고, 작업 기한 역시 한 달 정도로 촉박한 상황이었다. 그때 다른 좋은 방법이 없을까 고민하며 자료를 찾던 중, 유동식님이 작성하신 `국제화(i18n) 자동화 가이드`(참고: [링크](https://meetup.toast.com/posts/295)) 포스트를 보게 되었다. 번역 작업 진행 초기에 i18next-scanner를 설정하고 테스트를 마친 후 아래와 같은 업무 프로세스를 제안했다. 또한 사용법 및 컨벤션을 정리하여 공유했다.\n\n1. 대시보드 프로젝트의 소스 상에서 번역이 필요한 한글 문구들을 모두 i18next.t()라는 메소드로 감싼다.\n2. i18next-scanner를 이용하여 번역 키를 한번에 구글 스프레드 시트에 업로드한다.\n3. 번역팀에서 번역 작업이 끝나면 번역을 다운로드 받아 대시보드에 적용하고 확인한다.\n\n## 변경된 업무 프로세스의 장단점\n\n**장점**\n\n- 한글 문구를 그대로 키로 사용하여 번역 키를 지정하는 것에 고민하지 않을 수 있었고, 오타나 띄어쓰기로 인한 스트레스가 줄어들었다.\n- 중복된 번역 키가 자동으로 제거된다.\n- 웹 사이트 상에서 쉽게 볼 수 없는 처리 응답 문구나 특정 조건 특정 상황에서 볼 수 있는 문구까지 누락되는 부분 없이 한번에 작업 가능했다.\n- 다른 언어로 번역을 추가하는 것이 쉽다.\n- 새로운 기능을 추가할 때도 작업 중에 기획이 변경되거나 문구가 수정되는 경우가 많은데 먼저 기능 추가 작업 후 번역을 진행할 수 있어 반복 작업이 줄어든다.\n- 정말 신기하다.\n\n**단점**\n\n- 페이지의 상황에 따라 번역의 어투가 달라져야하는 경우가 있는데 어느 페이지에서 나온 문구인지 헷갈리는 상황이 종종 발생한다.\n- 번역 문구마다 함수를 씌워줘야 하는 단순 작업까지 줄어들지는 않았다.\n\n## 적용 결과\n\n### json 파일 예시\n\n**/src/i18n/locales/ko-KR/translation.json**\n\n```json\n{\n    \"{{count}}명_0\": \"{{count}}명\",\n    \"데이터 조회\": \"데이터 조회\",\n}\n```\n\n**/src/i18n/locales/en-US/translation.json**\n\n```json\n{\n    \"{{count}}명\": \"[작성 필요]\",\n    \"{{count}}명_plural\": \"[작성 필요]\",\n    \"데이터 조회\": \"[작성 필요]\",\n}\n```\n\n### 구글 스프레드 시트 예시\n\n<img width=\"1377\" alt=\"1\" src=\"https://user-images.githubusercontent.com/46799722/159149909-f0c63b45-49b6-4d40-b834-0167eeac3b5e.png\">\n\n## 사용법 및 컨벤션\n\n### 작업 순서\n\n1. 번역 필요한 문구를 i18next.t() 메소드의 인자로 넘겨준다.\n2. `yarn upload:i18n`을 실행하여 번역 키들을 구글 스프레드 시트로 업로드한다.\n3. 번역팀에서 구글 시트에 번역을 진행한다.\n4. `yarn download:i18n`을 실행하여 구글 스프레드 시트로부터 번역된 내용을 다운로드 받는다.\n5. 언어 설정을 바꿔보고 번역이 잘 동작하는지 확인 후 작업을 완료한다.\n\n```bash\n# scan\n$ yarn scan:i18n\n# 실행 시 src 폴더 내에서 i18next.t() 메소드로 감싸져 있는 키를 스캔한다.\n# 실행 시 중복된 키는 하나의 키로 생성된다.\n# 실행 시 json 파일 생성되거나, 기존 json 파일에 새로운 키가 추가된다.\n\n# upload\n$ yarn upload:i18n\n# 실행 시 yarn scan:i18n을 실행한 후 google spread sheet에 scan된 키와 값을 업로드한다.\n# 기존에 없는 키만 추가 업로드된다.\n\n# download\n$ yarn download:i18n\n# google spread sheet에서 번역 키와 값을 json 파일로 다운로드한다.\n```\n\n### 구글 시트 작성 가이드\n\n1. '대시보드 번역' sheet 의 한글(B column)의 내용을 영어(C column) 에 번역하여 작성합니다.\n2. {{text}}는 변수 입니다. 번역 시 변수에 해당하는 단어가 오는 곳에 동일하게 {{text}} 형식으로 작성합니다.\n3. {{count}} 변수가 들어가는 문장은 단수/복수 문법이 있기 때문에 번역 시 키(A 칼럼)의 내용을 번역해야합니다.\n    \n    <img width=\"1172\" alt=\"2\" src=\"https://user-images.githubusercontent.com/46799722/159149911-522fea13-7f7b-49d5-ad71-8a7329a98cf9.png\">\n    \n4. <1>abcd</1>, <1><0>abcd</0></1>과 같이 꺾쇠(<>) 형태는 HTML tag 가 사용 된 문장으로, bold, color 등이 적용 된 문장 입니다.번역 시에 HTML tag 가 들어가는 부분은 동일하게 작성합니다.\n    \n    <img width=\"1180\" alt=\"3\" src=\"https://user-images.githubusercontent.com/46799722/159149913-1dda16f5-4fab-4134-a57a-b5f240fc09fc.png\">\n    \n5. 영어(C column)에 **_N/A** 표시된 cell은 번역하지 않습니다.\n6. 키(A column), 한글(B column) 은 절대 수정하면 안됩니다.\n\n### 기본 사용법\n\n**Before**\n\n```tsx\nconst MyComponent = ()=>{\n  const freeEndTime =  3\n\n\treturn (\n\t\t<div>\n\t\t\t<span>평가판</span>\n\t\t\t<span>Professional 무료 평가판의 이용 기간이 {freeEndTime}일 남았습니다.</span>\n\t\t</div>\n\t)\n}\n```\n\n**After**\n\n- { t } = useTranslation()의 형태로도 사용 가능하지만 t라는 함수 이름이 너무 흔하고, 다른 지역 변수와 충돌이 있을 수 있을 것 같아 i18next.t로 사용하는 것으로 통일했다.\n- 만약 t 함수를 사용하고 싶을 때는 scanner 인식을 위해 i18next-scanner.config.js에서 options.func.list 배열에 't'를 추가해줘야 한다.\n\n```tsx\nimport { useTranslation } from 'react-i18next';\n\nconst MyComponent = ()=>{\n\tconst i18next = useTranslation();\n\tconst freeEndTime =  3;\n\n\treturn (\n\t\t<div>\n\t\t\t<span>{i18next.t('평가판')}</span>\n\t\t\t<span>{i18next.t(`Professional 무료 평가판의 이용 기간이 {{freeEndTime}}일 남았습니다.`, {\n             freeEndTime: freeEndTime})}\n\t\t\t</span>\n\t\t</div>\n\t)\n}\n```\n\n### 응용 사용법\n\n**(1) 번역에 변수 포함하기(interpolation)**\n\ninterpolation 속성 이름 자유롭게 선택 가능 (참고: [interpolation](https://www.i18next.com/translation-function/interpolation))\n\n```tsx\n// 예시\ni18next.t(`{{email}}은 구글 계정입니다.`, { email: 'example@gmail.com' }\n\n// 예시2\n{i18next.t(`프로젝트의 이용기간이 {{end_time}} 후로 만료되었습니다.`, {\n  end_time: moment(end_time).format('YYYY-MM-DD'),\n})}\n```\n\n**(2) 언어별 복수 단수 표현 대응하기**(**_plural 과 _0)**\n\n- interpolation 속성 이름으로 반드시 `count`를 사용한다 . (참고: [plurals](https://www.i18next.com/translation-function/plurals))\n- i18next.t()메소드의 키가 `최대 캠페인의 수는 {{count}}개입니다.`일 때,\n    - 한국어와 같이 명사에 복수형이 없는 언어일 때: `최대 캠페인의 수는 {{count}}개입니다._0`만 작성\n    - 영어와 같이 복수형이 있는 언어일 때: `최대 캠페인의 수는 {{count}}개입니다.`, `최대 캠페인의 수는 {{count}}개입니다._plural` 작성\n\n```tsx\n// 예시\n\ni18next.t(\n  `최대 캠페인의 수는 {{**count**}}개입니다.`, { **count**: projectStore.max_campaign_count },\n),\n```\n\n**(3) html 태그를 포함한 한글 번역**\n\n- `<Trans />` 컴포넌트 사용하여 번역한다.\n- `<Trans />` 컴포넌트 내부에서 React 조건부 렌더링 사용이 불가하다.\n- i18nKey에 html을 포함해야 한다. (자체 컨벤션)\n    - Trans 컴포넌트 내부에 있는 한글을 default value로 제대로 scan하지 못하는 문제가 있었다.\n    - i18next-scanner.config.js에 설정을 추가한 후 자체 컨벤션으로 html을 포함하도록 해서 문제를 해결했다.\n\n**Before**\n\n```tsx\n...\n\n<div>\n  이 프로젝트에 발급된 추적 ID는 <strong>{ projectID }</strong>입니다. 아래의 기본 추적 스크립트 코드\n  블럭을 복사하여\n  <br />\n  웹사이트 HTML 의 공통 영역 &lt;head&gt;&lt;&#47;head&gt;에 붙여 넣으세요.\n<div>\n```\n\n**After**\n\n```tsx\n\nimport { Trans, useTranslation } from 'react-i18next';\n\n// 예시1\n<div>\n\t<Trans i18nKey=\"웹사이트 연결 준비 안내 html\">\n\t  이 프로젝트에 발급된 추적 ID는 <strong>{{ projectID }}</strong>입니다. 아래의 기본 추적 스크립트 코드\n\t  블럭을 복사하여\n\t  <br />\n\t  웹사이트 HTML 의 공통 영역 &lt;head&gt;&lt;&#47;head&gt;에 붙여 넣으세요.\n\t</Trans>\n</div>\n\n// 예시2\n<Trans i18nKey=\"대시보드 데모 체험 안내 html\">\n  데모 쇼핑몰의 데이터를 활용하여 {{ name_kr: dashboard_config.name_kr }} 대시보드 내의 기능을 <br />\n  체험할 수 있습니다.\n</Trans>\n```\n\n**(4) Trans 컴포넌트에서 복수형 처리 사용**\n\n- `npm run scan:i18n`으로 _plural이 잘 생성되는지 확인해봐야 한다.\n\n```tsx\n// 예시: -> _plural 과 _0 생성\n<Trans i18nKey=\"사용자 내보내기 html\" count={totalItem}>\n  <strong>{{ count: totalItem }}</strong>\n  명의 사용자를 내보낼 수 있습니다.\n</Trans>\n```\n\n**(5) 컴포넌트 바깥에 있는 문자열 번역**\n\n**방법1: Dummy function 사용** \n\n```tsx\n// i18next.t()로 감싸지 않은 한글을 i18next-scanner에서 scan 해주기 위해 씌우는 dummy function\nexport const i18nextScanKey = (key: string): string => key;\n```\n\n```tsx\nimport { i18nextScanKey } from '../i18n';\nimport { useTranslation } from 'react-i18next';\n\nconst itemList = [\n\t{\n\t\tlabel: i18nextScanKey('수정')\n\t},\n\t{\n\t\tlabel: i18nextScanKey('저장')\n\t}\n]\n\nconst MyComponent = ()=>{\n\tconst i18next = useTranslation();\n\n\treturn (\n\t\t{itemList.map((item) => <div>{`${i18next.t(item.label)}`}</div>)}\n\t);\n}\n\n```\n\n- dummy function으로 번역이 필요한 부분을 감싸주어 i18next-scanner가 인식할 수 있게 설정한다.\n- (참고: [using-react-i18next-t-function-outside-components-having-troubles-using-promise](https://stackoverflow.com/questions/58452182/using-react-i18next-t-function-outside-components-having-troubles-using-promise))\n- **interpolation을 대응할 수 없는 문제가 있다.**\n\n**방법2: 함수 파라미터로 i18next 넘기기**\n\n**Before**\n\n```jsx\nconst tabList = [\n  { id: 1, type: 'plan-payment', label: '플랜 결제 내역' },\n  { id: 2, type: 'credit-payment', label: '마케팅 예산 충전 내역' },\n  { id: 3, type: 'usage', label: '크레딧 및 마케팅 예산 현황' },\n];\n\nexport const MyComponent = ()=>{\n\t...\n}\n```\n\n**After**\n\n```jsx\nimport { useTranslation } from 'react-i18next';\nimport { I18Next } from '../../i18n';\n\nconst getTabList = (i18next: I18Next) => [\n  { id: 1, type: 'plan-payment', label: i18next.t('플랜 결제 내역') },\n  { id: 2, type: 'credit-payment', label: i18next.t('마케팅 예산 충전 내역') },\n  { id: 3, type: 'usage', label: i18next.t('크레딧 및 마케팅 예산 현황') },\n];\n\nexport const MyComponent = ()=>{\n\tconst i18next = useTranslation();\n\tconst tabList = getTabList(i18next);\n\t...\n}\n```\n\n## 설정 방법\n\n### 디렉토리 구조\n\n```\n📂src\n ┣📂i18n\n ┃ ┣ 📂locales\n ┃ ┃ ┣ 📂en-US\n ┃ ┃ ┃ ┗ 📜translation.json\n ┃ ┃ ┗ 📂ko-KR\n ┃ ┃ ┃ ┗ 📜translation.json\n ┃ ┗ 📜index.ts\n ┣ 📂components\n...\n📂translate\n ┣ 📂.credentials\n ┃ ┣ 📜index.js\n ┃ ┗ 📜practical-net-....json\n ┣ 📜download.js\n ┣ 📜index.js\n ┗ 📜upload.js\n...\n📜i18next-scanner.config.js\n📜package.json\n...\n```\n\n### 설치\n\n```bash\nyarn add react-i18next i18next @types/react-i18next @types/i18next i18next-scanner google-spreadsheet\n```\n\n### react-i18next 설정\n\n/**src/i18n/index.ts** (참고: [Configure i18next](https://react.i18next.com/guides/quick-start#configure-i18next))\n\n```tsx\nimport i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\nimport koKR from './locales/ko-KR/translation.json';\nimport enUS from './locales/en-US/translation.json';\n\nconst resources = {\n  ko: { translation: koKR },\n  en: { translation: enUS },\n};\n\n// 브라우저 언어 설정 가져오기\nconst browserLang = window.navigator.language.split('-')[0];\n\n// localStorage에서 언어 설정 가져오기\nconst userLanguage = [localStorage에서 언어 설정 가져오기] ?? browserLang;\n\ni18n.use(initReactI18next).init({\n  resources,\n  lng: userLanguage || 'ko',\n  fallbackLng: 'ko',\n  debug: false,\n  defaultNS: 'translation',\n  ns: 'translation',\n  keySeparator: false,\n  interpolation: {\n    escapeValue: false,\n    alwaysFormat: true,\n    format(value, format, lng) {\n      if (format === 'uppercase') return value.toUpperCase();\n\t\t\t// interpolation 되는 값이 number로 들어올 때, 언어 설정에 맞는 locale string으로 변환해서 반환\n      if (typeof value === 'number') return value.toLocaleString(lng);\n      return value;\n    },\n  },\n  react: {\n    defaultTransParent: 'div',\n    transEmptyNodeValue: '',\n    transSupportBasicHtmlNodes: true,\n\t\t// <Trans> 컴포넌트 내부에 들어가는 html 태그들\n    transKeepBasicHtmlNodesFor: ['br', 'strong', 'i', 'button', 'a', 'span', 'div', 'input'],\n    transWrapTextNodes: '',\n  },\n  nsSeparator: '=>', // default: ':', :가 번역 키에 포함되는 사례가 있어, 번역 키로 사용되지 않을 것 같은 seperator를 설정\n});\n\nexport default i18n;\n\n// i18next를 파라미터로 넘길 때 사용할 인터페이스 타입\nexport interface I18Next {\n  t: (str: string, option?: Object) => string;\n}\n\n// scanner를 사용하기 위한 dummy function\nexport const i18nextScanKey = (key: string): string => key;\n```\n\n### i18next-scanner 설정\n\n/**i18next-scanner.config.js**\n\n```jsx\nconst fs = require(\"fs\");\nconst path = require(\"path\");\nconst typescript = require(\"typescript\");\n\nconst COMMON_EXTENSIONS = '/**/*.{js,jsx,ts,tsx,vue,html}';\n\nmodule.exports = {\n  input: [`./src/${COMMON_EXTENSIONS}`],\n  options: {\n    debug: false,\n    // removeUnusedKeys: true,\n    defaultLng: 'ko-KR',\n    lngs: ['ko-KR', 'en-US'],\n    func: {\n      list: ['i18next.t', 'i18n.t', '$i18n.t', '$i18next.t', 'i18nextScanKey'],\n      extensions: ['.js', '.jsx'],\n    },\n    trans: {\n      component: 'Trans',\n      i18nKey: 'i18nKey',\n      defaultsKey: 'defaults',\n      extensions: ['.js', '.jsx'],\n      fallbackKey: function(ns, value) {\n        return value;\n      },\n      acorn: {\n          ecmaVersion: 10,\n          sourceType: 'module',\n      }\n    },\n    resource: {\n      loadPath: path.join(__dirname, '/src/i18n/locales/{{lng}}/{{ns}}.json'),\n      savePath: path.join(__dirname, '/src/i18n/locales/{{lng}}/{{ns}}.json'),\n    },\n    defaultValue(lng, ns, key) {\n      const keyAsDefaultValue = ['ko-KR'];\n      if (keyAsDefaultValue.includes(lng)) {\n        const separator = 'html';\n        const value = key.includes(separator) ? '' : key;\n        return value;\n      }\n      return '[작성 필요]';\n    },\n    keySeparator: false,\n    nsSeparator: false,\n    prefix: '{{',\n    suffix: '}}',\n  },\n  transform: function typescriptTransform(\n    options = {\n      tsOptions: {\n        target: \"es2018\",\n      },\n      extensions: [\".ts\", \".tsx\"],\n    }\n  ) {\n    return function transform(file, enc, done) {\n      const { base, ext } = path.parse(file.path);\n  \n      if (options.extensions.includes(ext) && !base.endsWith(\".d.ts\") && base.indexOf(\"reportWebVitals.ts\") === -1) {\n        const content = fs.readFileSync(file.path, enc);\n  \n        const { outputText } = typescript.transpileModule(content, {\n          compilerOptions: options.tsOptions,\n          fileName: path.basename(file.path),\n        });\n  \n        this.parser.parseTransFromString(outputText);\n        this.parser.parseFuncFromString(outputText);\n      }\n  \n      done();\n    };\n  }({ extensions: [\".tsx\", '.ts'], tsOptions: {\n    target: 'es5',\n    module: 'esnext',\n  }, })\n};\n```\n\n### Google Spread Sheet 연동\n\n1. [https://console.cloud.google.com/apis/dashboard](https://console.cloud.google.com/apis/dashboard) 이동\n2. 사용자 정보 인증 탭으로 이동\n    \n    <img width=\"1423\" alt=\"4\" src=\"https://user-images.githubusercontent.com/46799722/159149914-e3da4f30-f730-4cb3-a9c6-312ff99c0358.png\">\n    \n3. 사용자 인증 정보 만들기 → 서비스 계정 클릭\n    \n    <img width=\"976\" alt=\"5\" src=\"https://user-images.githubusercontent.com/46799722/159149915-0517966b-b210-4b7d-8362-e664f6b03353.png\">\n    \n4. 서비스 계정 이름 입력 후 완료 클릭\n    \n    <img width=\"608\" alt=\"6\" src=\"https://user-images.githubusercontent.com/46799722/159149916-9b7521df-b997-462e-aa6e-f5f63ef9da85.png\">\n    \n5. 생성한 서비스 계정 클릭\n    \n    <img width=\"1156\" alt=\"7\" src=\"https://user-images.githubusercontent.com/46799722/159149918-7c065d1c-fbed-46d3-bc02-f7aafd953adb.png\">\n    \n6. 키 탭으로 이동하여 새 키 생성\n    \n    <img width=\"1161\" alt=\"8\" src=\"https://user-images.githubusercontent.com/46799722/159149919-f065073d-0555-4709-a1d7-5655386309fa.png\">\n    \n7. 키 유형 JSON으로 선택 → json 파일 다운로드 → react 프로젝트 최상단에 translate/.credentials 폴더 생성후 구글 스프레드시트에서 다운 받은 JSON 파일 저장\n    \n    <img width=\"557\" alt=\"9\" src=\"https://user-images.githubusercontent.com/46799722/159149920-bea956ca-97c5-4baa-8c9e-1d25ccd30bcf.png\">\n    \n8. 세부 정보 → 이메일 복사 → 구글 스프레드 시트에 공유 클릭 → 이메일 추가\n\n<img width=\"771\" alt=\"10\" src=\"https://user-images.githubusercontent.com/46799722/159149922-235997fb-68e3-4b18-82e3-471ce6d22fff.png\">\n\n<img width=\"1383\" alt=\"11\" src=\"https://user-images.githubusercontent.com/46799722/159149923-0942d37f-9dd8-4c88-b358-5864e352c1ce.png\">\n\n<img width=\"620\" alt=\"12\" src=\"https://user-images.githubusercontent.com/46799722/159149924-87391178-b113-45a7-a783-8585ab29a8b6.png\">\n\n### translate 디렉토리\n\n**translate/.credentials/index.js**\n\ntranslate/.credentials 디렉토리를 .gitignore에 추가하기\n\n```bash\nmodule.exports={\n    CREDS: '[구글 서비스 계정 설정 시 다운로드 받은 json 파일 이름].json',\n    SHEET_DOC_ID: \"[sheet document id]\",\n    SHEET_ID: 1\n}\n```\n\n**translate/index.js**\n\n```jsx\nconst {GoogleSpreadsheet} = require('google-spreadsheet');\nconst ENV = require('./.credentials/index.js');\nconst creds = require('./.credentials/' + ENV.CREDS);\nconst i18nextConfig = require('../i18next-scanner.config');\n\nconst spreadsheetDocId = ENV.SHEET_DOC_ID;\nconst ns = 'translation';\nconst lngs = i18nextConfig.options.lngs;\nconst loadPath = i18nextConfig.options.resource.loadPath;\nconst localesPath = loadPath.replace('/{{lng}}/{{ns}}.json', '');\nconst rePluralPostfix = new RegExp(/_plural|_[\\d]/g);\nconst sheetId = ENV.SHEET_ID; // your sheet id\nconst NOT_AVAILABLE_CELL = '_N/A';\nconst columnKeyToHeader = {\n  key: '키',\n  'ko-KR': '한글',\n  'en-US': '영어',\n};\n\n/**\n * getting started from https://theoephraim.github.io/node-google-spreadsheet\n */\nasync function loadSpreadsheet() {\n  // eslint-disable-next-line no-console\n  console.info(\n    '\\u001B[32m',\n    '=====================================================================================================================\\n',\n    '# i18next auto-sync using Spreadsheet\\n\\n',\n    '  * Download translation resources from Spreadsheet and make /src/i18n/locales/{{lng}}/{{ns}}.json\\n',\n    '  * Upload translation resources to Spreadsheet.\\n\\n',\n    `The Spreadsheet for translation is here (\\u001B[34mhttps://docs.google.com/spreadsheets/d/${spreadsheetDocId}/#gid=${sheetId}\\u001B[0m)\\n`,\n    '=====================================================================================================================',\n    '\\u001B[0m'\n  );\n\n  // spreadsheet key is the long id in the sheets URL\n  const doc = new GoogleSpreadsheet(spreadsheetDocId);\n\n  // load directly from json file if not in secure environment\n  await doc.useServiceAccountAuth(creds);\n\n  await doc.loadInfo(); // loads document properties and worksheets\n\n  return doc;\n}\n\nfunction getPureKey(key = '') {\n  return key.replace(rePluralPostfix, '');\n}\n\nmodule.exports = {\n  localesPath,\n  loadSpreadsheet,\n  getPureKey,\n  ns,\n  lngs,\n  sheetId,\n  columnKeyToHeader,\n  NOT_AVAILABLE_CELL,\n};\n```\n\n**translate/upload.js**\n\n```jsx\nconst fs = require('fs');\nconst {\n  loadSpreadsheet,\n  localesPath,\n  getPureKey,\n  ns,\n  lngs,\n  sheetId,\n  columnKeyToHeader,\n  NOT_AVAILABLE_CELL,\n} = require('./index');\n\nconst headerValues = ['키', '한글', '영어'];\n\nasync function addNewSheet(doc, title, sheetId) {\n  const sheet = await doc.addSheet({\n    sheetId,\n    title,\n    headerValues,\n  });\n\n  return sheet;\n}\n\nasync function updateTranslationsFromKeyMapToSheet(doc, keyMap) {\n  const title = '[Sheet 이름]';\n  let sheet = doc.sheetsById[sheetId];\n  if (!sheet) {\n    sheet = await addNewSheet(doc, title, sheetId);\n  }\n\n  const rows = await sheet.getRows();\n\n  // find exsit keys\n  const exsitKeys = {};\n  const addedRows = [];\n  rows.forEach((row) => {\n    const key = row[columnKeyToHeader.key];\n    if (keyMap[key]) {\n      exsitKeys[key] = true;\n    }\n  });\n\n  for (const [key, translations] of Object.entries(keyMap)) {\n    if (!exsitKeys[key]) {\n      const row = {\n        [columnKeyToHeader.key]: key,\n        ...Object.keys(translations).reduce((result, lng) => {\n          const header = columnKeyToHeader[lng];\n          result[header] = translations[lng];\n\n          return result;\n        }, {}),\n      };\n\n      addedRows.push(row);\n    }\n  }\n\n  // upload new keys\n  await sheet.addRows(addedRows);\n}\n\nfunction toJson(keyMap) {\n  const json = {};\n\n  Object.entries(keyMap).forEach(([__, keysByPlural]) => {\n    for (const [keyWithPostfix, translations] of Object.entries(keysByPlural)) {\n      json[keyWithPostfix] = {\n        ...translations,\n      };\n    }\n  });\n\n  return json;\n}\n\nfunction gatherKeyMap(keyMap, lng, json) {\n  for (const [keyWithPostfix, translated] of Object.entries(json)) {\n    const key = getPureKey(keyWithPostfix);\n\n    if (!keyMap[key]) {\n      keyMap[key] = {};\n    }\n\n    const keyMapWithLng = keyMap[key];\n    if (!keyMapWithLng[keyWithPostfix]) {\n      keyMapWithLng[keyWithPostfix] = lngs.reduce((initObj, lng) => {\n        initObj[lng] = NOT_AVAILABLE_CELL;\n\n        return initObj;\n      }, {});\n    }\n\n    keyMapWithLng[keyWithPostfix][lng] = translated;\n  }\n}\n\nasync function updateSheetFromJson() {\n  const doc = await loadSpreadsheet();\n\n  fs.readdir(localesPath, (error, lngs) => {\n    if (error) {\n      throw error;\n    }\n\n    const keyMap = {};\n\n    lngs.forEach((lng) => {\n      const localeJsonFilePath = `${localesPath}/${lng}/${ns}.json`;\n\n      // eslint-disable-next-line no-sync\n      const json = fs.readFileSync(localeJsonFilePath, 'utf8');\n\n      gatherKeyMap(keyMap, lng, JSON.parse(json));\n    });\n\n    updateTranslationsFromKeyMapToSheet(doc, toJson(keyMap));\n  });\n}\n\nupdateSheetFromJson();\n```\n\n**translate/download.js**\n\n```jsx\nconst fs = require('fs');\nconst mkdirp = require('mkdirp');\nconst {loadSpreadsheet, localesPath, ns, lngs, sheetId, columnKeyToHeader, NOT_AVAILABLE_CELL} = require('./index');\n\n/**\n * fetch translations from google spread sheet and transform to json\n * @param {GoogleSpreadsheet} doc GoogleSpreadsheet document\n * @returns [object] translation map\n * {\n *   \"ko-KR\": {\n *     \"key\": \"value\"\n *   },\n *   \"en-US\": {\n *     \"key\": \"value\"\n *   },\n * }\n */\nasync function fetchTranslationsFromSheetToJson(doc) {\n  const sheet = doc.sheetsById[sheetId];\n  if (!sheet) {\n    return {};\n  }\n\n  const lngsMap = {};\n  const rows = await sheet.getRows();\n\n  rows.forEach((row) => {\n    const key = row[columnKeyToHeader.key];\n    lngs.forEach((lng) => {\n      const translation = row[columnKeyToHeader[lng]];\n      // NOT_AVAILABLE_CELL(\"_N/A\") means no related language\n      if (translation === NOT_AVAILABLE_CELL) {\n        return;\n      }\n\n      if (!lngsMap[lng]) {\n        lngsMap[lng] = {};\n      }\n\n      lngsMap[lng][key] = translation || ''; // prevent to remove undefined value like ({\"key\": undefined})\n    });\n  });\n\n  return lngsMap;\n}\n\nfunction checkAndMakeLocaleDir(dirPath, subDirs) {\n  return new Promise((resolve) => {\n    subDirs.forEach((subDir, index) => {\n      mkdirp(`${dirPath}/${subDir}`, (err) => {\n        if (err) {\n          throw err;\n        }\n\n        if (index === subDirs.length - 1) {\n          resolve();\n        }\n      });\n    });\n  });\n}\n\nasync function updateJsonFromSheet() {\n  await checkAndMakeLocaleDir(localesPath, lngs);\n\n  const doc = await loadSpreadsheet();\n  const lngsMap = await fetchTranslationsFromSheetToJson(doc);\n\n  fs.readdir(localesPath, (error, lngs) => {\n    if (error) {\n      throw error;\n    }\n\n    lngs.forEach((lng) => {\n      const localeJsonFilePath = `${localesPath}/${lng}/${ns}.json`;\n\n      const jsonString = JSON.stringify(lngsMap[lng], null, 2);\n\n      fs.writeFile(localeJsonFilePath, jsonString, 'utf8', (err) => {\n        if (err) {\n          throw err;\n        }\n      });\n    });\n  });\n}\n\nupdateJsonFromSheet();\n```\n\n### **package.json에 script 추가**\n\n```json\n...\n\"scripts\": {\n\t...\n\t\"scan:i18n\": \"i18next-scanner --config i18next-scanner.config.js\",\n\t\"upload:i18n\": \"npm run scan:i18n && node translate/upload.js\",\n\t\"download:i18n\": \"node translate/download.js\",\n\t...\n},\n...\n\n```"}},"__N_SSG":true}