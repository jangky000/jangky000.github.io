{"pageProps":{"postInfo":{"id":1641913200,"title":"React와 Recoil을 사용해 튜토리얼을 만들어보자","author":"jangky000","category":"업무 회고","desc":"처음 페이지에 방문한 사람이 복잡한 솔루션 서비스를 처음부터 잘 사용하는 것은 어렵기 때문에 많은 서비스에서는 튜토리얼을 제공한다. Recoil을 사용하여 웹사이트의 튜토리얼 스텝과 문구, 그리고 해당 영역 포커싱을 관리한 경험을 공유한다.","date":"2022.01.12","content":"\n## 기획 내용\n\n- 전달 받은 튜토리얼 내용\n  \n  ![1](https://user-images.githubusercontent.com/46799722/149144274-e7ecc1f0-786d-45bd-9ea9-d8c7151090fe.png)\n    \n\n- 첫 화면\n    \n  ![2](https://user-images.githubusercontent.com/46799722/149144272-f16aa2de-6095-4397-981d-63c9100d245c.png)\n    \n\n- 다음 버튼을 누르면 설명에 해당하는 영역으로 스크롤 이동하며 포커싱한다.\n    \n  ![3](https://user-images.githubusercontent.com/46799722/149144263-e3b5c3ee-d8dc-4b18-a040-6fa3171ae81a.png)\n\n- 다음 버튼을 누르면 설명에 해당하는 메뉴 드롭다운을 오픈하고 포커싱한다.\n\n  ![4](https://user-images.githubusercontent.com/46799722/149144251-71981a02-f214-45d6-a979-ee91feb5e2a9.png)\n    \n\n- 접기 시\n    \n  ![5](https://user-images.githubusercontent.com/46799722/149144269-fbda31a6-4741-4ef9-8fcd-234edb27bc31.png)\n    \n\n# Recoil을 사용한 전역 상태 관리\n\n## atom & selector\n    \n```tsx\nimport { atom, selector } from 'recoil';\nimport { tutorialHelperText } from '@/components/Demo/TutorialHelper/TutorialHelper.data';\nimport { TutorialNode } from '@/components/Demo/TutorialHelper/TutorialNode';\nimport { TutorialMenu } from '@/components/Demo/TutorialHelper/TutorialHelper.interface';\n\ninterface DemoTutorialState {\n  isDemo: boolean;\n  isExpired: boolean;\n  isEmailVerified: boolean;\n  isFolded: boolean;\n  tutorialNode: TutorialNode | null;\n}\n\nconst isDemo = JSON.parse(sessionStorage.getItem('isDemo') || 'false') as boolean;\n\nexport const demoTutorialState = atom<DemoTutorialState>({\n  key: 'demoGuideState',\n  default: {\n    isDemo,\n    isExpired: false,\n    isEmailVerified: false,\n    isFolded: false,\n    tutorialNode: null,\n  },\n});\n\ninterface TutorialHelperState {\n  menu: TutorialMenu | null;\n  title: string | null;\n  subTitle: string | null;\n  desc: string | null;\n  tutorialStep: number;\n  totalStep: number;\n  prev: TutorialNode | null;\n  next: TutorialNode | null;\n}\n\nexport const demoTutorialStateSelector = selector({\n  key: 'demoGuideStateSelector',\n  get: ({ get }) => {\n    const { tutorialNode } = get(demoTutorialState);\n\n    if (tutorialNode === null)\n      return {\n        menu: null,\n        title: null,\n        subTitle: null,\n        desc: null,\n        tutorialStep: 0,\n        totalStep: 0,\n        prev: null,\n        next: null,\n      };\n\n    const {\n      info: { menu, tutorialStep },\n      prev,\n      next,\n    } = tutorialNode;\n    const { title, step } = tutorialHelperText[menu];\n    const { subTitle, desc } = step[tutorialStep];\n    const totalStep = tutorialHelperText[menu].step.length;\n    const derivedState = {\n      menu,\n      title,\n      subTitle: subTitle || null,\n      desc,\n      tutorialStep,\n      totalStep,\n      prev,\n      next,\n    };\n    return derivedState as TutorialHelperState;\n  },\n});\n```\n  \n## 튜토리얼 설명 관리\n\n- 튜토리얼 설명을 한 파일에 모아서 관리한다.\n- 양방향 연결 리스트로 각 스텝을 연결하여 다음 내용을 찾을 필요 없이 바로 해당 스텝에 접근할 수 있게 했다.\n    \n```tsx\nimport { TutorialLinkedList } from './TutorialLinkedList';\nimport { TutorialHelperText } from './TutorialHelper.interface';\n\n//튜토리얼 안내 문구\nexport const tutorialHelperText: TutorialHelperText = {\n  Automation: {\n    title: '자동화',\n    step: [\n      {\n        desc:\n          '내 사이트의 퍼널, 판매 현황을 파악하고 각 퍼널 단계별로 고객그룹을 분류하여 캠페인을 빠르게 진행할 수 있습니다.',\n      },\n      {\n        subTitle: '퍼널 현황',\n        desc:\n          '방문부터 결제까지 각 퍼널 단계별 전환과 이탈 수치를 확인하고, 이탈고객을 붙잡기 위한 추천 캠페인을 진행할 수 있습니다.',\n      },\n      {\n        subTitle: '퍼널 현황-주요관리필요구간',\n        desc: '이탈 수치가 가장 높은 퍼널의 고객을 확인하거나 추천 캠페인을 바로 진행할 수 있습니다.',\n      },\n      {\n        subTitle: '캠페인 성과',\n        desc: '빅인을 통해 진행한 캠페인 성과를 유형별로 요약하여 확인할 수 있습니다.',\n      },\n      {\n        subTitle: '구매 현황',\n        desc: '사이트의 구매 전환 분석 데이터와 상품 정보를 확인할 수 있습니다.',\n      },\n    ],\n  },\n  CampaignList: {\n    title: '캠페인',\n    step: [\n      {\n        desc: '고객 행동 데이터 기반으로 타겟팅 하여 사이트 내에서 또는 메신저를 통해 자동화 캠페인을 할 수 있습니다.',\n      },\n      {\n        subTitle: '캠페인 시작하기 버튼 - 캠페인 종류 선택 레이어',\n        desc: '팝업, 토스트를 활용해 웹 사이트 내에서 온사이트 캠페인을 할 수 있습니다.',\n      },\n      {\n        subTitle: '캠페인 시작하기 버튼 - 캠페인 종류 선택 레이어',\n        desc: '카카오 친구톡/알림톡, SMS 를 활용 해 오프사이트 캠페인을 할 수 있습니다.',\n      },\n      {\n        subTitle: '캠페인 리스트',\n        desc: '캠페인들의 진행 상황을 관리할 수 있습니다.',\n      },\n    ],\n  },\n  SegmentSmartList: {\n    title: '스마트 그룹',\n    step: [\n      {\n        desc:\n          '방문, 구매이력 등의 수집 데이터를 통해 빅인의 알고리즘으로 분석한 고객 세그먼트 입니다. SDK 를 설치하면 2주 뒤에 활성화 됩니다.',\n      },\n      {\n        subTitle: '스마트그룹 리스트',\n        desc:\n          '리스트의 고객 그룹을 선택하면 해당하는 고객 리스트를 확인할 수 있습니다. 다만, 데이터가 충분하지 않으면 해당 세그먼트에 고객 리스트가 없을 수 있습니다.',\n      },\n    ],\n  },\n  SegmentManualList: {\n    title: '고객 분류',\n    step: [\n      {\n        desc: 'CRM, 마케팅 목적에 맞는 고객 그룹을 직접 만들어 캠페인에 활용할 수 있습니다.',\n      },\n      {\n        subTitle: '기본',\n        desc:\n          '마케터들이 많이 궁금해하는 고객 목록이 기본으로 제공 됩니다. 별도의 조건 설정 없이 빠르게 고객목록을 확인하고 캠페인을 진행할 수 있습니다.',\n      },\n      {\n        subTitle: '맞춤',\n        desc: '빅인 사용자가 직접 조건을 설정해 생성한 고객 그룹 입니다.',\n      },\n      {\n        subTitle: '새 고객 그룹 생성',\n        desc: '맞춤 고객 그룹을 생성하는 화면으로 이동할 수 있습니다.',\n      },\n    ],\n  },\n  ReportList: {\n    title: '보고서',\n    step: [\n      {\n        desc:\n          '빅인 SDK 로 수집한 데이터를 사용자가 원하는 형태로 보고서를 만들고, 고객의 행동 정보를 확인할 수 있습니다.',\n      },\n      {\n        subTitle: '보고서 만들기 - 이벤트',\n        desc: '이벤트 보고서를 통해 마케터가 직접 분석하고자 하는 조건을 설정하여 보고서를 만들 수 있습니다.',\n      },\n      {\n        subTitle: '보고서 만들기 - 라이브',\n        desc: '사이트에서 발생하는 이벤트를 실시간으로 확인할 수 있습니다.',\n      },\n      {\n        subTitle: '보고서 만들기 - 고객 탐색',\n        desc: '사용자가 생성한 고객 그룹에 해당하는 고객 목록을 확인 할 수 있습니다.',\n      },\n    ],\n  },\n};\n\n  \n//튜토리얼 순서 설정 연결 리스트 생성\nexport const TutorialAutomationList = new TutorialLinkedList();\ntutorialHelperText.Automation.step.forEach((_, index) =>\n  TutorialAutomationList.add({ menu: 'Automation', tutorialStep: index }),\n);\nexport const TutorialCampaignList = new TutorialLinkedList();\ntutorialHelperText.CampaignList.step.forEach((_, index) =>\n  TutorialCampaignList.add({ menu: 'CampaignList', tutorialStep: index }),\n);\nexport const TutorialSegmentSmartList = new TutorialLinkedList();\ntutorialHelperText.SegmentSmartList.step.forEach((_, index) =>\n  TutorialSegmentSmartList.add({ menu: 'SegmentSmartList', tutorialStep: index }),\n);\nexport const TutorialSegmentManualList = new TutorialLinkedList();\ntutorialHelperText.SegmentManualList.step.forEach((_, index) =>\n  TutorialSegmentManualList.add({ menu: 'SegmentManualList', tutorialStep: index }),\n);\nexport const TutorialReportList = new TutorialLinkedList();\ntutorialHelperText.ReportList.step.forEach((_, index) =>\n  TutorialReportList.add({ menu: 'ReportList', tutorialStep: index }),\n);\n```\n  \n## 인터페이스, 노드, 연결리스트\n    \n```tsx\n// TutorialHelper.interface.ts\n\nexport type TutorialMenu = 'Automation' | 'CampaignList' | 'SegmentSmartList' | 'SegmentManualList' | 'ReportList';\n\nexport type TutorialHelperText = {\n  [key in TutorialMenu]: {\n    title: string;\n    step: Array<{\n      subTitle?: string;\n      desc: string;\n    }>;\n  };\n};\n\nexport interface TutorialInfo {\n  menu: TutorialMenu;\n  tutorialStep: number;\n}\n```\n  \n```tsx\n// TutorialNode.ts\n\nimport { TutorialInfo } from './TutorialHelper.interface';\n\nexport class TutorialNode {\n  info: TutorialInfo;\n\n  prev: TutorialNode | null;\n\n  next: TutorialNode | null;\n\n  constructor(info: TutorialInfo) {\n    this.info = info;\n    this.prev = null;\n    this.next = null;\n  }\n}\n```\n- 연결리스트를 검색하거나 삭제할 일이 없기 때문에 필요한 기능(추가)만 구현했다.\n```tsx\n// TutorialLinkedList.ts\n\nimport { TutorialInfo } from './TutorialHelper.interface';\nimport { TutorialNode } from './TutorialNode';\n\nexport class TutorialLinkedList {\n  public head: TutorialNode | null = null;\n\n  tail: TutorialNode | null = null;\n\n  constructor(headInfo?: TutorialInfo) {\n    if (headInfo) this.init(headInfo);\n  }\n\n  init(headInfo: TutorialInfo): void {\n    this.head = new TutorialNode(headInfo);\n    this.tail = this.head;\n  }\n\n  add(newInfo: TutorialInfo): void {\n    if (this.tail === null) this.init(newInfo);\n    else {\n      const newNode = new TutorialNode(newInfo);\n      newNode.prev = this.tail;\n      this.tail.next = newNode;\n      this.tail = newNode;\n    }\n  }\n}\n```\n\n\n## TutorialFocus 컴포넌트\n\nComposition 패턴으로 구현하여, 강조하고자 하는 영역을 포커스 컴포넌트로 감싸주어 사용할 수 있게 했다.\n    \n```tsx\nimport React, { FC, useMemo, useEffect, useRef } from 'react';\nimport { useRecoilValue } from 'recoil';\nimport { isEqual } from 'lodash';\nimport { demoTutorialState } from '../../../recoil/DemoTutorialState';\nimport { TutorialMenu } from '../TutorialHelper/TutorialHelper.interface';\nimport { StyledLayout } from './TutorialFocus.style';\n\nexport interface FocusTarget {\n  menu: TutorialMenu;\n  tutorialStep: number;\n}\n\nconst isMatch = (propTarget: FocusTarget | FocusTarget[], recoilInfo: FocusTarget) => {\n  if (Array.isArray(propTarget)) return propTarget.some((target) => isEqual(target, recoilInfo));\n  return isEqual(propTarget, recoilInfo);\n};\nexport interface TutorialFocusProps {\n  focusTarget: FocusTarget | FocusTarget[];\n  style?: React.CSSProperties;\n  children: React.ReactNode;\n}\nexport const TutorialFocus: FC<TutorialFocusProps> = ({ focusTarget, style, children }: TutorialFocusProps) => {\n  const ref = useRef<HTMLDivElement>(null);\n  const { tutorialNode, isFolded } = useRecoilValue(demoTutorialState);\n\n  const isFocusOn = useMemo(() => {\n    if (isFolded) return false;\n    if (tutorialNode === null) return false;\n    const { info } = tutorialNode;\n    return isMatch(focusTarget, info);\n  }, [isFolded, tutorialNode]);\n\n  useEffect(() => {\n    if (isFocusOn) ref.current?.scrollIntoView({ behavior: 'smooth', block: 'center' });\n  }, [isFocusOn]);\n\n  return (\n    <StyledLayout isFocusOn={isFocusOn} style={style} ref={ref}>\n      {isFocusOn && <span className=\"dot\" />}\n      {children}\n    </StyledLayout>\n  );\n};\n```    \n\n## TutorialHelper 컴포넌트\n\nFAB(Floating Action Button) UI 컴포넌트 \n    \n```tsx\n// TutorialHelper.tsx\n...\nimport { useRecoilValue, useSetRecoilState } from 'recoil';\nimport { demoTutorialState, demoTutorialStateSelector } from '../../../recoil/DemoTutorialState';\n...\n\nexport const TutorialHelper: FC = () => {\n  const i18next = useTranslation();\n\n  const { title, subTitle, desc, prev, next } = useRecoilValue(demoTutorialStateSelector);\n  const { isDemo, isFolded } = useRecoilValue(demoTutorialState);\n  const setDemoTutorial = useSetRecoilState(demoTutorialState);\n\n  const openPopOver = () => setDemoTutorial((curVal) => ({ ...curVal, isFolded: false }));\n  const closePopOver = () => setDemoTutorial((curVal) => ({ ...curVal, isFolded: true }));\n\n  const toPrevTutorial = () => {\n    if (prev !== null) setDemoTutorial((currVal) => ({ ...currVal, tutorialNode: prev }));\n  };\n  const toNextTutorial = () => {\n    if (next !== null) setDemoTutorial((currVal) => ({ ...currVal, tutorialNode: next }));\n  };\n\n  const List: FC<{ href: string; children: React.ReactNode }> = ({\n    href,\n    children,\n  }: {\n    href: string;\n    children: React.ReactNode;\n  }) => {\n    return (\n      <React.Fragment>\n        <StyledList\n          onClick={() => {\n            window.open(href, '_blank');\n          }}\n        >\n          <div className=\"children\">{children}</div>\n          <FontIcon name=\"ic-arrow-right\" size=\"16px\" />\n        </StyledList>\n      </React.Fragment>\n    );\n  };\n  return isDemo && title && desc ? (\n    <StyledLayout>\n      {!isFolded && (\n        <React.Fragment>\n          <StyledUpperPopOver>\n            <div className=\"title\">{i18next.t('바로가기')}</div>\n\n            <ul className=\"menu-list\">\n              <List href=\"https://bigin.io/contact\">\n                <span role=\"img\" aria-label=\"\">\n                  💌\n                </span>\n                <span>{i18next.t('상담 신청하기')}</span>\n              </List>\n\n              <List href=\"https://docs.google.com/forms/d/e/1FAIpQLScH1ZlWpgqPtcTS0RWHxGxOsUO_4cCYiBFdgxfh6SWEIZgEBA/viewform\">\n                <span role=\"img\" aria-label=\"\">\n                  👩‍💻\n                </span>\n                <span>{i18next.t('비대면 오리엔테이션 듣기')}</span>\n                <BGTooltip\n                  title={\n                    i18next.t(\n                      'bigin 오리엔테이션은 bigin을 통해 활용할 수 있는 데이터 항목, 데이터를 기반으로 고객을 분류하는 세 가지 방법, CRM 마케팅 활용 사례를 공유하고 간략한 bigin 대시보드 시연합니다.',\n                    ) || ''\n                  }\n                >\n                  <div className=\"tip\">\n                    <FontIcon name=\"ic-info\" size=\"16px\" />\n                  </div>\n                </BGTooltip>\n              </List>\n            </ul>\n          </StyledUpperPopOver>\n\n          {title && desc && (\n            <StyledPopOver>\n              <div className=\"border-box\">\n                <div className=\"title\">{subTitle ? `${title}: ${subTitle}` : title}</div>\n                <div className=\"desc\">{desc}</div>\n              </div>\n\n              <div className=\"bottom\">\n                <button type=\"button\" className=\"close\" onClick={closePopOver}>\n                  접기\n                </button>\n\n                <BGButtonGroup>\n                  {prev !== null && (\n                    <BGButton appearance=\"secondary\" onClick={toPrevTutorial}>\n                      <FontIcon name=\"ic-arrow-left\" size=\"20px\" />\n                    </BGButton>\n                  )}\n\n                  {next !== null && (\n                    <BGButton onClick={toNextTutorial}>\n                      <FontIcon name=\"ic-arrow-right\" size=\"20px\" />\n                    </BGButton>\n                  )}\n                </BGButtonGroup>\n              </div>\n            </StyledPopOver>\n          )}\n        </React.Fragment>\n      )}\n\n      {/* button */}\n      <StyledFAB type=\"button\" active={!isFolded} onClick={isFolded ? openPopOver : closePopOver}>\n        <img\n          src={isFolded ? '/assets/img/demo/logo-symbol-white.svg' : '/assets/img/demo/img-tutorial-helper.svg'}\n          alt=\"tutorial helper\"\n        />\n      </StyledFAB>\n    </StyledLayout>\n  ) : (\n    <React.Fragment />\n  );\n};\n```\n\n## 사용법\n    \n### TutorialHelper 컴포넌트(FAB) 사용\n    \n```tsx\n// 최상단 컴포넌트에 추가\n<TutorialHelper />\n```\n    \n### 페이지 mount 시 tutorialNode 초기화\n\n```tsx\n// /pages/Automation.tsx\n\nimport { useRecoilValue, useSetRecoilState } from 'recoil';\nimport { demoTutorialState } from '@/recoil/DemoTutorialState';\nimport { TutorialAutomationList } from '@/components/Demo/TutorialHelper/TutorialHelper.data';\n\nexport const Automation = (): ReactElement => {\n\t...\n  const { isDemo } = useRecoilValue(demoTutorialState);\n  const setDemoTutorial = useSetRecoilState(demoTutorialState);\n\n\t...\n\n  useEffect(() => {\n    if (isDemo) setDemoTutorial((curVal) => ({ ...curVal, tutorialNode: TutorialAutomationList.head }));\n    return () => {\n      if (isDemo) setDemoTutorial((curVal) => ({ ...curVal, tutorialNode: null }));\n    };\n  }, [isDemo]);\n\n\t...\n\n  return (\n    <BGPage className=\"container-section\" direction=\"column\" css={[baseCss]}>\n      ...\n    </BGPage>\n  );\n};\n```\n\n### 포커스 설정\n\n예시1: demoTutorialState의 menu가 “Automation”이고 tutorialStep이 3이면 포커싱이 활성화된다.\n\n```tsx\n<TutorialFocus focusTarget={{ menu: 'Automation', tutorialStep: 3 }}>\n  [포커스 표시할 영역]\n</TutorialFocus>\n```\n\n예시2: demoTutorialState의 menu가 “Automation”이고 tutorialStep이 3이거나 menu가 “CampaignList”이고 tutorialStep이 2라면 포커스가 활성화된다.\n\n```tsx\n<TutorialFocus\n  focusTarget={[\n    { menu: 'Automation', tutorialStep: 3 },\n    { menu: 'CampaignList', tutorialStep: 2 },\n  ]}\n>\n  [포커스 표시할 영역]\n</TutorialFocus>\n```"}},"__N_SSG":true}