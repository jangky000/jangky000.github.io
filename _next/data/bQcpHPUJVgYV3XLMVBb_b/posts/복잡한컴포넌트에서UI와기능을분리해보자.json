{"pageProps":{"postInfo":{"id":1645196400,"title":"복잡한 컴포넌트에서 UI와 기능을 분리해보자","author":"jangky000","category":"업무 회고","desc":"협업을 하다보면 남이 짠 코드를 읽고 새로운 기획에 맞게 수정해서 사용하는 경우가 많다. 재사용성을 고려하고 각각의 주요 역할이 잘 분리되어 있는 코드라면 쉽게 수정이 가능하다. 이번 작업에서는 재사용성을 고려하여 UI와 기능을 분리해본 경험을 공유하고자 한다.","date":"2022.02.19","content":"\n# ImageUploader라는 컴포넌트가 있었다.\n\n## 문제점\n\n- `ImageUploader`라는 컴포넌트 내부에 `버튼(UI)` + `이미지 파일을 업로드하는 기능`이 있다.\n- `ImageUploader`라는 이름에서 이 컴포넌트가 버튼이라는 것을 유추하기 어렵다.\n- 같은 기능을 하는 두 가지 스타일의 버튼이 필요한데, 버튼 스타일을 변경하기 어렵다.\n- `visualType 변경`, `삭제 버튼의 출력 여부` 등 이미지 업로드 기능과 관련이 적은 다른 기능들이 혼재되어 있다.\n- 관심사를 분리하고, 하나의 컴포넌트가 하나의 메인 기능을 담당해야 한다. (단일 책임의 원칙)\n    - 스타일 기능 `Button`\n    - 이미지 업로드 기능 `ImageUploaderComposition`\n\n## 변경 전\n\n![1](https://user-images.githubusercontent.com/46799722/154789453-c6fea7ef-e4d8-4b2e-8411-04fc7e7eae3e.png)\n![2](https://user-images.githubusercontent.com/46799722/154789454-24b0539d-feb8-421a-8982-7b4f137448d0.png)\n\n\n```tsx\n// SmsCreateStep2.tsx\n\n...\n<div className=\"sms-create-item\">\n  <div className=\"sms-create-item-header\">{i18next.t('이미지')}</div>\n  <div className=\"sms-create-image\">\n    <div className=\"sms-create-image-desc\">\n      <div>* {i18next.t('권장 이미지 사이즈: 320px*480px (모바일 기기 최적화)')}</div>\n      <div>* {i18next.t('파일 형식: JPG, JPEG')}</div>\n      <div>* {i18next.t('파일 용량: 최대 300kb')}</div>\n    </div>\n    <ImageUploader\n      handleUpload={updateImage(0)}\n      index={0}\n      endPoint=\"bizSmsCreate\"\n      uploadBtnLabel={i18next.t('파일 선택')}\n      isExistFile={!!props.material.images[0]?.img_url}\n      handleRemove={() => {\n        const tempMaterial: SmsMaterial = _.cloneDeep(props.material);\n        props.handleUpdate({\n          ...tempMaterial,\n          images: [],\n        });\n      }}\n    />\n  </div>\n</div>\n...\n```\n\n## 하나의 컴포넌트에서 하는 일이 너무 많다.\n```tsx\n// ImageUploader.tsx\n\nexport interface ImageUploaderProp {\n  visualType?: ImageUploaderVisualType;\n  handleUpload?: (file: FileInter | Error) => void; // parent material 업데이트\n  verify?: (file: File) => Promise<boolean> | undefined;\n  image?: string;\n  index: number; // id 생성에 사용\n  endPoint?: string;\n  uploadBtnLabel?: string;\n  isValid?: boolean;\n  isExistFile?: boolean;\n  handleRemove?: () => void;\n}\n\nexport const ImageUploader = (props: ImageUploaderProp): ReactElement => {\n  const i18next = useTranslation();\n  const { uploadBtnLabel = '파일 선택' } = props;\n  const [loaded, setLoaded] = useState(false);\n  const fileInput: React.Ref<HTMLInputElement> = useRef(null);\n  const { dialogStore } = useDataStore();\n\n  const uploadImage = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file: null | File = event && event.target && event.target.files && event.target.files[0];\n    let isChecked = true;\n    if (props.verify) {\n      isChecked = (await props.verify(file as File)) as boolean;\n    }\n\n    if (isChecked) {\n      return FileAPI.uploadImage(file, props.endPoint)\n        .then((res) => {\n          if (props.handleUpload) props.handleUpload(res.file as FileInter);\n          setLoaded(true);\n          return Observable.of(res);\n        })\n        .catch(() => {\n          dialogStore.showMessage(i18next.t('알림'), i18next.t('업로드에 실패하였습니다.'));\n          if (fileInput.current) {\n            fileInput.current.value = '';\n          }\n        });\n    }\n    if (fileInput.current) {\n      fileInput.current.value = '';\n    }\n    return isChecked;\n  };\n\n  useEffect(() => {\n    if (props.image) setLoaded(true);\n  }, []);\n\n  return (\n    <div className=\"image-uploader-wrapper\" style={{ position: 'relative' }}>\n      {(!props.visualType || props.visualType === 'normal') && (\n        <div className=\"normal\" css={[normalWrapperStyle]}>\n          <label htmlFor={`imageUploader-${props.index}`} css={labelCss}>\n            <input\n              type=\"file\"\n              className=\"image-uploader-input\"\n              accept=\"image/*\"\n              css={inputCss}\n              id={`imageUploader-${props.index}`}\n              ref={fileInput}\n              onChange={uploadImage}\n            />\n            {!loaded && (\n              <Button\n                className={`image-updater-btn ${!props.isValid ? 'invalid' : ''}`}\n                onClick={() => setLoaded(!loaded)}\n                label={uploadBtnLabel}\n              />\n            )}\n            {loaded && (\n              <Button className=\"image-updater-btn\" onClick={() => setLoaded(!loaded)} label={uploadBtnLabel} />\n            )}\n          </label>\n          {props.handleRemove && props.isExistFile && (\n            <Button\n              style={{ marginLeft: '12px' }}\n              label={i18next.t('삭제')}\n              appearance=\"secondary\"\n              onClick={() => {\n                if (props.handleRemove) {\n                  props.handleRemove();\n                }\n              }}\n            />\n          )}\n        </div>\n      )}\n      {props.visualType === 'small' && (\n        <div className={`small ${props.isValid ? '' : 'invalid'}`} css={[smallWrapperStyle]}>\n          <label\n            htmlFor={`imageUploader-${props.index}`}\n            css={css`\n              display: flex;\n              align-items: center;\n              gap: 8px;\n            `}\n          >\n            <input\n              type=\"file\"\n              className=\"image-uploader-input\"\n              accept=\"image/*\"\n              css={inputCss}\n              id={`imageUploader-${props.index}`}\n              onChange={(event) => {\n                uploadImage(event);\n              }}\n            />\n            {!(loaded && props.image) && (\n              <div css={smallButtonCss} className=\"image-uploader-btn\">\n                <FontIcon name=\"ic-img\" color=\"#7e8696\" size=\"20px\" />\n              </div>\n            )}\n            {loaded && props.image && <img css={smallImageCss} src={props.image} alt=\"slide-content\" />}\n            {!loaded && (\n              <Button\n                className={`image-updater-btn ${!props.isValid ? 'invalid' : ''}`}\n                onClick={() => setLoaded(!loaded)}\n                label={i18next.t('업로드')}\n              />\n            )}\n            {loaded && (\n              <Button className=\"image-updater-btn\" onClick={() => setLoaded(!loaded)} label={i18next.t('업로드')} />\n            )}\n          </label>\n          {props.handleRemove && props.isExistFile && (\n            <Button\n              style={{ marginLeft: '8px' }}\n              label={i18next.t('이미지 삭제')}\n              appearance=\"secondary\"\n              onClick={() => {\n                if (props.handleRemove) {\n                  props.handleRemove();\n                }\n              }}\n            />\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nImageUploader.defaultProps = {\n  isValid: true,\n};\n```\n\n## 변경 후\n\n- 컴포넌트를 다음과 같이 분리\n- `이미지 리스트를 관리하는 컴포넌트(SmsInputImageList)`\n- `이미지 하나를 관리하는 컴포넌트(InputImageCard, InputImageEmptyCard)`\n- `이미지 업로드 기능을 담당하는 컴포넌트(ImageUploaderComposition)`\n- `Button`을 `ImageUploaderComposition` 의 children으로 전달하여 업로드 기능을 수행\n- \\+ 디자인이 조금 수정되었다.\n\n![3](https://user-images.githubusercontent.com/46799722/154789455-b28a31e2-e827-459e-8d9c-da77a3741569.png)\n![4](https://user-images.githubusercontent.com/46799722/154789456-acef377a-3590-49b5-99e5-e449c2f67cdf.png)\n\n```tsx\n// SmsCreateStep2.tsx\n\n...\n<div className=\"sms-create-item\">\n  <div className=\"sms-create-item-header\">{i18next.t('이미지')}</div>\n  <div className=\"sms-create-image\">\n    <div className=\"sms-create-image-desc\">\n      <div>* {i18next.t('최대 첨부 가능 이미지 개수: {{count}}개', { count: 3 })}</div>\n      <div>* {i18next.t('권장 이미지 사이즈: 320px x 480px (모바일 기기 최적화)')}</div>\n      <div>* {i18next.t('파일 형식: JPG, JPEG')}</div>\n      <div>* {i18next.t('파일 용량: 이미지 당 300KB')}</div>\n    </div>\n    <SmsInputImageList\n      imageInfoList={images}\n      handleImageInfoList={handleImageInfoList}\n    />\n  </div>\n</div>\n...\n```\n\n```tsx\n// InputImageEmptyCard.tsx\n// [이미지 썸네일] [파일선택 버튼] UI\nexport const InputImageEmptyCard: FC<InputImageEmptyCardProps> = ({\n  addNewImage,\n  fileValidation,\n}: InputImageEmptyCardProps) => {\n  const i18next = useTranslation();\n  return (\n    <StyledImageCard>\n      <div className=\"image-card-wrapper\">\n        <div className=\"image-card-thumbnail\">\n          <FontIcon name=\"ic-img\" size=\"20px\" color=\"#53585f\" />\n        </div>\n        <ImageUploaderComposition\n          uploadImageAPIEndPoint=\"bizSmsCreate\"\n          handleUpload={addNewImage}\n          fileValidation={fileValidation}\n        >\n          <Button appearance=\"primary\" label={i18next.t('파일 선택')} />\n        </ImageUploaderComposition>\n      </div>\n    </StyledImageCard>\n  );\n};\n```\n\n## 이미지 업로드 기능만 담당\n\n```tsx\n// ImageUploaderComposition.tsx\nexport interface ImageUploaderCompositionProps {\n  uploadImageAPIEndPoint: string;\n  handleUpload: (file: FileInter | Error) => void;\n  fileValidation?: (file: File) => boolean;\n  children: React.ReactNode;\n}\nexport const ImageUploaderComposition: FC<ImageUploaderCompositionProps> = ({\n  uploadImageAPIEndPoint,\n  handleUpload,\n  fileValidation,\n  children,\n}: ImageUploaderCompositionProps) => {\n  const i18next = useTranslation();\n  const inputRef = useRef<HTMLInputElement>(null);\n  const { dialogStore } = useDataStore();\n\n  const handleChange = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event?.target?.files?.[0];\n    if (file === undefined) return;\n\n    // 파일 검증\n    const isValid = fileValidation?.(file) && true;\n    if (isValid === false) return;\n\n    // 파일 업로드\n    try {\n      const result = await FileAPI.uploadImage(file, uploadImageAPIEndPoint); //  uploadImageAPIEndPoint: ex) \"bizSmsCreate\"\n      // 부모 컴포넌트에 업로드 성공한 파일 정보 반환\n      handleUpload(result.file as FileInter);\n    } catch {\n      // 업로드 실패\n      dialogStore.showMessage(i18next.t('알림'), i18next.t('업로드에 실패하였습니다.'));\n      if (inputRef.current) {\n        inputRef.current.value = '';\n      }\n    }\n  };\n\n  const handleChildrenClick = () => {\n    inputRef?.current?.click();\n  };\n  return (\n    <React.Fragment>\n      <input type=\"file\" accept=\"image/*\" ref={inputRef} onChange={handleChange} style={{ display: 'none' }} />\n      <div onClick={handleChildrenClick}>{children}</div>\n    </React.Fragment>\n  );\n};\n```"}},"__N_SSG":true}