{"version":3,"file":"static/chunks/b1bb7d45-faa0f80d2a8b9a7e.js","mappings":"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","sources":["webpack://_N_E/./node_modules/@tensorflow/tfjs-layers/dist/engine/training.js","webpack://_N_E/<anon>"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/* Original Source: engine/training.py */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { io, Optimizer, scalar, serialization, Tensor, tensor1d, util } from '@tensorflow/tfjs-core';\nimport * as K from '../backend/tfjs_backend';\nimport { configureCallbacks, standardizeCallbacks } from '../base_callbacks';\nimport { nameScope } from '../common';\nimport { NotImplementedError, RuntimeError, ValueError } from '../errors';\nimport { deserialize } from '../layers/serialization';\nimport { disposeTensorsInLogs } from '../logs';\nimport * as losses from '../losses';\nimport * as Metrics from '../metrics';\nimport * as optimizers from '../optimizers';\nimport { checkUserDefinedMetadata } from '../user_defined_metadata';\nimport { count, pyListRepeat, singletonOrArray, toCamelCase, toSnakeCase, unique } from '../utils/generic_utils';\nimport { printSummary } from '../utils/layer_utils';\nimport { range } from '../utils/math_utils';\nimport { convertPythonicToTs } from '../utils/serialization_utils';\nimport { version } from '../version';\nimport { Container } from './container';\nimport { execute, FeedDict } from './executor';\nimport { evaluateDataset, fitDataset } from './training_dataset';\nimport { checkBatchSize, disposeNewTensors, ensureTensorsRank2OrHigher, makeBatches, sliceArrays, sliceArraysByIndices } from './training_tensors';\nimport { computeWeightedLoss, standardizeClassWeights, standardizeWeights } from './training_utils';\n/**\n * Helper function for polymorphic input data: 1. singleton Tensor.\n */\nexport function isDataTensor(x) {\n    return x instanceof Tensor;\n}\n/**\n * Helper function for polymorphic input data: 2. Array of Tensor.\n */\nexport function isDataArray(x) {\n    return Array.isArray(x);\n}\n/**\n * Helper function for polymorphic input data: 3. \"dict\" of Tensor.\n */\nexport function isDataDict(x) {\n    return !isDataTensor(x) && !isDataArray(x);\n}\n/**\n * Normalizes inputs and targets provided by users.\n * @param data User-provided input data (polymorphic).\n * @param names An Array of expected Tensor names.\n * @param shapes Optional Array of expected Tensor shapes.\n * @param checkBatchAxis Whether to check that the batch axis of the arrays\n *   match  the expected value found in `shapes`.\n * @param exceptionPrefix String prefix used for exception formatting.\n * @returns List of standardized input Tensors (one Tensor per model input).\n * @throws ValueError: in case of improperly formatted user data.\n */\nexport function standardizeInputData(data, names, shapes, checkBatchAxis = true, exceptionPrefix = '') {\n    if (names == null || names.length === 0) {\n        // Check for the case where the model expected no data, but some data got\n        // sent.\n        if (data != null) {\n            let gotUnexpectedData = false;\n            if (isDataArray(data) && data.length > 0) {\n                gotUnexpectedData = true;\n            }\n            else if (isDataDict(data)) {\n                for (const key in data) {\n                    if (data.hasOwnProperty(key)) {\n                        gotUnexpectedData = true;\n                        break;\n                    }\n                }\n            }\n            else {\n                // `data` is a singleton Tensor in this case.\n                gotUnexpectedData = true;\n            }\n            if (gotUnexpectedData) {\n                throw new ValueError(`Error when checking model ${exceptionPrefix} expected no data, ` +\n                    `but got ${data}`);\n            }\n        }\n        return [];\n    }\n    if (data == null) {\n        return names.map(name => null);\n    }\n    let arrays;\n    if (isDataDict(data)) {\n        data = data;\n        arrays = [];\n        for (const name of names) {\n            if (data[name] == null) {\n                throw new ValueError(`No data provided for \"${name}\". Need data for each key in: ` +\n                    `${names}`);\n            }\n            arrays.push(data[name]);\n        }\n    }\n    else if (isDataArray(data)) {\n        data = data;\n        if (data.length !== names.length) {\n            throw new ValueError(`Error when checking model ${exceptionPrefix}: the Array of ` +\n                `Tensors that you are passing to your model is not the size the ` +\n                `model expected. Expected to see ${names.length} Tensor(s), but ` +\n                `instead got the following list of Tensor(s): ${data}`);\n        }\n        arrays = data;\n    }\n    else {\n        data = data;\n        if (names.length > 1) {\n            throw new ValueError(`The model ${exceptionPrefix} expects ${names.length} Tensor(s), ` +\n                `but only received one Tensor. Found: Tensor with shape ${data.shape}`);\n        }\n        arrays = [data];\n    }\n    arrays = ensureTensorsRank2OrHigher(arrays);\n    // Check shape compatibility.\n    if (shapes != null) {\n        for (let i = 0; i < names.length; ++i) {\n            if (shapes[i] == null) {\n                continue;\n            }\n            const array = arrays[i];\n            if (array.shape.length !== shapes[i].length) {\n                throw new ValueError(`Error when checking ${exceptionPrefix}: expected ${names[i]} ` +\n                    `to have ${shapes[i].length} dimension(s). but got array with ` +\n                    `shape ${array.shape}`);\n            }\n            for (let j = 0; j < shapes[i].length; ++j) {\n                if (j === 0 && !checkBatchAxis) {\n                    // Skip the first (batch) axis.\n                    continue;\n                }\n                const dim = array.shape[j];\n                const refDim = shapes[i][j];\n                if (refDim != null && refDim >= 0 && dim !== refDim) {\n                    throw new ValueError(`${exceptionPrefix} expected a batch of elements where each ` +\n                        `example has shape [${shapes[i].slice(1, shapes[i].length)}] ` +\n                        `(i.e.,tensor shape [*,${shapes[i].slice(1, shapes[i].length)}])` +\n                        ` but the ${exceptionPrefix} received an input with ${array.shape[0]}` +\n                        ` examples, each with shape [${array.shape.slice(1, array.shape.length)}]` +\n                        ` (tensor shape [${array.shape}])`);\n                }\n            }\n        }\n    }\n    return arrays;\n}\n/**\n * User input validation for Tensors.\n * @param inputs `Array` of `tf.Tensor`s for inputs.\n * @param targets `Array` of `tf.Tensor`s for targets.\n * @param weights Optional `Array` of `tf.Tensor`s for sample weights.\n * @throws ValueError: in case of incorrectly formatted data.\n */\nexport function checkArrayLengths(inputs, targets, weights) {\n    const setX = unique(inputs.map(input => input.shape[0]));\n    setX.sort();\n    const setY = unique(targets.map(target => target.shape[0]));\n    setY.sort();\n    // TODO(cais): Check `weights` as well.\n    if (setX.length > 1) {\n        throw new ValueError(`All input Tensors (x) should have the same number of samples. ` +\n            `Got array shapes: ` +\n            `${JSON.stringify(inputs.map(input => input.shape))}`);\n    }\n    if (setY.length > 1) {\n        throw new ValueError(`All target Tensors (y) should have the same number of samples. ` +\n            `Got array shapes: ` +\n            `${JSON.stringify(targets.map(target => target.shape))}`);\n    }\n    if (setX.length > 0 && setY.length > 0 && !util.arraysEqual(setX, setY)) {\n        throw new ValueError(`Input Tensors should have the same number of samples as target ` +\n            `Tensors. Found ${setX[0]} input sample(s) and ${setY[0]} target ` +\n            `sample(s).`);\n    }\n}\n/**\n * Validation on the compatibility of targes and loss functions.\n *\n * This helps prevent users from using loss functions incorrectly.\n *\n * @param targets `Array` of `tf.Tensor`s of targets.\n * @param lossFns `Array` of loss functions.\n * @param outputShapes `Array` of shapes of model outputs.\n */\nfunction checkLossAndTargetCompatibility(targets, lossFns, outputShapes) {\n    // TODO(cais): Dedicated test coverage?\n    const keyLosses = [\n        losses.meanSquaredError, losses.binaryCrossentropy,\n        losses.categoricalCrossentropy\n    ];\n    for (let i = 0; i < targets.length; ++i) {\n        const y = targets[i];\n        const loss = lossFns[i];\n        const shape = outputShapes[i];\n        if (loss == null) {\n            continue;\n        }\n        if (loss === losses.categoricalCrossentropy) {\n            if (y.shape[y.shape.length - 1] === 1) {\n                throw new ValueError(`You are passing a target array of shape ${y.shape} while using ` +\n                    `a loss 'categorical_crossentropy'. 'categorical_crossentropy'` +\n                    `expects targets to be binary matrices (1s and 0s) of shape ` +\n                    `[samples, classes].`);\n                // TODO(cais): Example code in error message.\n            }\n        }\n        if (keyLosses.indexOf(loss) !== -1) {\n            const slicedYShape = y.shape.slice(1);\n            const slicedShape = shape.slice(1);\n            for (let j = 0; j < slicedYShape.length; ++j) {\n                const targetDim = slicedYShape[j];\n                const outDim = slicedShape[j];\n                if (outDim != null && targetDim !== outDim) {\n                    throw new ValueError(`A target Tensor with shape ${y.shape} was passed for an ` +\n                        `output of shape ${shape}, while using a loss function that ` +\n                        `expects targets to have the same shape as the output.`);\n                }\n            }\n        }\n    }\n}\n/**\n * Check inputs provided by the user.\n *\n * Porting Note: This corresponds to _standardize_input_data() in Python\n *   Keras. Because of the strong typing in TF.js, we do not need to convert\n *   the data. Specifically:\n *   1) in PyKeras, `data` can be `DataFrame` instances from pandas, for\n *      example. We don't need to worry about that here because there is no\n *      widely popular javascript/typesdcript equivalent of pandas (so far).\n *      If one becomes available in the future, we can add support.\n *   2) in PyKeras, inputs can be Python dict. But here we are stipulating\n * that the data is either a single `tf.Tensor` or an Array of `tf.Tensor`s. We\n * may add support for `Object` data inputs in the future when the need\n * arises.\n *\n * Instead, we perform basic checks for number of parameters and shapes.\n *\n * @param data: The input data.\n * @param names: Name for the inputs, from the model.\n * @param shapes: Expected shapes for the input data, from the model.\n * @param checkBatchAxis: Whether the size along the batch axis (i.e., the\n *   first dimension) will be checked for matching.\n * @param exceptionPrefix: Execption prefix message, used in generating error\n *   messages.\n * @throws ValueError: on incorrect number of inputs or mismatches in shapes.\n */\nfunction checkInputData(data, names, shapes, checkBatchAxis = true, exceptionPrefix = '') {\n    let arrays;\n    if (Array.isArray(data)) {\n        if (data.length !== names.length) {\n            throw new ValueError(`Error when checking model ${exceptionPrefix}: the Array of ` +\n                `Tensors that you are passing to your model is not the size the ` +\n                `the model expected. Expected to see ${names.length} Tensor(s),` +\n                ` but instead got ${data.length} Tensors(s).`);\n        }\n        arrays = data;\n    }\n    else {\n        if (names.length > 1) {\n            throw new ValueError(`The model expects ${names.length} ${exceptionPrefix} Tensors, ` +\n                `but only received one Tensor. Found: array with shape ` +\n                `${JSON.stringify(data.shape)}.`);\n        }\n        arrays = [data];\n    }\n    if (shapes != null) {\n        for (let i = 0; i < names.length; ++i) {\n            if (shapes[i] == null) {\n                continue;\n            }\n            const array = arrays[i];\n            if (array.shape.length !== shapes[i].length) {\n                throw new ValueError(`Error when checking ${exceptionPrefix}: expected ${names[i]} ` +\n                    `to have ${shapes[i].length} dimension(s), but got array with ` +\n                    `shape ${JSON.stringify(array.shape)}`);\n            }\n            for (let j = 0; j < shapes[i].length; ++j) {\n                if (j === 0 && !checkBatchAxis) {\n                    continue;\n                }\n                const dim = array.shape[j];\n                const refDim = shapes[i][j];\n                if (refDim != null) {\n                    if (refDim !== dim) {\n                        throw new ValueError(`Error when checking ${exceptionPrefix}: expected ` +\n                            `${names[i]} to have shape ${JSON.stringify(shapes[i])} but ` +\n                            `got array with shape ${JSON.stringify(array.shape)}.`);\n                    }\n                }\n            }\n        }\n    }\n}\n/**\n * Maps metric functions to model outputs.\n * @param metrics An shortcut strings name, metric function, `Array` or dict\n *   (`Object`) of metric functions.\n * @param outputNames An `Array` of the names of model outputs.\n * @returns An `Array` (one entry per model output) of `Array` of metric\n *   functions. For instance, if the model has 2 outputs, and for the first\n *   output we want to compute `binaryAccuracy` and `binaryCrossentropy`,\n *   and just `binaryAccuracy` for the second output, the `Array` would look\n *   like:\n *     `[[binaryAccuracy, binaryCrossentropy],  [binaryAccuracy]]`\n * @throws TypeError: incompatible metrics format.\n */\nexport function collectMetrics(metrics, outputNames) {\n    if (metrics == null || Array.isArray(metrics) && metrics.length === 0) {\n        return outputNames.map(name => []);\n    }\n    let wrappedMetrics;\n    if (typeof metrics === 'string' || typeof metrics === 'function') {\n        wrappedMetrics = [metrics];\n    }\n    else if (Array.isArray(metrics) || typeof metrics === 'object') {\n        wrappedMetrics = metrics;\n    }\n    else {\n        throw new TypeError('Type of metrics argument not understood. Expected an string,' +\n            `function, Array, or Object, found: ${metrics}`);\n    }\n    if (Array.isArray(wrappedMetrics)) {\n        // We then apply all metrics to all outputs.\n        return outputNames.map(name => wrappedMetrics);\n    }\n    else {\n        // In this case, metrics is a dict.\n        const nestedMetrics = [];\n        for (const name of outputNames) {\n            let outputMetrics = wrappedMetrics.hasOwnProperty(name) ? wrappedMetrics[name] : [];\n            if (!Array.isArray(outputMetrics)) {\n                outputMetrics = [outputMetrics];\n            }\n            nestedMetrics.push(outputMetrics);\n        }\n        return nestedMetrics;\n    }\n}\nconst LAYERS_MODEL_FORMAT_NAME = 'layers-model';\n/**\n * A `tf.LayersModel` is a directed, acyclic graph of `tf.Layer`s plus methods\n * for training, evaluation, prediction and saving.\n *\n * `tf.LayersModel` is the basic unit of training, inference and evaluation in\n * TensorFlow.js. To create a `tf.LayersModel`, use `tf.LayersModel`.\n *\n * See also:\n *   `tf.Sequential`, `tf.loadLayersModel`.\n *\n * @doc {heading: 'Models', subheading: 'Classes'}\n */\nexport class LayersModel extends Container {\n    constructor(args) {\n        super(args);\n        this.isTraining = false;\n    }\n    /**\n     * Print a text summary of the model's layers.\n     *\n     * The summary includes\n     * - Name and type of all layers that comprise the model.\n     * - Output shape(s) of the layers\n     * - Number of weight parameters of each layer\n     * - If the model has non-sequential-like topology, the inputs each layer\n     *   receives\n     * - The total number of trainable and non-trainable parameters of the model.\n     *\n     * ```js\n     * const input1 = tf.input({shape: [10]});\n     * const input2 = tf.input({shape: [20]});\n     * const dense1 = tf.layers.dense({units: 4}).apply(input1);\n     * const dense2 = tf.layers.dense({units: 8}).apply(input2);\n     * const concat = tf.layers.concatenate().apply([dense1, dense2]);\n     * const output =\n     *     tf.layers.dense({units: 3, activation: 'softmax'}).apply(concat);\n     *\n     * const model = tf.model({inputs: [input1, input2], outputs: output});\n     * model.summary();\n     * ```\n     *\n     * @param lineLength Custom line length, in number of characters.\n     * @param positions Custom widths of each of the columns, as either\n     *   fractions of `lineLength` (e.g., `[0.5, 0.75, 1]`) or absolute number\n     *   of characters (e.g., `[30, 50, 65]`). Each number corresponds to\n     *   right-most (i.e., ending) position of a column.\n     * @param printFn Custom print function. Can be used to replace the default\n     *   `console.log`. For example, you can use `x => {}` to mute the printed\n     *   messages in the console.\n     *\n     * @doc {heading: 'Models', subheading: 'Classes'}\n     */\n    summary(lineLength, positions, printFn = console.log) {\n        if (!this.built) {\n            throw new ValueError(`This model has never been called, thus its weights have not been ` +\n                `created yet. So no summary can be displayed. Build the model ` +\n                `first (e.g., by calling it on some test data).`);\n        }\n        printSummary(this, lineLength, positions, printFn);\n    }\n    /**\n     * Configures and prepares the model for training and evaluation.  Compiling\n     * outfits the model with an optimizer, loss, and/or metrics.  Calling `fit`\n     * or `evaluate` on an un-compiled model will throw an error.\n     *\n     * @param args a `ModelCompileArgs` specifying the loss, optimizer, and\n     * metrics to be used for fitting and evaluating this model.\n     *\n     * @doc {heading: 'Models', subheading: 'Classes'}\n     */\n    compile(args) {\n        if (args.loss == null) {\n            args.loss = [];\n        }\n        this.loss = args.loss;\n        if (typeof args.optimizer === 'string') {\n            this.optimizer_ = optimizers.getOptimizer(args.optimizer);\n            this.isOptimizerOwned = true;\n        }\n        else {\n            if (!(args.optimizer instanceof Optimizer)) {\n                throw new ValueError(`User-defined optimizer must be an instance of tf.Optimizer.`);\n            }\n            this.optimizer_ = args.optimizer;\n            this.isOptimizerOwned = false;\n        }\n        // TODO(cais): Add lossWeights.\n        // TODO(cais): Add sampleWeightMode.\n        // Prepare loss functions.\n        let lossFunctions = [];\n        if (!Array.isArray(args.loss) && typeof args.loss !== 'string' &&\n            typeof args.loss !== 'function') {\n            args.loss = args.loss;\n            for (const name in args.loss) {\n                if (this.outputNames.indexOf(name) === -1) {\n                    throw new ValueError(`Unknown entry in loss dictionary: \"${name}\". ` +\n                        `Only expected the following keys: ${this.outputNames}`);\n                }\n            }\n            for (const name of this.outputNames) {\n                if (args.loss[name] == null) {\n                    console.warn(`Output \"${name}\" is missing from loss dictionary. We assume ` +\n                        `this was done on purpose, and we will not be expecting data ` +\n                        `to be passed to ${name} during training`);\n                }\n                lossFunctions.push(losses.get(args.loss[name]));\n            }\n        }\n        else if (Array.isArray(args.loss)) {\n            if (args.loss.length !== this.outputs.length) {\n                throw new ValueError(`When passing an Array as loss, it should have one entry per ` +\n                    `model output. The model has ${this.outputs.length} output(s), ` +\n                    `but you passed loss=${args.loss}.`);\n            }\n            const theLosses = args.loss;\n            lossFunctions = theLosses.map(l => losses.get(l));\n        }\n        else {\n            const lossFunction = losses.get(args.loss);\n            this.outputs.forEach(_ => {\n                lossFunctions.push(lossFunction);\n            });\n        }\n        this.lossFunctions = lossFunctions;\n        this.feedOutputNames = [];\n        this.feedOutputShapes = [];\n        this.feedLossFns = [];\n        for (let i = 0; i < this.outputs.length; ++i) {\n            // TODO(cais): Logic for skipping target(s).\n            const shape = this.internalOutputShapes[i];\n            const name = this.outputNames[i];\n            this.feedOutputNames.push(name);\n            this.feedOutputShapes.push(shape);\n            this.feedLossFns.push(this.lossFunctions[i]);\n        }\n        // TODO(cais): Add logic for output masks.\n        // TODO(cais): Add logic for sample weights.\n        const skipTargetIndices = [];\n        // Prepare metrics.\n        this.metrics = args.metrics;\n        // TODO(cais): Add weightedMetrics.\n        this.metricsNames = ['loss'];\n        this.metricsTensors = [];\n        // Compute total loss.\n        // Porting Note: In PyKeras, metrics_tensors are symbolic tensor objects.\n        //   Here, metricsTensors are TypeScript functions. This difference is due\n        //   to the difference in symbolic/imperative property of the backends.\n        nameScope('loss', () => {\n            for (let i = 0; i < this.outputs.length; ++i) {\n                if (skipTargetIndices.indexOf(i) !== -1) {\n                    continue;\n                }\n                // TODO(cais): Add weightedLoss, sampleWeight and mask.\n                //   The following line should be weightedLoss\n                const weightedLoss = this.lossFunctions[i];\n                if (this.outputs.length > 1) {\n                    this.metricsTensors.push([weightedLoss, i]);\n                    this.metricsNames.push(this.outputNames[i] + '_loss');\n                }\n            }\n            // Porting Note: Due to the imperative nature of the backend, we calculate\n            //   the regularizer penalties in the totalLossFunction, instead of here.\n        });\n        const nestedMetrics = collectMetrics(args.metrics, this.outputNames);\n        // TODO(cais): Add nestedWeightedMetrics.\n        /**\n         * Helper function used in loop below.\n         */\n        const appendMetric = (outputIndex, metricName, metricTensor) => {\n            if (this.outputNames.length > 1) {\n                metricName = this.outputNames[outputIndex] + '_' + metricName;\n            }\n            this.metricsNames.push(metricName);\n            this.metricsTensors.push([metricTensor, outputIndex]);\n        };\n        nameScope('metric', () => {\n            for (let i = 0; i < this.outputs.length; ++i) {\n                if (skipTargetIndices.indexOf(i) !== -1) {\n                    continue;\n                }\n                const outputMetrics = nestedMetrics[i];\n                // TODO(cais): Add weights and outputWeightedMetrics.\n                // TODO(cais): Add optional arg `weights` to the following function.\n                const handleMetrics = (metrics) => {\n                    const metricNamePrefix = '';\n                    let metricName;\n                    let accFn;\n                    let weightedMetricFn;\n                    //  TODO(cais): Use 'weights_' for weighted metrics.\n                    for (const metric of metrics) {\n                        if (typeof metric === 'string' &&\n                            ['accuracy', 'acc', 'crossentropy', 'ce'].indexOf(metric) !==\n                                -1) {\n                            const outputShape = this.internalOutputShapes[i];\n                            if (outputShape[outputShape.length - 1] === 1 ||\n                                this.lossFunctions[i] === losses.binaryCrossentropy) {\n                                // case: binary accuracy/crossentropy.\n                                if (['accuracy', 'acc'].indexOf(metric) !== -1) {\n                                    accFn = Metrics.binaryAccuracy;\n                                }\n                                else if (['crossentropy', 'ce'].indexOf(metric) !== -1) {\n                                    accFn = Metrics.binaryCrossentropy;\n                                }\n                            }\n                            else if (this.lossFunctions[i] ===\n                                losses.sparseCategoricalCrossentropy) {\n                                // case: categorical accuracy / crossentropy with sparse\n                                // targets.\n                                if (['accuracy', 'acc'].indexOf(metric) !== -1) {\n                                    accFn = Metrics.sparseCategoricalAccuracy;\n                                }\n                                else if (['crossentropy', 'ce'].indexOf(metric) !== -1) {\n                                    accFn = Metrics.sparseCategoricalCrossentropy;\n                                }\n                            }\n                            else {\n                                // case: categorical accuracy / crossentropy.\n                                if (['accuracy', 'acc'].indexOf(metric) !== -1) {\n                                    accFn = Metrics.categoricalAccuracy;\n                                }\n                                else if (['crossentropy', 'ce'].indexOf(metric) !== -1) {\n                                    accFn = Metrics.categoricalCrossentropy;\n                                }\n                            }\n                            let suffix;\n                            if (['accuracy', 'acc'].indexOf(metric) !== -1) {\n                                suffix = 'acc';\n                            }\n                            else if (['crossentropy', 'ce'].indexOf(metric) !== -1) {\n                                suffix = 'ce';\n                            }\n                            // TODO(cais): Add weighting actually.\n                            weightedMetricFn = accFn;\n                            metricName = metricNamePrefix + suffix;\n                        }\n                        else {\n                            const metricFn = Metrics.get(metric);\n                            // TODO(cais): Add weighting actually.\n                            weightedMetricFn = metricFn;\n                            metricName =\n                                metricNamePrefix + Metrics.getLossOrMetricName(metric);\n                        }\n                        // TODO(cais): Add weighting and masking to metricResult.\n                        let metricResult;\n                        nameScope(metricName, () => {\n                            metricResult = weightedMetricFn;\n                        });\n                        appendMetric(i, metricName, metricResult);\n                    }\n                };\n                handleMetrics(outputMetrics);\n                // TODO(cais): Call handleMetrics with weights.\n            }\n        });\n        // Porting Notes: Given the imperative backend of tfjs-core,\n        //   there is no need for constructing the symbolic graph and placeholders.\n        this.collectedTrainableWeights = this.trainableWeights;\n    }\n    /**\n     * Check trainable weights count consistency.\n     *\n     * This will raise a warning if `this.trainableWeights` and\n     * `this.collectedTrainableWeights` are inconsistent (i.e., have different\n     * numbers of parameters).\n     * Inconsistency will typically arise when one modifies `model.trainable`\n     * without calling `model.compile()` again.\n     */\n    checkTrainableWeightsConsistency() {\n        if (this.collectedTrainableWeights == null) {\n            return;\n        }\n        if (this.trainableWeights.length !==\n            this.collectedTrainableWeights.length) {\n            console.warn('Discrepancy between trainableweights and collected trainable ' +\n                'weights. Did you set `model.trainable` without calling ' +\n                '`model.compile()` afterwards?');\n        }\n    }\n    /**\n     * Returns the loss value & metrics values for the model in test mode.\n     *\n     * Loss and metrics are specified during `compile()`, which needs to happen\n     * before calls to `evaluate()`.\n     *\n     * Computation is done in batches.\n     *\n     * ```js\n     * const model = tf.sequential({\n     *   layers: [tf.layers.dense({units: 1, inputShape: [10]})]\n     * });\n     * model.compile({optimizer: 'sgd', loss: 'meanSquaredError'});\n     * const result = model.evaluate(\n     *     tf.ones([8, 10]), tf.ones([8, 1]), {batchSize: 4});\n     * result.print();\n     * ```\n     *\n     * @param x `tf.Tensor` of test data, or an `Array` of `tf.Tensor`s if the\n     * model has multiple inputs.\n     * @param y `tf.Tensor` of target data, or an `Array` of `tf.Tensor`s if the\n     * model has multiple outputs.\n     * @param args A `ModelEvaluateArgs`, containing optional fields.\n     *\n     * @return `Scalar` test loss (if the model has a single output and no\n     *   metrics) or `Array` of `Scalar`s (if the model has multiple outputs\n     *   and/or metrics). The attribute `model.metricsNames`\n     *   will give you the display labels for the scalar outputs.\n     *\n     * @doc {heading: 'Models', subheading: 'Classes'}\n     */\n    evaluate(x, y, args = {}) {\n        const batchSize = args.batchSize == null ? 32 : args.batchSize;\n        checkBatchSize(batchSize);\n        // TODO(cais): Standardize `config.sampleWeights` as well.\n        // Validate user data.\n        const checkBatchAxis = true;\n        const standardizedOuts = this.standardizeUserDataXY(x, y, checkBatchAxis, batchSize);\n        try {\n            // TODO(cais): If uses `useLearningPhase`, set the corresponding element\n            // of the input to 0.\n            const ins = standardizedOuts[0].concat(standardizedOuts[1]);\n            this.makeTestFunction();\n            const f = this.testFunction;\n            const testOuts = this.testLoop(f, ins, batchSize, args.verbose, args.steps);\n            return singletonOrArray(testOuts);\n        }\n        finally {\n            disposeNewTensors(standardizedOuts[0], x);\n            disposeNewTensors(standardizedOuts[1], y);\n        }\n    }\n    // TODO(cais): Add code snippet below once real dataset objects are\n    //   available.\n    /**\n     * Evaluate model using a dataset object.\n     *\n     * Note: Unlike `evaluate()`, this method is asynchronous (`async`).\n     *\n     * @param dataset A dataset object. Its `iterator()` method is expected\n     *   to generate a dataset iterator object, the `next()` method of which\n     *   is expected to produce data batches for evaluation. The return value\n     *   of the `next()` call ought to contain a boolean `done` field and a\n     *   `value` field. The `value` field is expected to be an array of two\n     *   `tf.Tensor`s or an array of two nested `tf.Tensor` structures. The former\n     *   case is for models with exactly one input and one output (e.g.\n     *   a sequential model). The latter case is for models with multiple\n     *   inputs and/or multiple outputs. Of the two items in the array, the\n     *   first is the input feature(s) and the second is the output target(s).\n     * @param args A configuration object for the dataset-based evaluation.\n     * @returns Loss and metric values as an Array of `Scalar` objects.\n     *\n     * @doc {heading: 'Models', subheading: 'Classes'}\n     */\n    async evaluateDataset(dataset, args) {\n        this.makeTestFunction();\n        return evaluateDataset(this, dataset, args);\n    }\n    /**\n     * Get number of samples provided for training, evaluation or prediction.\n     *\n     * @param ins Input `tf.Tensor`.\n     * @param batchSize Integer batch size, optional.\n     * @param steps Total number of steps (batches of samples) before\n     * declaring loop finished. Optional.\n     * @param stepsName The public API's parameter name for `steps`.\n     * @returns Number of samples provided.\n     */\n    checkNumSamples(ins, batchSize, steps, stepsName = 'steps') {\n        let numSamples;\n        if (steps != null) {\n            numSamples = null;\n            if (batchSize != null) {\n                throw new ValueError(`If ${stepsName} is set, batchSize must be null or undefined.` +\n                    `Got batchSize = ${batchSize}`);\n            }\n        }\n        else if (ins != null) {\n            if (Array.isArray(ins)) {\n                numSamples = ins[0].shape[0];\n            }\n            else {\n                numSamples = ins.shape[0];\n            }\n        }\n        else {\n            throw new ValueError(`Either the input data should have a defined shape, or ` +\n                `${stepsName} shoud be specified.`);\n        }\n        return numSamples;\n    }\n    /**\n     * Execute internal tensors of the model with input data feed.\n     * @param inputs Input data feed. Must match the inputs of the model.\n     * @param outputs Names of the output tensors to be fetched. Must match\n     *   names of the SymbolicTensors that belong to the graph.\n     * @returns Fetched values for `outputs`.\n     */\n    execute(inputs, outputs) {\n        if (Array.isArray(outputs) && outputs.length === 0) {\n            throw new ValueError('`outputs` is an empty Array, which is not allowed.');\n        }\n        const outputsIsArray = Array.isArray(outputs);\n        const outputNames = (outputsIsArray ? outputs : [outputs]);\n        const outputSymbolicTensors = this.retrieveSymbolicTensors(outputNames);\n        // Format the input into a FeedDict.\n        const feedDict = new FeedDict();\n        if (inputs instanceof Tensor) {\n            inputs = [inputs];\n        }\n        if (Array.isArray(inputs)) {\n            if (inputs.length !== this.inputs.length) {\n                throw new ValueError(`The number of inputs provided (${inputs.length}) ` +\n                    `does not match the number of inputs of this model ` +\n                    `(${this.inputs.length}).`);\n            }\n            for (let i = 0; i < this.inputs.length; ++i) {\n                feedDict.add(this.inputs[i], inputs[i]);\n            }\n        }\n        else {\n            for (const input of this.inputs) {\n                const tensorValue = inputs[input.name];\n                if (tensorValue == null) {\n                    throw new ValueError(`No value is provided for the model's input ${input.name}`);\n                }\n                feedDict.add(input, tensorValue);\n            }\n        }\n        // Run execution.\n        const executeOutputs = execute(outputSymbolicTensors, feedDict);\n        return outputsIsArray ? executeOutputs : executeOutputs[0];\n    }\n    /**\n     * Retrieve the model's internal symbolic tensors from symbolic-tensor names.\n     */\n    retrieveSymbolicTensors(symbolicTensorNames) {\n        const outputSymbolicTensors = pyListRepeat(null, symbolicTensorNames.length);\n        let outputsRemaining = symbolicTensorNames.length;\n        for (const layer of this.layers) {\n            const layerOutputs = Array.isArray(layer.output) ? layer.output : [layer.output];\n            const layerOutputNames = layerOutputs.map(output => output.name);\n            for (let i = 0; i < symbolicTensorNames.length; ++i) {\n                const index = layerOutputNames.indexOf(symbolicTensorNames[i]);\n                if (index !== -1) {\n                    outputSymbolicTensors[i] = layerOutputs[index];\n                    outputsRemaining--;\n                }\n                if (outputsRemaining === 0) {\n                    break;\n                }\n            }\n            if (outputsRemaining === 0) {\n                break;\n            }\n        }\n        if (outputsRemaining > 0) {\n            const remainingNames = [];\n            outputSymbolicTensors.forEach((tensor, i) => {\n                if (tensor == null) {\n                    remainingNames.push(symbolicTensorNames[i]);\n                }\n            });\n            throw new ValueError(`Cannot find SymbolicTensors for output name(s): ` +\n                `${JSON.stringify(remainingNames)}`);\n        }\n        return outputSymbolicTensors;\n    }\n    /**\n     * Helper method to loop over some data in batches.\n     *\n     * Porting Note: Not using the functional approach in the Python equivalent\n     *   due to the imperative backend.\n     * Porting Note: Does not support step mode currently.\n     *\n     * @param ins: input data\n     * @param batchSize: integer batch size.\n     * @param verbose: verbosity model\n     * @returns: Predictions as `tf.Tensor` (if a single output) or an `Array` of\n     *   `tf.Tensor` (if multipe outputs).\n     */\n    predictLoop(ins, batchSize = 32, verbose = false) {\n        return tfc.tidy(() => {\n            const numSamples = this.checkNumSamples(ins);\n            if (verbose) {\n                throw new NotImplementedError('Verbose predictLoop() is not implemented yet.');\n            }\n            // Sample-based predictions.\n            // Porting Note: Tensor currently does not support sliced assignments as\n            //   in numpy, e.g., x[1:3] = y. Therefore we use concatenation while\n            //   iterating over the batches.\n            const batches = makeBatches(numSamples, batchSize);\n            const outsBatches = this.outputs.map(output => []);\n            // TODO(cais): Can the scope() be pushed down inside the for loop?\n            for (let batchIndex = 0; batchIndex < batches.length; ++batchIndex) {\n                const batchOuts = tfc.tidy(() => {\n                    const batchStart = batches[batchIndex][0];\n                    const batchEnd = batches[batchIndex][1];\n                    // TODO(cais): Take care of the case of the last element is a flag for\n                    //   training/test.\n                    const insBatch = sliceArrays(ins, batchStart, batchEnd);\n                    // Construct the feeds for execute();\n                    const feeds = [];\n                    if (Array.isArray(insBatch)) {\n                        for (let i = 0; i < insBatch.length; ++i) {\n                            feeds.push({ key: this.inputs[i], value: insBatch[i] });\n                        }\n                    }\n                    else {\n                        feeds.push({ key: this.inputs[0], value: insBatch });\n                    }\n                    const feedDict = new FeedDict(feeds);\n                    return execute(this.outputs, feedDict);\n                });\n                batchOuts.forEach((batchOut, i) => outsBatches[i].push(batchOut));\n            }\n            return singletonOrArray(outsBatches.map(batches => tfc.concat(batches, 0)));\n        });\n    }\n    /**\n     * Generates output predictions for the input samples.\n     *\n     * Computation is done in batches.\n     *\n     * Note: the \"step\" mode of predict() is currently not supported.\n     *   This is because the TensorFlow.js core backend is imperative only.\n     *\n     * ```js\n     * const model = tf.sequential({\n     *   layers: [tf.layers.dense({units: 1, inputShape: [10]})]\n     * });\n     * model.predict(tf.ones([8, 10]), {batchSize: 4}).print();\n     * ```\n     *\n     * @param x The input data, as a Tensor, or an `Array` of `tf.Tensor`s if\n     *   the model has multiple inputs.\n     * @param args A `ModelPredictArgs` object containing optional fields.\n     *\n     * @return Prediction results as a `tf.Tensor`(s).\n     *\n     * @exception ValueError In case of mismatch between the provided input data\n     *   and the model's expectations, or in case a stateful model receives a\n     *   number of samples that is not a multiple of the batch size.\n     *\n     * @doc {heading: 'Models', subheading: 'Classes'}\n     */\n    predict(x, args = {}) {\n        const xsRank2OrHigher = ensureTensorsRank2OrHigher(x);\n        checkInputData(xsRank2OrHigher, this.inputNames, this.feedInputShapes, false);\n        try {\n            // TODO(cais): Take care of stateful models.\n            //   if (this.stateful) ...\n            // TODO(cais): Take care of the learning_phase boolean flag.\n            //   if (this.useLearningPhase) ...\n            const batchSize = args.batchSize == null ? 32 : args.batchSize;\n            checkBatchSize(batchSize);\n            return this.predictLoop(xsRank2OrHigher, batchSize);\n        }\n        finally {\n            disposeNewTensors(xsRank2OrHigher, x);\n        }\n    }\n    /**\n     * Returns predictions for a single batch of samples.\n     *\n     * ```js\n     * const model = tf.sequential({\n     *   layers: [tf.layers.dense({units: 1, inputShape: [10]})]\n     * });\n     * model.predictOnBatch(tf.ones([8, 10])).print();\n     * ```\n     * @param x: Input samples, as a Tensor (for models with exactly one\n     *   input) or an array of Tensors (for models with more than one input).\n     * @return Tensor(s) of predictions\n     *\n     * @doc {heading: 'Models', subheading: 'Classes'}\n     */\n    predictOnBatch(x) {\n        checkInputData(x, this.inputNames, this.feedInputShapes, true);\n        // TODO(cais): Take care of the learning_phase boolean flag.\n        //   if (this.useLearningPhase) ...\n        const batchSize = (Array.isArray(x) ? x[0] : x).shape[0];\n        return this.predictLoop(x, batchSize);\n    }\n    standardizeUserDataXY(x, y, checkBatchAxis = true, batchSize) {\n        // TODO(cais): Add sampleWeight, classWeight\n        if (this.optimizer_ == null) {\n            throw new RuntimeError('You must compile a model before training/testing. Use ' +\n                'LayersModel.compile(modelCompileArgs).');\n        }\n        const outputShapes = [];\n        for (let i = 0; i < this.feedOutputShapes.length; ++i) {\n            const outputShape = this.feedOutputShapes[i];\n            const lossFn = this.feedLossFns[i];\n            if (lossFn === losses.sparseCategoricalCrossentropy) {\n                outputShapes.push(outputShape.slice(0, outputShape.length - 1).concat([1]));\n            }\n            else {\n                // Porting Note: Because of strong typing `lossFn` must be a function.\n                outputShapes.push(outputShape);\n            }\n        }\n        x = standardizeInputData(x, this.feedInputNames, this.feedInputShapes, false, 'input');\n        y = standardizeInputData(y, this.feedOutputNames, outputShapes, false, 'target');\n        // TODO(cais): Standardize sampleWeights & classWeights.\n        checkArrayLengths(x, y, null);\n        // TODO(cais): Check sampleWeights as well.\n        checkLossAndTargetCompatibility(y, this.feedLossFns, this.feedOutputShapes);\n        if (this.stateful && batchSize != null && batchSize > 0) {\n            if (x[0].shape[0] % batchSize !== 0) {\n                throw new ValueError(`In a stateful network, you should only pass inputs with a ` +\n                    `number of samples that is divisible by the batch size ` +\n                    `${batchSize}. Found: ${x[0].shape[0]} sample(s).`);\n            }\n        }\n        return [x, y];\n    }\n    async standardizeUserData(x, y, sampleWeight, classWeight, checkBatchAxis = true, batchSize) {\n        const [standardXs, standardYs] = this.standardizeUserDataXY(x, y, checkBatchAxis, batchSize);\n        // TODO(cais): Handle sampleWeights.\n        if (sampleWeight != null) {\n            throw new Error('sample weight is not supported yet.');\n        }\n        let standardSampleWeights = null;\n        if (classWeight != null) {\n            const classWeights = standardizeClassWeights(classWeight, this.outputNames);\n            standardSampleWeights = [];\n            for (let i = 0; i < classWeights.length; ++i) {\n                standardSampleWeights.push(await standardizeWeights(standardYs[i], null, classWeights[i]));\n            }\n        }\n        // TODO(cais): Deal with the case of model.stateful == true.\n        return [standardXs, standardYs, standardSampleWeights];\n    }\n    /**\n     * Loop over some test data in batches.\n     * @param f A Function returning a list of tensors.\n     * @param ins Array of tensors to be fed to `f`.\n     * @param batchSize Integer batch size or `null` / `undefined`.\n     * @param verbose verbosity mode.\n     * @param steps Total number of steps (batches of samples) before\n     * declaring test finished. Ignored with the default value of `null` /\n     * `undefined`.\n     * @returns Array of Scalars.\n     */\n    testLoop(f, ins, batchSize, verbose = 0, steps) {\n        return tfc.tidy(() => {\n            const numSamples = this.checkNumSamples(ins, batchSize, steps, 'steps');\n            const outs = [];\n            if (verbose > 0) {\n                throw new NotImplementedError('Verbose mode is not implemented yet.');\n            }\n            // TODO(cais): Use `indicesForConversionToDense' to prevent slow down.\n            if (steps != null) {\n                throw new NotImplementedError('steps mode in testLoop() is not implemented yet');\n            }\n            else {\n                const batches = makeBatches(numSamples, batchSize);\n                const indexArray = tensor1d(range(0, numSamples));\n                for (let batchIndex = 0; batchIndex < batches.length; ++batchIndex) {\n                    const batchStart = batches[batchIndex][0];\n                    const batchEnd = batches[batchIndex][1];\n                    const batchIds = K.sliceAlongFirstAxis(indexArray, batchStart, batchEnd - batchStart);\n                    // TODO(cais): In ins, train flag can be a number, instead of an\n                    //   Tensor? Do we need to handle this in tfjs-layers?\n                    const insBatch = sliceArraysByIndices(ins, batchIds);\n                    const batchOuts = f(insBatch);\n                    if (batchIndex === 0) {\n                        for (let i = 0; i < batchOuts.length; ++i) {\n                            outs.push(scalar(0));\n                        }\n                    }\n                    for (let i = 0; i < batchOuts.length; ++i) {\n                        const batchOut = batchOuts[i];\n                        outs[i] =\n                            tfc.add(outs[i], tfc.mul(batchEnd - batchStart, batchOut));\n                    }\n                }\n                for (let i = 0; i < outs.length; ++i) {\n                    outs[i] = tfc.div(outs[i], numSamples);\n                }\n            }\n            return outs;\n        });\n    }\n    getDedupedMetricsNames() {\n        const outLabels = this.metricsNames;\n        // Rename duplicated metrics names (can happen with an output layer\n        // shared among multiple dataflows).\n        const dedupedOutLabels = [];\n        for (let i = 0; i < outLabels.length; ++i) {\n            const label = outLabels[i];\n            let newLabel = label;\n            if (count(outLabels, label) > 1) {\n                const dupIndex = count(outLabels.slice(0, i), label);\n                newLabel += `_${dupIndex}`;\n            }\n            dedupedOutLabels.push(newLabel);\n        }\n        return dedupedOutLabels;\n    }\n    /**\n     * Creates a function that performs the following actions:\n     *\n     * 1. computes the losses\n     * 2. sums them to get the total loss\n     * 3. call the optimizer computes the gradients of the LayersModel's\n     *    trainable weights w.r.t. the total loss and update the variables\n     * 4. calculates the metrics\n     * 5. returns the values of the losses and metrics.\n     */\n    makeTrainFunction() {\n        return (data) => {\n            const lossValues = [];\n            const inputs = data.slice(0, this.inputs.length);\n            const targets = data.slice(this.inputs.length, this.inputs.length + this.outputs.length);\n            const sampleWeights = data.slice(this.inputs.length + this.outputs.length, this.inputs.length + this.outputs.length * 2);\n            const metricsValues = [];\n            // Create a function that computes the total loss based on the\n            // inputs. This function is used for obtaining gradients through\n            // backprop.\n            const totalLossFunction = () => {\n                const feeds = [];\n                for (let i = 0; i < this.inputs.length; ++i) {\n                    feeds.push({ key: this.inputs[i], value: inputs[i] });\n                }\n                const feedDict = new FeedDict(feeds);\n                const outputs = execute(this.outputs, feedDict, { 'training': true });\n                // TODO(cais): Take care of the case of multiple outputs from a\n                //   single layer?\n                let totalLoss;\n                for (let i = 0; i < this.lossFunctions.length; ++i) {\n                    const lossFunction = this.lossFunctions[i];\n                    let loss = lossFunction(targets[i], outputs[i]);\n                    if (sampleWeights[i] != null) {\n                        loss = computeWeightedLoss(loss, sampleWeights[i]);\n                    }\n                    // TODO(cais): push Scalar instead.\n                    const meanLoss = tfc.mean(loss);\n                    // TODO(cais): Use a scope() instead, to avoid ownership.\n                    lossValues.push(meanLoss);\n                    if (i === 0) {\n                        totalLoss = loss;\n                    }\n                    else {\n                        totalLoss = tfc.add(totalLoss, loss);\n                    }\n                }\n                // Compute the metrics.\n                // TODO(cais): These should probably be calculated outside\n                //   totalLossFunction to benefit speed?\n                for (let i = 0; i < this.metricsTensors.length; ++i) {\n                    let weightedMetric;\n                    if (this.outputs.length > 1 && i < this.outputs.length) {\n                        weightedMetric = lossValues[i];\n                    }\n                    else {\n                        const metric = this.metricsTensors[i][0];\n                        const outputIndex = this.metricsTensors[i][1];\n                        weightedMetric =\n                            tfc.mean(metric(targets[outputIndex], outputs[outputIndex]));\n                    }\n                    tfc.keep(weightedMetric);\n                    // TODO(cais): Use a scope() instead, to avoid ownership.\n                    metricsValues.push(weightedMetric);\n                }\n                totalLoss = tfc.mean(totalLoss);\n                // Add regularizer penalties.\n                this.calculateLosses().forEach(regularizerLoss => {\n                    totalLoss = tfc.add(totalLoss, regularizerLoss);\n                });\n                return totalLoss;\n            };\n            const variables = this.collectedTrainableWeights.map(param => param.read());\n            const returnCost = true;\n            const totalLossValue = this.optimizer_.minimize(totalLossFunction, returnCost, variables);\n            return [totalLossValue].concat(metricsValues);\n        };\n    }\n    /**\n     * Create a function which, when invoked with an array of `tf.Tensor`s as a\n     * batch of inputs, returns the prespecified loss and metrics of the model\n     * under the batch of input data.\n     */\n    makeTestFunction() {\n        this.testFunction = (data) => {\n            return tfc.tidy(() => {\n                const valOutputs = [];\n                let totalLoss;\n                const inputs = data.slice(0, this.inputs.length);\n                const targets = data.slice(this.inputs.length, this.inputs.length + this.outputs.length);\n                const feeds = [];\n                for (let i = 0; i < this.inputs.length; ++i) {\n                    feeds.push({ key: this.inputs[i], value: inputs[i] });\n                }\n                const feedDict = new FeedDict(feeds);\n                const outputs = execute(this.outputs, feedDict);\n                // Compute total loss.\n                for (let i = 0; i < this.lossFunctions.length; ++i) {\n                    const lossFunction = this.lossFunctions[i];\n                    // TODO(cais): Add sample weighting and replace the simple\n                    // averaging.\n                    const loss = tfc.mean(lossFunction(targets[i], outputs[i]));\n                    if (i === 0) {\n                        totalLoss = loss;\n                    }\n                    else {\n                        totalLoss = tfc.add(totalLoss, loss);\n                    }\n                    valOutputs.push(totalLoss);\n                }\n                // Compute the metrics.\n                for (let i = 0; i < this.metricsTensors.length; ++i) {\n                    const metric = this.metricsTensors[i][0];\n                    const outputIndex = this.metricsTensors[i][1];\n                    // TODO(cais): Replace K.mean() with a proper weighting function.\n                    const meanMetric = tfc.mean(metric(targets[outputIndex], outputs[outputIndex]));\n                    valOutputs.push(meanMetric);\n                }\n                return valOutputs;\n            });\n        };\n    }\n    /**\n     * Trains the model for a fixed number of epochs (iterations on a\n     * dataset).\n     *\n     * ```js\n     * const model = tf.sequential({\n     *     layers: [tf.layers.dense({units: 1, inputShape: [10]})]\n     * });\n     * model.compile({optimizer: 'sgd', loss: 'meanSquaredError'});\n     * for (let i = 1; i < 5 ; ++i) {\n     *   const h = await model.fit(tf.ones([8, 10]), tf.ones([8, 1]), {\n     *       batchSize: 4,\n     *       epochs: 3\n     *   });\n     *   console.log(\"Loss after Epoch \" + i + \" : \" + h.history.loss[0]);\n     * }\n     * ```\n     *\n     * @param x `tf.Tensor` of training data, or an array of `tf.Tensor`s if the\n     * model has multiple inputs. If all inputs in the model are named, you\n     * can also pass a dictionary mapping input names to `tf.Tensor`s.\n     * @param y `tf.Tensor` of target (label) data, or an array of `tf.Tensor`s if\n     * the model has multiple outputs. If all outputs in the model are named,\n     * you can also pass a dictionary mapping output names to `tf.Tensor`s.\n     * @param args A `ModelFitArgs`, containing optional fields.\n     *\n     * @return A `History` instance. Its `history` attribute contains all\n     *   information collected during training.\n     *\n     * @exception ValueError In case of mismatch between the provided input\n     * data and what the model expects.\n     *\n     * @doc {heading: 'Models', subheading: 'Classes'}\n     */\n    async fit(x, y, args = {}) {\n        if (this.isTraining) {\n            throw new Error('Cannot start training because another fit() call is ongoing.');\n        }\n        this.isTraining = true;\n        let inputs;\n        let targets;\n        let originalInputs;\n        let originalTargets;\n        let inputValX;\n        let inputValY;\n        let valX;\n        let valY;\n        let sampleWeights;\n        try {\n            const batchSize = args.batchSize == null ? 32 : args.batchSize;\n            checkBatchSize(batchSize);\n            // Validate user data.\n            // TODO(cais): Support sampleWeight.\n            const checkBatchAxis = false;\n            const standardizedOuts = await this.standardizeUserData(x, y, args.sampleWeight, args.classWeight, checkBatchAxis, batchSize);\n            inputs = standardizedOuts[0];\n            targets = standardizedOuts[1];\n            sampleWeights = standardizedOuts[2];\n            // Prepare validation data.\n            let doValidation = false;\n            let valIns;\n            if (args.validationData != null && args.validationData.length > 0) {\n                doValidation = true;\n                if (args.validationData.length === 2) {\n                    // config.validationData consists of valX and valY.\n                    inputValX = args.validationData[0];\n                    inputValY = args.validationData[1];\n                }\n                else if (args.validationData.length === 3) {\n                    throw new NotImplementedError('validationData including sample weights is not supported yet.');\n                }\n                else {\n                    throw new ValueError(`When passing validation data, it must contain 2 (valX, valY) ` +\n                        `or 3 (valX, valY, valSampleWeight) items; ` +\n                        `${args.validationData} is invalid.`);\n                }\n                const checkBatchAxis = true;\n                const valStandardized = await this.standardizeUserData(inputValX, inputValY, null, /** Unused sample weights. */ null, /** Unused class weights. */ checkBatchAxis, batchSize);\n                valX = valStandardized[0];\n                valY = valStandardized[1];\n                valIns = valX.concat(valY);\n                // TODO(cais): Add useLearningPhase data properly.\n            }\n            else if (args.validationSplit != null && args.validationSplit > 0 &&\n                args.validationSplit < 1) {\n                doValidation = true;\n                // Porting Note: In tfjs-layers, inputs[0] is always a Tensor.\n                const splitAt = Math.floor(inputs[0].shape[0] * (1 - args.validationSplit));\n                const originalBatchSize = inputs[0].shape[0];\n                valX = sliceArrays(inputs, splitAt, originalBatchSize);\n                originalInputs = inputs;\n                inputs = sliceArrays(inputs, 0, splitAt);\n                valY = sliceArrays(targets, splitAt, originalBatchSize);\n                originalTargets = targets;\n                targets = sliceArrays(targets, 0, splitAt);\n                // TODO(cais): Once sampleWeights becomes available, slice it to get\n                //   valSampleWeights.\n                valIns = valX.concat(valY);\n                // TODO(cais): Add useLearningPhase data properly.\n            }\n            else if (args.validationSteps != null) {\n                doValidation = true;\n                // TODO(cais): Add useLearningPhase.\n            }\n            const ins = inputs.concat(targets).concat(sampleWeights);\n            this.checkTrainableWeightsConsistency();\n            // TODO(cais): Handle use_learning_phase and learning_phase?\n            // Porting Note: Here we see a key deviation of tfjs-layers from\n            // Keras.\n            //  Due to the imperative nature of tfjs-layers' backend (tfjs-core),\n            //  we do not construct symbolic computation graphs to embody the\n            //  training process. Instead, we define a function that performs the\n            //  training action. In PyKeras, the data (inputs and targets) are fed\n            //  through graph placeholders. In tfjs-layers, the data are fed as\n            //  function arguments. Since the function are defined below in the\n            //  scope, we don't have equivalents of PyKeras's\n            //  `_make_train_funciton`.\n            const trainFunction = this.makeTrainFunction();\n            const outLabels = this.getDedupedMetricsNames();\n            let valFunction;\n            let callbackMetrics;\n            if (doValidation) {\n                this.makeTestFunction();\n                valFunction = this.testFunction;\n                callbackMetrics =\n                    outLabels.slice().concat(outLabels.map(n => 'val_' + n));\n            }\n            else {\n                valFunction = null;\n                valIns = [];\n                callbackMetrics = outLabels.slice();\n            }\n            const callbacks = standardizeCallbacks(args.callbacks, args.yieldEvery);\n            const out = await this.fitLoop(trainFunction, ins, outLabels, batchSize, args.epochs, args.verbose, callbacks, valFunction, valIns, args.shuffle, callbackMetrics, args.initialEpoch, null, null);\n            return out;\n        }\n        finally {\n            this.isTraining = false;\n            // Memory clean up.\n            disposeNewTensors(inputs, x);\n            disposeNewTensors(targets, y);\n            disposeNewTensors(originalInputs, x);\n            disposeNewTensors(originalTargets, y);\n            disposeNewTensors(valX, inputValX);\n            disposeNewTensors(valY, inputValY);\n            if (sampleWeights != null) {\n                tfc.dispose(sampleWeights);\n            }\n        }\n        // TODO(cais): Add value to outLabels.\n    }\n    /**\n     * Abstract fit function for `f(ins)`.\n     * @param f A Function returning a list of tensors. For training, this\n     *   function is expected to perform the updates to the variables.\n     * @param ins List of tensors to be fed to `f`.\n     * @param outLabels List of strings, display names of the outputs of `f`.\n     * @param batchSize Integer batch size or `== null` if unknown. Default : 32.\n     * @param epochs Number of times to iterate over the data. Default : 1.\n     * @param verbose Verbosity mode: 0, 1, or 2. Default: 1.\n     * @param callbacks List of callbacks to be called during training.\n     * @param valF Function to call for validation.\n     * @param valIns List of tensors to be fed to `valF`.\n     * @param shuffle Whether to shuffle the data at the beginning of every\n     * epoch. Default : true.\n     * @param callbackMetrics List of strings, the display names of the metrics\n     *   passed to the callbacks. They should be the concatenation of the\n     *   display names of the outputs of `f` and the list of display names\n     *   of the outputs of `valF`.\n     * @param initialEpoch Epoch at which to start training (useful for\n     *   resuming a previous training run). Default : 0.\n     * @param stepsPerEpoch Total number of steps (batches on samples) before\n     *   declaring one epoch finished and starting the next epoch. Ignored with\n     *   the default value of `undefined` or `null`.\n     * @param validationSteps Number of steps to run validation for (only if\n     *   doing validation from data tensors). Not applicable for tfjs-layers.\n     * @returns A `History` object.\n     */\n    async fitLoop(f, ins, outLabels, batchSize, epochs, verbose, callbacks, valF, valIns, shuffle, callbackMetrics, initialEpoch, stepsPerEpoch, validationSteps) {\n        if (batchSize == null) {\n            batchSize = 32;\n        }\n        if (epochs == null) {\n            epochs = 1;\n        }\n        if (shuffle == null) {\n            shuffle = true;\n        }\n        if (initialEpoch == null) {\n            initialEpoch = 0;\n        }\n        // TODO(cais): Change const to let below when implementing validation.\n        let doValidation = false;\n        if (valF != null && valIns != null) {\n            doValidation = true;\n            // TODO(cais): verbose message.\n        }\n        if (validationSteps != null) {\n            doValidation = true;\n            if (stepsPerEpoch == null) {\n                throw new ValueError('Can only use `validationSteps` when doing step-wise training, ' +\n                    'i.e., `stepsPerEpoch` must be set.');\n            }\n        }\n        const numTrainSamples = this.checkNumSamples(ins, batchSize, stepsPerEpoch, 'steps_per_epoch');\n        let indexArray;\n        if (numTrainSamples != null) {\n            indexArray = range(0, numTrainSamples);\n        }\n        if (verbose == null) {\n            verbose = 1;\n        }\n        const { callbackList, history } = configureCallbacks(callbacks, verbose, epochs, initialEpoch, numTrainSamples, stepsPerEpoch, batchSize, doValidation, callbackMetrics);\n        callbackList.setModel(this);\n        this.history = history;\n        await callbackList.onTrainBegin();\n        this.stopTraining_ = false;\n        // TODO(cais): Take care of callbacks.validation_data as in PyKeras.\n        // TODO(cais): Pre-convert feeds for performance as in PyKeras.\n        for (let epoch = initialEpoch; epoch < epochs; ++epoch) {\n            await callbackList.onEpochBegin(epoch);\n            const epochLogs = {};\n            if (stepsPerEpoch != null) {\n                throw new NotImplementedError('stepsPerEpoch mode is not implemented yet.');\n            }\n            else {\n                if (shuffle === 'batch') {\n                    throw new NotImplementedError('batch shuffling is not implemneted'\n                        + ' yet');\n                }\n                else if (shuffle) {\n                    util.shuffle(indexArray);\n                }\n                // Convert the potentially shuffled indices to Tensor1D, to avoid the\n                // cost of repeated creation of Array1Ds later on.\n                const epochIndexArray1D = tensor1d(indexArray);\n                const batches = makeBatches(numTrainSamples, batchSize);\n                for (let batchIndex = 0; batchIndex < batches.length; ++batchIndex) {\n                    const batchLogs = {};\n                    await callbackList.onBatchBegin(batchIndex, batchLogs);\n                    tfc.tidy(() => {\n                        const batchStart = batches[batchIndex][0];\n                        const batchEnd = batches[batchIndex][1];\n                        const batchIds = K.sliceAlongFirstAxis(epochIndexArray1D, batchStart, batchEnd - batchStart);\n                        batchLogs['batch'] = batchIndex;\n                        batchLogs['size'] = batchEnd - batchStart;\n                        // TODO(cais): In ins, train flag can be a number, instead of an\n                        //   Tensor? Do we need to handle this in tfjs-layers?\n                        const insBatch = sliceArraysByIndices(ins, batchIds);\n                        const outs = f(insBatch);\n                        for (let i = 0; i < outLabels.length; ++i) {\n                            const label = outLabels[i];\n                            const out = outs[i];\n                            batchLogs[label] = out;\n                            tfc.keep(out);\n                            // TODO(cais): Use scope() to avoid ownership.\n                        }\n                        if (batchIndex === batches.length - 1) { // Last batch.\n                            if (doValidation) {\n                                const valOuts = this.testLoop(valF, valIns, batchSize);\n                                // Porting Notes: In tfjs-layers, valOuts is always an Array.\n                                for (let i = 0; i < outLabels.length; ++i) {\n                                    const label = outLabels[i];\n                                    const out = valOuts[i];\n                                    tfc.keep(out);\n                                    // TODO(cais): Use scope() to avoid ownership.\n                                    epochLogs['val_' + label] = out;\n                                }\n                            }\n                        }\n                    });\n                    await callbackList.onBatchEnd(batchIndex, batchLogs);\n                    disposeTensorsInLogs(batchLogs);\n                    if (this.stopTraining_) {\n                        break;\n                    }\n                    // TODO(cais): return outs as list of Tensor.\n                }\n                epochIndexArray1D.dispose();\n            }\n            // TODO(cais): Run validation at the end of the epoch.\n            await callbackList.onEpochEnd(epoch, epochLogs);\n            if (this.stopTraining_) {\n                break;\n            }\n        }\n        await callbackList.onTrainEnd();\n        await this.history.syncData();\n        return this.history;\n    }\n    // TODO(cais): Add code snippet below when it's possible to instantiate\n    //   actual dataset objects.\n    /**\n     * Trains the model using a dataset object.\n     *\n     * @param dataset A dataset object. Its `iterator()` method is expected\n     *   to generate a dataset iterator object, the `next()` method of which\n     *   is expected to produce data batches for training. The return value\n     *   of the `next()` call ought to contain a boolean `done` field and a\n     *   `value` field. The `value` field is expected to be an array of two\n     *   `tf.Tensor`s or an array of two nested `tf.Tensor` structures. The former\n     *   case is for models with exactly one input and one output (e.g.\n     *   a sequential model). The latter case is for models with multiple\n     *   inputs and/or multiple outputs.\n     *   Of the two items in the array, the first is the input feature(s) and\n     *   the second is the output target(s).\n     * @param args A `ModelFitDatasetArgs`, containing optional fields.\n     *\n     * @return A `History` instance. Its `history` attribute contains all\n     *   information collected during training.\n     *\n     * @doc {heading: 'Models', subheading: 'Classes'}\n     */\n    async fitDataset(dataset, args) {\n        return fitDataset(this, dataset, args);\n    }\n    /**\n     * Runs a single gradient update on a single batch of data.\n     *\n     * This method differs from `fit()` and `fitDataset()` in the following\n     * regards:\n     *   - It operates on exactly one batch of data.\n     *   - It returns only the loss and metric values, instead of\n     *     returning the batch-by-batch loss and metric values.\n     *   - It doesn't support fine-grained options such as verbosity and\n     *     callbacks.\n     *\n     * @param x Input data. It could be one of the following:\n     *   - A `tf.Tensor`, or an Array of `tf.Tensor`s (in case the model has\n     *     multiple inputs).\n     *   - An Object mapping input names to corresponding `tf.Tensor` (if the\n     *     model has named inputs).\n     * @param y Target data. It could be either a `tf.Tensor` or multiple\n     *   `tf.Tensor`s. It should be consistent with `x`.\n     * @returns Training loss or losses (in case the model has\n     *   multiple outputs), along with metrics (if any), as numbers.\n     *\n     * @doc {heading: 'Models', subheading: 'Classes'}\n     */\n    async trainOnBatch(x, y) {\n        // TODO(cais): Support sampleWeight and classWeight.\n        // TODO(cais): Support Dataset objects.\n        const standardizeOut = await this.standardizeUserData(x, y);\n        const inputs = standardizeOut[0];\n        const targets = standardizeOut[1];\n        const trainFunction = this.makeTrainFunction();\n        const losses = trainFunction(inputs.concat(targets));\n        const lossValues = [];\n        for (const loss of losses) {\n            const v = await loss.data();\n            lossValues.push(v[0]);\n        }\n        tfc.dispose(losses);\n        disposeNewTensors(standardizeOut[0], x);\n        disposeNewTensors(standardizeOut[1], y);\n        return singletonOrArray(lossValues);\n    }\n    /**\n     * Extract weight values of the model.\n     *\n     * @param config: An instance of `io.SaveConfig`, which specifies\n     * model-saving options such as whether only trainable weights are to be\n     * saved.\n     * @returns A `NamedTensorMap` mapping original weight names (i.e.,\n     *   non-uniqueified weight names) to their values.\n     */\n    getNamedWeights(config) {\n        const namedWeights = [];\n        const trainableOnly = config != null && config.trainableOnly;\n        const weights = trainableOnly ? this.trainableWeights : this.weights;\n        const weightValues = this.getWeights(trainableOnly);\n        for (let i = 0; i < weights.length; ++i) {\n            if (trainableOnly && !weights[i].trainable) {\n                // Optionally skip non-trainable weights.\n                continue;\n            }\n            namedWeights.push({ name: weights[i].originalName, tensor: weightValues[i] });\n        }\n        return namedWeights;\n    }\n    /**\n     * Setter used for force stopping of LayersModel.fit() (i.e., training).\n     *\n     * Example:\n     *\n     * ```js\n     * const input = tf.input({shape: [10]});\n     * const output = tf.layers.dense({units: 1}).apply(input);\n     * const model = tf.model({inputs: [input], outputs: [output]});\n     * model.compile({loss: 'meanSquaredError', optimizer: 'sgd'});\n     * const xs = tf.ones([8, 10]);\n     * const ys = tf.zeros([8, 1]);\n     *\n     * const history = await model.fit(xs, ys, {\n     *   epochs: 10,\n     *   callbacks: {\n     *     onEpochEnd: async (epoch, logs) => {\n     *       if (epoch === 2) {\n     *         model.stopTraining = true;\n     *       }\n     *     }\n     *   }\n     * });\n     *\n     * // There should be only 3 values in the loss array, instead of 10\n     * values,\n     * // due to the stopping after 3 epochs.\n     * console.log(history.history.loss);\n     * ```\n     */\n    set stopTraining(stop) {\n        this.stopTraining_ = stop;\n    }\n    get stopTraining() {\n        return this.stopTraining_;\n    }\n    get optimizer() {\n        return this.optimizer_;\n    }\n    set optimizer(optimizer) {\n        if (this.optimizer_ !== optimizer) {\n            this.optimizer_ = optimizer;\n            this.isOptimizerOwned = false;\n        }\n    }\n    dispose() {\n        const result = super.dispose();\n        if (result.refCountAfterDispose === 0 && this.optimizer != null &&\n            this.isOptimizerOwned) {\n            const numTensorsBeforeOptmizerDisposal = tfc.memory().numTensors;\n            this.optimizer_.dispose();\n            result.numDisposedVariables +=\n                numTensorsBeforeOptmizerDisposal - tfc.memory().numTensors;\n        }\n        return result;\n    }\n    getLossIdentifiers() {\n        let lossNames;\n        if (typeof this.loss === 'string') {\n            lossNames = toSnakeCase(this.loss);\n        }\n        else if (Array.isArray(this.loss)) {\n            for (const loss of this.loss) {\n                if (typeof loss !== 'string') {\n                    throw new Error('Serialization of non-string loss is not supported.');\n                }\n            }\n            lossNames = this.loss.map(name => toSnakeCase(name));\n        }\n        else {\n            const outputNames = Object.keys(this.loss);\n            lossNames = {};\n            const losses = this.loss;\n            for (const outputName of outputNames) {\n                if (typeof losses[outputName] === 'string') {\n                    lossNames[outputName] =\n                        toSnakeCase(losses[outputName]);\n                }\n                else {\n                    throw new Error('Serialization of non-string loss is not supported.');\n                }\n            }\n        }\n        return lossNames;\n    }\n    getMetricIdentifiers() {\n        if (typeof this.metrics === 'string' ||\n            typeof this.metrics === 'function') {\n            return [toSnakeCase(Metrics.getLossOrMetricName(this.metrics))];\n        }\n        else if (Array.isArray(this.metrics)) {\n            return this.metrics.map(metric => toSnakeCase(Metrics.getLossOrMetricName(metric)));\n        }\n        else {\n            const metricsIdentifiers = {};\n            for (const key in this.metrics) {\n                metricsIdentifiers[key] =\n                    toSnakeCase(Metrics.getLossOrMetricName(this.metrics[key]));\n            }\n            return metricsIdentifiers;\n        }\n    }\n    getTrainingConfig() {\n        return {\n            loss: this.getLossIdentifiers(),\n            metrics: this.getMetricIdentifiers(),\n            optimizer_config: {\n                class_name: this.optimizer.getClassName(),\n                config: this.optimizer.getConfig()\n            }\n        };\n        // TODO(cais): Add weight_metrics when they are supported.\n        // TODO(cais): Add sample_weight_mode when it's supported.\n        // TODO(cais): Add loss_weights when it's supported.\n    }\n    loadTrainingConfig(trainingConfig) {\n        if (trainingConfig.weighted_metrics != null) {\n            throw new Error('Loading weight_metrics is not supported yet.');\n        }\n        if (trainingConfig.loss_weights != null) {\n            throw new Error('Loading loss_weights is not supported yet.');\n        }\n        if (trainingConfig.sample_weight_mode != null) {\n            throw new Error('Loading sample_weight_mode is not supported yet.');\n        }\n        const tsConfig = convertPythonicToTs(trainingConfig.optimizer_config);\n        const optimizer = deserialize(tsConfig);\n        let loss;\n        if (typeof trainingConfig.loss === 'string') {\n            loss = toCamelCase(trainingConfig.loss);\n        }\n        else if (Array.isArray(trainingConfig.loss)) {\n            loss = trainingConfig.loss.map(lossEntry => toCamelCase(lossEntry));\n        }\n        else if (trainingConfig.loss != null) {\n            loss = {};\n            for (const key in trainingConfig.loss) {\n                loss[key] = toCamelCase(trainingConfig.loss[key]);\n            }\n        }\n        let metrics;\n        if (Array.isArray(trainingConfig.metrics)) {\n            metrics = trainingConfig.metrics.map(metric => toCamelCase(metric));\n        }\n        else if (trainingConfig.metrics != null) {\n            metrics = {};\n            for (const key in trainingConfig.metrics) {\n                metrics[key] = toCamelCase(trainingConfig.metrics[key]);\n            }\n        }\n        this.compile({ loss, metrics, optimizer });\n    }\n    /**\n     * Save the configuration and/or weights of the LayersModel.\n     *\n     * An `IOHandler` is an object that has a `save` method of the proper\n     * signature defined. The `save` method manages the storing or\n     * transmission of serialized data (\"artifacts\") that represent the\n     * model's topology and weights onto or via a specific medium, such as\n     * file downloads, local storage, IndexedDB in the web browser and HTTP\n     * requests to a server. TensorFlow.js provides `IOHandler`\n     * implementations for a number of frequently used saving mediums, such as\n     * `tf.io.browserDownloads` and `tf.io.browserLocalStorage`. See `tf.io`\n     * for more details.\n     *\n     * This method also allows you to refer to certain types of `IOHandler`s\n     * as URL-like string shortcuts, such as 'localstorage://' and\n     * 'indexeddb://'.\n     *\n     * Example 1: Save `model`'s topology and weights to browser [local\n     * storage](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage);\n     * then load it back.\n     *\n     * ```js\n     * const model = tf.sequential(\n     *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});\n     * console.log('Prediction from original model:');\n     * model.predict(tf.ones([1, 3])).print();\n     *\n     * const saveResults = await model.save('localstorage://my-model-1');\n     *\n     * const loadedModel = await tf.loadLayersModel('localstorage://my-model-1');\n     * console.log('Prediction from loaded model:');\n     * loadedModel.predict(tf.ones([1, 3])).print();\n     * ```\n     *\n     * Example 2. Saving `model`'s topology and weights to browser\n     * [IndexedDB](https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API);\n     * then load it back.\n     *\n     * ```js\n     * const model = tf.sequential(\n     *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});\n     * console.log('Prediction from original model:');\n     * model.predict(tf.ones([1, 3])).print();\n     *\n     * const saveResults = await model.save('indexeddb://my-model-1');\n     *\n     * const loadedModel = await tf.loadLayersModel('indexeddb://my-model-1');\n     * console.log('Prediction from loaded model:');\n     * loadedModel.predict(tf.ones([1, 3])).print();\n     * ```\n     *\n     * Example 3. Saving `model`'s topology and weights as two files\n     * (`my-model-1.json` and `my-model-1.weights.bin`) downloaded from\n     * browser.\n     *\n     * ```js\n     * const model = tf.sequential(\n     *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});\n     * const saveResults = await model.save('downloads://my-model-1');\n     * ```\n     *\n     * Example 4. Send  `model`'s topology and weights to an HTTP server.\n     * See the documentation of `tf.io.http` for more details\n     * including specifying request parameters and implementation of the\n     * server.\n     *\n     * ```js\n     * const model = tf.sequential(\n     *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});\n     * const saveResults = await model.save('http://my-server/model/upload');\n     * ```\n     *\n     * @param handlerOrURL An instance of `IOHandler` or a URL-like,\n     * scheme-based string shortcut for `IOHandler`.\n     * @param config Options for saving the model.\n     * @returns A `Promise` of `SaveResult`, which summarizes the result of\n     * the saving, such as byte sizes of the saved artifacts for the model's\n     *   topology and weight values.\n     *\n     * @doc {heading: 'Models', subheading: 'Classes', ignoreCI: true}\n     */\n    async save(handlerOrURL, config) {\n        if (typeof handlerOrURL === 'string') {\n            const handlers = io.getSaveHandlers(handlerOrURL);\n            if (handlers.length === 0) {\n                throw new ValueError(`Cannot find any save handlers for URL '${handlerOrURL}'`);\n            }\n            else if (handlers.length > 1) {\n                throw new ValueError(`Found more than one (${handlers.length}) save handlers for ` +\n                    `URL '${handlerOrURL}'`);\n            }\n            handlerOrURL = handlers[0];\n        }\n        if (handlerOrURL.save == null) {\n            throw new ValueError('LayersModel.save() cannot proceed because the IOHandler ' +\n                'provided does not have the `save` attribute defined.');\n        }\n        const weightDataAndSpecs = await io.encodeWeights(this.getNamedWeights(config));\n        const returnString = false;\n        const unusedArg = null;\n        const modelConfig = this.toJSON(unusedArg, returnString);\n        const modelArtifacts = {\n            modelTopology: modelConfig,\n            format: LAYERS_MODEL_FORMAT_NAME,\n            generatedBy: `TensorFlow.js tfjs-layers v${version}`,\n            convertedBy: null,\n        };\n        const includeOptimizer = config == null ? false : config.includeOptimizer;\n        if (includeOptimizer && this.optimizer != null) {\n            modelArtifacts.trainingConfig = this.getTrainingConfig();\n            const weightType = 'optimizer';\n            const { data: optimizerWeightData, specs: optimizerWeightSpecs } = await io.encodeWeights(await this.optimizer.getWeights(), weightType);\n            weightDataAndSpecs.specs.push(...optimizerWeightSpecs);\n            weightDataAndSpecs.data = io.concatenateArrayBuffers([weightDataAndSpecs.data, optimizerWeightData]);\n        }\n        if (this.userDefinedMetadata != null) {\n            // Check serialized size of user-defined metadata.\n            const checkSize = true;\n            checkUserDefinedMetadata(this.userDefinedMetadata, this.name, checkSize);\n            modelArtifacts.userDefinedMetadata = this.userDefinedMetadata;\n        }\n        modelArtifacts.weightData = weightDataAndSpecs.data;\n        modelArtifacts.weightSpecs = weightDataAndSpecs.specs;\n        return handlerOrURL.save(modelArtifacts);\n    }\n    /**\n     * Set user-defined metadata.\n     *\n     * The set metadata will be serialized together with the topology\n     * and weights of the model during `save()` calls.\n     *\n     * @param setUserDefinedMetadata\n     */\n    setUserDefinedMetadata(userDefinedMetadata) {\n        checkUserDefinedMetadata(userDefinedMetadata, this.name);\n        this.userDefinedMetadata = userDefinedMetadata;\n    }\n    /**\n     * Get user-defined metadata.\n     *\n     * The metadata is supplied via one of the two routes:\n     *   1. By calling `setUserDefinedMetadata()`.\n     *   2. Loaded during model loading (if the model is constructed\n     *      via `tf.loadLayersModel()`.)\n     *\n     * If no user-defined metadata is available from either of the\n     * two routes, this function will return `undefined`.\n     */\n    getUserDefinedMetadata() {\n        return this.userDefinedMetadata;\n    }\n}\n// The class name is 'Model' rather than 'LayersModel' for backwards\n// compatibility since this class name shows up in the serialization format.\n/** @nocollapse */\nLayersModel.className = 'Model';\nserialization.registerClass(LayersModel);\n/**\n * A `tf.Functional` is an alias to `tf.LayersModel`.\n *\n * See also:\n *   `tf.LayersModel`, `tf.Sequential`, `tf.loadLayersModel`.\n */\n/** @doc {heading: 'Models', subheading: 'Classes'} */\nexport class Functional extends LayersModel {\n}\nFunctional.className = 'Functional';\nserialization.registerClass(Functional);\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\n(self[\"webpackChunk_N_E\"] = self[\"webpackChunk_N_E\"] || []).push([[723],{\n\n/***/ 85337:\n/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {\n\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"QV\": function() { return /* binding */ LayersModel; }\n/* harmony export */ });\n/* unused harmony exports isDataTensor, isDataArray, isDataDict, standardizeInputData, checkArrayLengths, collectMetrics, Functional */\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(30013);\n/* harmony import */ var _backend_tfjs_backend__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(39840);\n/* harmony import */ var _base_callbacks__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(28891);\n/* harmony import */ var _common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(48090);\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(40588);\n/* harmony import */ var _layers_serialization__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(49897);\n/* harmony import */ var _logs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(73146);\n/* harmony import */ var _losses__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(86275);\n/* harmony import */ var _metrics__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(38678);\n/* harmony import */ var _optimizers__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(92328);\n/* harmony import */ var _user_defined_metadata__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(38374);\n/* harmony import */ var _utils_generic_utils__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(2931);\n/* harmony import */ var _utils_layer_utils__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(30618);\n/* harmony import */ var _utils_math_utils__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(96040);\n/* harmony import */ var _utils_serialization_utils__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(51977);\n/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(77385);\n/* harmony import */ var _container__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(26325);\n/* harmony import */ var _executor__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(41111);\n/* harmony import */ var _training_dataset__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(28913);\n/* harmony import */ var _training_tensors__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(26347);\n/* harmony import */ var _training_utils__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(86529);\n/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/* Original Source: engine/training.py */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Helper function for polymorphic input data: 1. singleton Tensor.\n */\nfunction isDataTensor(x) {\n    return x instanceof _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Tensor;\n}\n/**\n * Helper function for polymorphic input data: 2. Array of Tensor.\n */\nfunction isDataArray(x) {\n    return Array.isArray(x);\n}\n/**\n * Helper function for polymorphic input data: 3. \"dict\" of Tensor.\n */\nfunction isDataDict(x) {\n    return !isDataTensor(x) && !isDataArray(x);\n}\n/**\n * Normalizes inputs and targets provided by users.\n * @param data User-provided input data (polymorphic).\n * @param names An Array of expected Tensor names.\n * @param shapes Optional Array of expected Tensor shapes.\n * @param checkBatchAxis Whether to check that the batch axis of the arrays\n *   match  the expected value found in `shapes`.\n * @param exceptionPrefix String prefix used for exception formatting.\n * @returns List of standardized input Tensors (one Tensor per model input).\n * @throws ValueError: in case of improperly formatted user data.\n */\nfunction standardizeInputData(data, names, shapes, checkBatchAxis = true, exceptionPrefix = '') {\n    if (names == null || names.length === 0) {\n        // Check for the case where the model expected no data, but some data got\n        // sent.\n        if (data != null) {\n            let gotUnexpectedData = false;\n            if (isDataArray(data) && data.length > 0) {\n                gotUnexpectedData = true;\n            }\n            else if (isDataDict(data)) {\n                for (const key in data) {\n                    if (data.hasOwnProperty(key)) {\n                        gotUnexpectedData = true;\n                        break;\n                    }\n                }\n            }\n            else {\n                // `data` is a singleton Tensor in this case.\n                gotUnexpectedData = true;\n            }\n            if (gotUnexpectedData) {\n                throw new _errors__WEBPACK_IMPORTED_MODULE_4__/* .ValueError */ .nu(`Error when checking model ${exceptionPrefix} expected no data, ` +\n                    `but got ${data}`);\n            }\n        }\n        return [];\n    }\n    if (data == null) {\n        return names.map(name => null);\n    }\n    let arrays;\n    if (isDataDict(data)) {\n        data = data;\n        arrays = [];\n        for (const name of names) {\n            if (data[name] == null) {\n                throw new _errors__WEBPACK_IMPORTED_MODULE_4__/* .ValueError */ .nu(`No data provided for \"${name}\". Need data for each key in: ` +\n                    `${names}`);\n            }\n            arrays.push(data[name]);\n        }\n    }\n    else if (isDataArray(data)) {\n        data = data;\n        if (data.length !== names.length) {\n            throw new _errors__WEBPACK_IMPORTED_MODULE_4__/* .ValueError */ .nu(`Error when checking model ${exceptionPrefix}: the Array of ` +\n                `Tensors that you are passing to your model is not the size the ` +\n                `model expected. Expected to see ${names.length} Tensor(s), but ` +\n                `instead got the following list of Tensor(s): ${data}`);\n        }\n        arrays = data;\n    }\n    else {\n        data = data;\n        if (names.length > 1) {\n            throw new _errors__WEBPACK_IMPORTED_MODULE_4__/* .ValueError */ .nu(`The model ${exceptionPrefix} expects ${names.length} Tensor(s), ` +\n                `but only received one Tensor. Found: Tensor with shape ${data.shape}`);\n        }\n        arrays = [data];\n    }\n    arrays = (0,_training_tensors__WEBPACK_IMPORTED_MODULE_16__/* .ensureTensorsRank2OrHigher */ .YV)(arrays);\n    // Check shape compatibility.\n    if (shapes != null) {\n        for (let i = 0; i < names.length; ++i) {\n            if (shapes[i] == null) {\n                continue;\n            }\n            const array = arrays[i];\n            if (array.shape.length !== shapes[i].length) {\n                throw new _errors__WEBPACK_IMPORTED_MODULE_4__/* .ValueError */ .nu(`Error when checking ${exceptionPrefix}: expected ${names[i]} ` +\n                    `to have ${shapes[i].length} dimension(s). but got array with ` +\n                    `shape ${array.shape}`);\n            }\n            for (let j = 0; j < shapes[i].length; ++j) {\n                if (j === 0 && !checkBatchAxis) {\n                    // Skip the first (batch) axis.\n                    continue;\n                }\n                const dim = array.shape[j];\n                const refDim = shapes[i][j];\n                if (refDim != null && refDim >= 0 && dim !== refDim) {\n                    throw new _errors__WEBPACK_IMPORTED_MODULE_4__/* .ValueError */ .nu(`${exceptionPrefix} expected a batch of elements where each ` +\n                        `example has shape [${shapes[i].slice(1, shapes[i].length)}] ` +\n                        `(i.e.,tensor shape [*,${shapes[i].slice(1, shapes[i].length)}])` +\n                        ` but the ${exceptionPrefix} received an input with ${array.shape[0]}` +\n                        ` examples, each with shape [${array.shape.slice(1, array.shape.length)}]` +\n                        ` (tensor shape [${array.shape}])`);\n                }\n            }\n        }\n    }\n    return arrays;\n}\n/**\n * User input validation for Tensors.\n * @param inputs `Array` of `tf.Tensor`s for inputs.\n * @param targets `Array` of `tf.Tensor`s for targets.\n * @param weights Optional `Array` of `tf.Tensor`s for sample weights.\n * @throws ValueError: in case of incorrectly formatted data.\n */\nfunction checkArrayLengths(inputs, targets, weights) {\n    const setX = (0,_utils_generic_utils__WEBPACK_IMPORTED_MODULE_10__/* .unique */ .Tw)(inputs.map(input => input.shape[0]));\n    setX.sort();\n    const setY = (0,_utils_generic_utils__WEBPACK_IMPORTED_MODULE_10__/* .unique */ .Tw)(targets.map(target => target.shape[0]));\n    setY.sort();\n    // TODO(cais): Check `weights` as well.\n    if (setX.length > 1) {\n        throw new _errors__WEBPACK_IMPORTED_MODULE_4__/* .ValueError */ .nu(`All input Tensors (x) should have the same number of samples. ` +\n            `Got array shapes: ` +\n            `${JSON.stringify(inputs.map(input => input.shape))}`);\n    }\n    if (setY.length > 1) {\n        throw new _errors__WEBPACK_IMPORTED_MODULE_4__/* .ValueError */ .nu(`All target Tensors (y) should have the same number of samples. ` +\n            `Got array shapes: ` +\n            `${JSON.stringify(targets.map(target => target.shape))}`);\n    }\n    if (setX.length > 0 && setY.length > 0 && !_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.arraysEqual(setX, setY)) {\n        throw new _errors__WEBPACK_IMPORTED_MODULE_4__/* .ValueError */ .nu(`Input Tensors should have the same number of samples as target ` +\n            `Tensors. Found ${setX[0]} input sample(s) and ${setY[0]} target ` +\n            `sample(s).`);\n    }\n}\n/**\n * Validation on the compatibility of targes and loss functions.\n *\n * This helps prevent users from using loss functions incorrectly.\n *\n * @param targets `Array` of `tf.Tensor`s of targets.\n * @param lossFns `Array` of loss functions.\n * @param outputShapes `Array` of shapes of model outputs.\n */\nfunction checkLossAndTargetCompatibility(targets, lossFns, outputShapes) {\n    // TODO(cais): Dedicated test coverage?\n    const keyLosses = [\n        _losses__WEBPACK_IMPORTED_MODULE_7__/* .meanSquaredError */ .FD, _losses__WEBPACK_IMPORTED_MODULE_7__/* .binaryCrossentropy */ .fO,\n        _losses__WEBPACK_IMPORTED_MODULE_7__/* .categoricalCrossentropy */ .uq\n    ];\n    for (let i = 0; i < targets.length; ++i) {\n        const y = targets[i];\n        const loss = lossFns[i];\n        const shape = outputShapes[i];\n        if (loss == null) {\n            continue;\n        }\n        if (loss === _losses__WEBPACK_IMPORTED_MODULE_7__/* .categoricalCrossentropy */ .uq) {\n            if (y.shape[y.shape.length - 1] === 1) {\n                throw new _errors__WEBPACK_IMPORTED_MODULE_4__/* .ValueError */ .nu(`You are passing a target array of shape ${y.shape} while using ` +\n                    `a loss 'categorical_crossentropy'. 'categorical_crossentropy'` +\n                    `expects targets to be binary matrices (1s and 0s) of shape ` +\n                    `[samples, classes].`);\n                // TODO(cais): Example code in error message.\n            }\n        }\n        if (keyLosses.indexOf(loss) !== -1) {\n            const slicedYShape = y.shape.slice(1);\n            const slicedShape = shape.slice(1);\n            for (let j = 0; j < slicedYShape.length; ++j) {\n                const targetDim = slicedYShape[j];\n                const outDim = slicedShape[j];\n                if (outDim != null && targetDim !== outDim) {\n                    throw new _errors__WEBPACK_IMPORTED_MODULE_4__/* .ValueError */ .nu(`A target Tensor with shape ${y.shape} was passed for an ` +\n                        `output of shape ${shape}, while using a loss function that ` +\n                        `expects targets to have the same shape as the output.`);\n                }\n            }\n        }\n    }\n}\n/**\n * Check inputs provided by the user.\n *\n * Porting Note: This corresponds to _standardize_input_data() in Python\n *   Keras. Because of the strong typing in TF.js, we do not need to convert\n *   the data. Specifically:\n *   1) in PyKeras, `data` can be `DataFrame` instances from pandas, for\n *      example. We don't need to worry about that here because there is no\n *      widely popular javascript/typesdcript equivalent of pandas (so far).\n *      If one becomes available in the future, we can add support.\n *   2) in PyKeras, inputs can be Python dict. But here we are stipulating\n * that the data is either a single `tf.Tensor` or an Array of `tf.Tensor`s. We\n * may add support for `Object` data inputs in the future when the need\n * arises.\n *\n * Instead, we perform basic checks for number of parameters and shapes.\n *\n * @param data: The input data.\n * @param names: Name for the inputs, from the model.\n * @param shapes: Expected shapes for the input data, from the model.\n * @param checkBatchAxis: Whether the size along the batch axis (i.e., the\n *   first dimension) will be checked for matching.\n * @param exceptionPrefix: Execption prefix message, used in generating error\n *   messages.\n * @throws ValueError: on incorrect number of inputs or mismatches in shapes.\n */\nfunction checkInputData(data, names, shapes, checkBatchAxis = true, exceptionPrefix = '') {\n    let arrays;\n    if (Array.isArray(data)) {\n        if (data.length !== names.length) {\n            throw new _errors__WEBPACK_IMPORTED_MODULE_4__/* .ValueError */ .nu(`Error when checking model ${exceptionPrefix}: the Array of ` +\n                `Tensors that you are passing to your model is not the size the ` +\n                `the model expected. Expected to see ${names.length} Tensor(s),` +\n                ` but instead got ${data.length} Tensors(s).`);\n        }\n        arrays = data;\n    }\n    else {\n        if (names.length > 1) {\n            throw new _errors__WEBPACK_IMPORTED_MODULE_4__/* .ValueError */ .nu(`The model expects ${names.length} ${exceptionPrefix} Tensors, ` +\n                `but only received one Tensor. Found: array with shape ` +\n                `${JSON.stringify(data.shape)}.`);\n        }\n        arrays = [data];\n    }\n    if (shapes != null) {\n        for (let i = 0; i < names.length; ++i) {\n            if (shapes[i] == null) {\n                continue;\n            }\n            const array = arrays[i];\n            if (array.shape.length !== shapes[i].length) {\n                throw new _errors__WEBPACK_IMPORTED_MODULE_4__/* .ValueError */ .nu(`Error when checking ${exceptionPrefix}: expected ${names[i]} ` +\n                    `to have ${shapes[i].length} dimension(s), but got array with ` +\n                    `shape ${JSON.stringify(array.shape)}`);\n            }\n            for (let j = 0; j < shapes[i].length; ++j) {\n                if (j === 0 && !checkBatchAxis) {\n                    continue;\n                }\n                const dim = array.shape[j];\n                const refDim = shapes[i][j];\n                if (refDim != null) {\n                    if (refDim !== dim) {\n                        throw new _errors__WEBPACK_IMPORTED_MODULE_4__/* .ValueError */ .nu(`Error when checking ${exceptionPrefix}: expected ` +\n                            `${names[i]} to have shape ${JSON.stringify(shapes[i])} but ` +\n                            `got array with shape ${JSON.stringify(array.shape)}.`);\n                    }\n                }\n            }\n        }\n    }\n}\n/**\n * Maps metric functions to model outputs.\n * @param metrics An shortcut strings name, metric function, `Array` or dict\n *   (`Object`) of metric functions.\n * @param outputNames An `Array` of the names of model outputs.\n * @returns An `Array` (one entry per model output) of `Array` of metric\n *   functions. For instance, if the model has 2 outputs, and for the first\n *   output we want to compute `binaryAccuracy` and `binaryCrossentropy`,\n *   and just `binaryAccuracy` for the second output, the `Array` would look\n *   like:\n *     `[[binaryAccuracy, binaryCrossentropy],  [binaryAccuracy]]`\n * @throws TypeError: incompatible metrics format.\n */\nfunction collectMetrics(metrics, outputNames) {\n    if (metrics == null || Array.isArray(metrics) && metrics.length === 0) {\n        return outputNames.map(name => []);\n    }\n    let wrappedMetrics;\n    if (typeof metrics === 'string' || typeof metrics === 'function') {\n        wrappedMetrics = [metrics];\n    }\n    else if (Array.isArray(metrics) || typeof metrics === 'object') {\n        wrappedMetrics = metrics;\n    }\n    else {\n        throw new TypeError('Type of metrics argument not understood. Expected an string,' +\n            `function, Array, or Object, found: ${metrics}`);\n    }\n    if (Array.isArray(wrappedMetrics)) {\n        // We then apply all metrics to all outputs.\n        return outputNames.map(name => wrappedMetrics);\n    }\n    else {\n        // In this case, metrics is a dict.\n        const nestedMetrics = [];\n        for (const name of outputNames) {\n            let outputMetrics = wrappedMetrics.hasOwnProperty(name) ? wrappedMetrics[name] : [];\n            if (!Array.isArray(outputMetrics)) {\n                outputMetrics = [outputMetrics];\n            }\n            nestedMetrics.push(outputMetrics);\n        }\n        return nestedMetrics;\n    }\n}\nconst LAYERS_MODEL_FORMAT_NAME = 'layers-model';\n/**\n * A `tf.LayersModel` is a directed, acyclic graph of `tf.Layer`s plus methods\n * for training, evaluation, prediction and saving.\n *\n * `tf.LayersModel` is the basic unit of training, inference and evaluation in\n * TensorFlow.js. To create a `tf.LayersModel`, use `tf.LayersModel`.\n *\n * See also:\n *   `tf.Sequential`, `tf.loadLayersModel`.\n *\n * @doc {heading: 'Models', subheading: 'Classes'}\n */\nclass LayersModel extends _container__WEBPACK_IMPORTED_MODULE_13__/* .Container */ .W {\n    constructor(args) {\n        super(args);\n        this.isTraining = false;\n    }\n    /**\n     * Print a text summary of the model's layers.\n     *\n     * The summary includes\n     * - Name and type of all layers that comprise the model.\n     * - Output shape(s) of the layers\n     * - Number of weight parameters of each layer\n     * - If the model has non-sequential-like topology, the inputs each layer\n     *   receives\n     * - The total number of trainable and non-trainable parameters of the model.\n     *\n     * ```js\n     * const input1 = tf.input({shape: [10]});\n     * const input2 = tf.input({shape: [20]});\n     * const dense1 = tf.layers.dense({units: 4}).apply(input1);\n     * const dense2 = tf.layers.dense({units: 8}).apply(input2);\n     * const concat = tf.layers.concatenate().apply([dense1, dense2]);\n     * const output =\n     *     tf.layers.dense({units: 3, activation: 'softmax'}).apply(concat);\n     *\n     * const model = tf.model({inputs: [input1, input2], outputs: output});\n     * model.summary();\n     * ```\n     *\n     * @param lineLength Custom line length, in number of characters.\n     * @param positions Custom widths of each of the columns, as either\n     *   fractions of `lineLength` (e.g., `[0.5, 0.75, 1]`) or absolute number\n     *   of characters (e.g., `[30, 50, 65]`). Each number corresponds to\n     *   right-most (i.e., ending) position of a column.\n     * @param printFn Custom print function. Can be used to replace the default\n     *   `console.log`. For example, you can use `x => {}` to mute the printed\n     *   messages in the console.\n     *\n     * @doc {heading: 'Models', subheading: 'Classes'}\n     */\n    summary(lineLength, positions, printFn = console.log) {\n        if (!this.built) {\n            throw new _errors__WEBPACK_IMPORTED_MODULE_4__/* .ValueError */ .nu(`This model has never been called, thus its weights have not been ` +\n                `created yet. So no summary can be displayed. Build the model ` +\n                `first (e.g., by calling it on some test data).`);\n        }\n        (0,_utils_layer_utils__WEBPACK_IMPORTED_MODULE_18__/* .printSummary */ .I)(this, lineLength, positions, printFn);\n    }\n    /**\n     * Configures and prepares the model for training and evaluation.  Compiling\n     * outfits the model with an optimizer, loss, and/or metrics.  Calling `fit`\n     * or `evaluate` on an un-compiled model will throw an error.\n     *\n     * @param args a `ModelCompileArgs` specifying the loss, optimizer, and\n     * metrics to be used for fitting and evaluating this model.\n     *\n     * @doc {heading: 'Models', subheading: 'Classes'}\n     */\n    compile(args) {\n        if (args.loss == null) {\n            args.loss = [];\n        }\n        this.loss = args.loss;\n        if (typeof args.optimizer === 'string') {\n            this.optimizer_ = _optimizers__WEBPACK_IMPORTED_MODULE_9__/* .getOptimizer */ .j(args.optimizer);\n            this.isOptimizerOwned = true;\n        }\n        else {\n            if (!(args.optimizer instanceof _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Optimizer)) {\n                throw new _errors__WEBPACK_IMPORTED_MODULE_4__/* .ValueError */ .nu(`User-defined optimizer must be an instance of tf.Optimizer.`);\n            }\n            this.optimizer_ = args.optimizer;\n            this.isOptimizerOwned = false;\n        }\n        // TODO(cais): Add lossWeights.\n        // TODO(cais): Add sampleWeightMode.\n        // Prepare loss functions.\n        let lossFunctions = [];\n        if (!Array.isArray(args.loss) && typeof args.loss !== 'string' &&\n            typeof args.loss !== 'function') {\n            args.loss = args.loss;\n            for (const name in args.loss) {\n                if (this.outputNames.indexOf(name) === -1) {\n                    throw new _errors__WEBPACK_IMPORTED_MODULE_4__/* .ValueError */ .nu(`Unknown entry in loss dictionary: \"${name}\". ` +\n                        `Only expected the following keys: ${this.outputNames}`);\n                }\n            }\n            for (const name of this.outputNames) {\n                if (args.loss[name] == null) {\n                    console.warn(`Output \"${name}\" is missing from loss dictionary. We assume ` +\n                        `this was done on purpose, and we will not be expecting data ` +\n                        `to be passed to ${name} during training`);\n                }\n                lossFunctions.push(_losses__WEBPACK_IMPORTED_MODULE_7__/* .get */ .U2(args.loss[name]));\n            }\n        }\n        else if (Array.isArray(args.loss)) {\n            if (args.loss.length !== this.outputs.length) {\n                throw new _errors__WEBPACK_IMPORTED_MODULE_4__/* .ValueError */ .nu(`When passing an Array as loss, it should have one entry per ` +\n                    `model output. The model has ${this.outputs.length} output(s), ` +\n                    `but you passed loss=${args.loss}.`);\n            }\n            const theLosses = args.loss;\n            lossFunctions = theLosses.map(l => _losses__WEBPACK_IMPORTED_MODULE_7__/* .get */ .U2(l));\n        }\n        else {\n            const lossFunction = _losses__WEBPACK_IMPORTED_MODULE_7__/* .get */ .U2(args.loss);\n            this.outputs.forEach(_ => {\n                lossFunctions.push(lossFunction);\n            });\n        }\n        this.lossFunctions = lossFunctions;\n        this.feedOutputNames = [];\n        this.feedOutputShapes = [];\n        this.feedLossFns = [];\n        for (let i = 0; i < this.outputs.length; ++i) {\n            // TODO(cais): Logic for skipping target(s).\n            const shape = this.internalOutputShapes[i];\n            const name = this.outputNames[i];\n            this.feedOutputNames.push(name);\n            this.feedOutputShapes.push(shape);\n            this.feedLossFns.push(this.lossFunctions[i]);\n        }\n        // TODO(cais): Add logic for output masks.\n        // TODO(cais): Add logic for sample weights.\n        const skipTargetIndices = [];\n        // Prepare metrics.\n        this.metrics = args.metrics;\n        // TODO(cais): Add weightedMetrics.\n        this.metricsNames = ['loss'];\n        this.metricsTensors = [];\n        // Compute total loss.\n        // Porting Note: In PyKeras, metrics_tensors are symbolic tensor objects.\n        //   Here, metricsTensors are TypeScript functions. This difference is due\n        //   to the difference in symbolic/imperative property of the backends.\n        (0,_common__WEBPACK_IMPORTED_MODULE_3__/* .nameScope */ .f4)('loss', () => {\n            for (let i = 0; i < this.outputs.length; ++i) {\n                if (skipTargetIndices.indexOf(i) !== -1) {\n                    continue;\n                }\n                // TODO(cais): Add weightedLoss, sampleWeight and mask.\n                //   The following line should be weightedLoss\n                const weightedLoss = this.lossFunctions[i];\n                if (this.outputs.length > 1) {\n                    this.metricsTensors.push([weightedLoss, i]);\n                    this.metricsNames.push(this.outputNames[i] + '_loss');\n                }\n            }\n            // Porting Note: Due to the imperative nature of the backend, we calculate\n            //   the regularizer penalties in the totalLossFunction, instead of here.\n        });\n        const nestedMetrics = collectMetrics(args.metrics, this.outputNames);\n        // TODO(cais): Add nestedWeightedMetrics.\n        /**\n         * Helper function used in loop below.\n         */\n        const appendMetric = (outputIndex, metricName, metricTensor) => {\n            if (this.outputNames.length > 1) {\n                metricName = this.outputNames[outputIndex] + '_' + metricName;\n            }\n            this.metricsNames.push(metricName);\n            this.metricsTensors.push([metricTensor, outputIndex]);\n        };\n        (0,_common__WEBPACK_IMPORTED_MODULE_3__/* .nameScope */ .f4)('metric', () => {\n            for (let i = 0; i < this.outputs.length; ++i) {\n                if (skipTargetIndices.indexOf(i) !== -1) {\n                    continue;\n                }\n                const outputMetrics = nestedMetrics[i];\n                // TODO(cais): Add weights and outputWeightedMetrics.\n                // TODO(cais): Add optional arg `weights` to the following function.\n                const handleMetrics = (metrics) => {\n                    const metricNamePrefix = '';\n                    let metricName;\n                    let accFn;\n                    let weightedMetricFn;\n                    //  TODO(cais): Use 'weights_' for weighted metrics.\n                    for (const metric of metrics) {\n                        if (typeof metric === 'string' &&\n                            ['accuracy', 'acc', 'crossentropy', 'ce'].indexOf(metric) !==\n                                -1) {\n                            const outputShape = this.internalOutputShapes[i];\n                            if (outputShape[outputShape.length - 1] === 1 ||\n                                this.lossFunctions[i] === _losses__WEBPACK_IMPORTED_MODULE_7__/* .binaryCrossentropy */ .fO) {\n                                // case: binary accuracy/crossentropy.\n                                if (['accuracy', 'acc'].indexOf(metric) !== -1) {\n                                    accFn = _metrics__WEBPACK_IMPORTED_MODULE_8__/* .binaryAccuracy */ ._F;\n                                }\n                                else if (['crossentropy', 'ce'].indexOf(metric) !== -1) {\n                                    accFn = _metrics__WEBPACK_IMPORTED_MODULE_8__/* .binaryCrossentropy */ .fO;\n                                }\n                            }\n                            else if (this.lossFunctions[i] ===\n                                _losses__WEBPACK_IMPORTED_MODULE_7__/* .sparseCategoricalCrossentropy */ .KM) {\n                                // case: categorical accuracy / crossentropy with sparse\n                                // targets.\n                                if (['accuracy', 'acc'].indexOf(metric) !== -1) {\n                                    accFn = _metrics__WEBPACK_IMPORTED_MODULE_8__/* .sparseCategoricalAccuracy */ .TY;\n                                }\n                                else if (['crossentropy', 'ce'].indexOf(metric) !== -1) {\n                                    accFn = _metrics__WEBPACK_IMPORTED_MODULE_8__/* .sparseCategoricalCrossentropy */ .KM;\n                                }\n                            }\n                            else {\n                                // case: categorical accuracy / crossentropy.\n                                if (['accuracy', 'acc'].indexOf(metric) !== -1) {\n                                    accFn = _metrics__WEBPACK_IMPORTED_MODULE_8__/* .categoricalAccuracy */ .G5;\n                                }\n                                else if (['crossentropy', 'ce'].indexOf(metric) !== -1) {\n                                    accFn = _metrics__WEBPACK_IMPORTED_MODULE_8__/* .categoricalCrossentropy */ .uq;\n                                }\n                            }\n                            let suffix;\n                            if (['accuracy', 'acc'].indexOf(metric) !== -1) {\n                                suffix = 'acc';\n                            }\n                            else if (['crossentropy', 'ce'].indexOf(metric) !== -1) {\n                                suffix = 'ce';\n                            }\n                            // TODO(cais): Add weighting actually.\n                            weightedMetricFn = accFn;\n                            metricName = metricNamePrefix + suffix;\n                        }\n                        else {\n                            const metricFn = _metrics__WEBPACK_IMPORTED_MODULE_8__/* .get */ .U2(metric);\n                            // TODO(cais): Add weighting actually.\n                            weightedMetricFn = metricFn;\n                            metricName =\n                                metricNamePrefix + _metrics__WEBPACK_IMPORTED_MODULE_8__/* .getLossOrMetricName */ .aI(metric);\n                        }\n                        // TODO(cais): Add weighting and masking to metricResult.\n                        let metricResult;\n                        (0,_common__WEBPACK_IMPORTED_MODULE_3__/* .nameScope */ .f4)(metricName, () => {\n                            metricResult = weightedMetricFn;\n                        });\n                        appendMetric(i, metricName, metricResult);\n                    }\n                };\n                handleMetrics(outputMetrics);\n                // TODO(cais): Call handleMetrics with weights.\n            }\n        });\n        // Porting Notes: Given the imperative backend of tfjs-core,\n        //   there is no need for constructing the symbolic graph and placeholders.\n        this.collectedTrainableWeights = this.trainableWeights;\n    }\n    /**\n     * Check trainable weights count consistency.\n     *\n     * This will raise a warning if `this.trainableWeights` and\n     * `this.collectedTrainableWeights` are inconsistent (i.e., have different\n     * numbers of parameters).\n     * Inconsistency will typically arise when one modifies `model.trainable`\n     * without calling `model.compile()` again.\n     */\n    checkTrainableWeightsConsistency() {\n        if (this.collectedTrainableWeights == null) {\n            return;\n        }\n        if (this.trainableWeights.length !==\n            this.collectedTrainableWeights.length) {\n            console.warn('Discrepancy between trainableweights and collected trainable ' +\n                'weights. Did you set `model.trainable` without calling ' +\n                '`model.compile()` afterwards?');\n        }\n    }\n    /**\n     * Returns the loss value & metrics values for the model in test mode.\n     *\n     * Loss and metrics are specified during `compile()`, which needs to happen\n     * before calls to `evaluate()`.\n     *\n     * Computation is done in batches.\n     *\n     * ```js\n     * const model = tf.sequential({\n     *   layers: [tf.layers.dense({units: 1, inputShape: [10]})]\n     * });\n     * model.compile({optimizer: 'sgd', loss: 'meanSquaredError'});\n     * const result = model.evaluate(\n     *     tf.ones([8, 10]), tf.ones([8, 1]), {batchSize: 4});\n     * result.print();\n     * ```\n     *\n     * @param x `tf.Tensor` of test data, or an `Array` of `tf.Tensor`s if the\n     * model has multiple inputs.\n     * @param y `tf.Tensor` of target data, or an `Array` of `tf.Tensor`s if the\n     * model has multiple outputs.\n     * @param args A `ModelEvaluateArgs`, containing optional fields.\n     *\n     * @return `Scalar` test loss (if the model has a single output and no\n     *   metrics) or `Array` of `Scalar`s (if the model has multiple outputs\n     *   and/or metrics). The attribute `model.metricsNames`\n     *   will give you the display labels for the scalar outputs.\n     *\n     * @doc {heading: 'Models', subheading: 'Classes'}\n     */\n    evaluate(x, y, args = {}) {\n        const batchSize = args.batchSize == null ? 32 : args.batchSize;\n        (0,_training_tensors__WEBPACK_IMPORTED_MODULE_16__/* .checkBatchSize */ .fQ)(batchSize);\n        // TODO(cais): Standardize `config.sampleWeights` as well.\n        // Validate user data.\n        const checkBatchAxis = true;\n        const standardizedOuts = this.standardizeUserDataXY(x, y, checkBatchAxis, batchSize);\n        try {\n            // TODO(cais): If uses `useLearningPhase`, set the corresponding element\n            // of the input to 0.\n            const ins = standardizedOuts[0].concat(standardizedOuts[1]);\n            this.makeTestFunction();\n            const f = this.testFunction;\n            const testOuts = this.testLoop(f, ins, batchSize, args.verbose, args.steps);\n            return (0,_utils_generic_utils__WEBPACK_IMPORTED_MODULE_10__/* .singletonOrArray */ .Bq)(testOuts);\n        }\n        finally {\n            (0,_training_tensors__WEBPACK_IMPORTED_MODULE_16__/* .disposeNewTensors */ .kS)(standardizedOuts[0], x);\n            (0,_training_tensors__WEBPACK_IMPORTED_MODULE_16__/* .disposeNewTensors */ .kS)(standardizedOuts[1], y);\n        }\n    }\n    // TODO(cais): Add code snippet below once real dataset objects are\n    //   available.\n    /**\n     * Evaluate model using a dataset object.\n     *\n     * Note: Unlike `evaluate()`, this method is asynchronous (`async`).\n     *\n     * @param dataset A dataset object. Its `iterator()` method is expected\n     *   to generate a dataset iterator object, the `next()` method of which\n     *   is expected to produce data batches for evaluation. The return value\n     *   of the `next()` call ought to contain a boolean `done` field and a\n     *   `value` field. The `value` field is expected to be an array of two\n     *   `tf.Tensor`s or an array of two nested `tf.Tensor` structures. The former\n     *   case is for models with exactly one input and one output (e.g.\n     *   a sequential model). The latter case is for models with multiple\n     *   inputs and/or multiple outputs. Of the two items in the array, the\n     *   first is the input feature(s) and the second is the output target(s).\n     * @param args A configuration object for the dataset-based evaluation.\n     * @returns Loss and metric values as an Array of `Scalar` objects.\n     *\n     * @doc {heading: 'Models', subheading: 'Classes'}\n     */\n    async evaluateDataset(dataset, args) {\n        this.makeTestFunction();\n        return (0,_training_dataset__WEBPACK_IMPORTED_MODULE_15__/* .evaluateDataset */ .D)(this, dataset, args);\n    }\n    /**\n     * Get number of samples provided for training, evaluation or prediction.\n     *\n     * @param ins Input `tf.Tensor`.\n     * @param batchSize Integer batch size, optional.\n     * @param steps Total number of steps (batches of samples) before\n     * declaring loop finished. Optional.\n     * @param stepsName The public API's parameter name for `steps`.\n     * @returns Number of samples provided.\n     */\n    checkNumSamples(ins, batchSize, steps, stepsName = 'steps') {\n        let numSamples;\n        if (steps != null) {\n            numSamples = null;\n            if (batchSize != null) {\n                throw new _errors__WEBPACK_IMPORTED_MODULE_4__/* .ValueError */ .nu(`If ${stepsName} is set, batchSize must be null or undefined.` +\n                    `Got batchSize = ${batchSize}`);\n            }\n        }\n        else if (ins != null) {\n            if (Array.isArray(ins)) {\n                numSamples = ins[0].shape[0];\n            }\n            else {\n                numSamples = ins.shape[0];\n            }\n        }\n        else {\n            throw new _errors__WEBPACK_IMPORTED_MODULE_4__/* .ValueError */ .nu(`Either the input data should have a defined shape, or ` +\n                `${stepsName} shoud be specified.`);\n        }\n        return numSamples;\n    }\n    /**\n     * Execute internal tensors of the model with input data feed.\n     * @param inputs Input data feed. Must match the inputs of the model.\n     * @param outputs Names of the output tensors to be fetched. Must match\n     *   names of the SymbolicTensors that belong to the graph.\n     * @returns Fetched values for `outputs`.\n     */\n    execute(inputs, outputs) {\n        if (Array.isArray(outputs) && outputs.length === 0) {\n            throw new _errors__WEBPACK_IMPORTED_MODULE_4__/* .ValueError */ .nu('`outputs` is an empty Array, which is not allowed.');\n        }\n        const outputsIsArray = Array.isArray(outputs);\n        const outputNames = (outputsIsArray ? outputs : [outputs]);\n        const outputSymbolicTensors = this.retrieveSymbolicTensors(outputNames);\n        // Format the input into a FeedDict.\n        const feedDict = new _executor__WEBPACK_IMPORTED_MODULE_14__/* .FeedDict */ .l2();\n        if (inputs instanceof _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Tensor) {\n            inputs = [inputs];\n        }\n        if (Array.isArray(inputs)) {\n            if (inputs.length !== this.inputs.length) {\n                throw new _errors__WEBPACK_IMPORTED_MODULE_4__/* .ValueError */ .nu(`The number of inputs provided (${inputs.length}) ` +\n                    `does not match the number of inputs of this model ` +\n                    `(${this.inputs.length}).`);\n            }\n            for (let i = 0; i < this.inputs.length; ++i) {\n                feedDict.add(this.inputs[i], inputs[i]);\n            }\n        }\n        else {\n            for (const input of this.inputs) {\n                const tensorValue = inputs[input.name];\n                if (tensorValue == null) {\n                    throw new _errors__WEBPACK_IMPORTED_MODULE_4__/* .ValueError */ .nu(`No value is provided for the model's input ${input.name}`);\n                }\n                feedDict.add(input, tensorValue);\n            }\n        }\n        // Run execution.\n        const executeOutputs = (0,_executor__WEBPACK_IMPORTED_MODULE_14__/* .execute */ .ht)(outputSymbolicTensors, feedDict);\n        return outputsIsArray ? executeOutputs : executeOutputs[0];\n    }\n    /**\n     * Retrieve the model's internal symbolic tensors from symbolic-tensor names.\n     */\n    retrieveSymbolicTensors(symbolicTensorNames) {\n        const outputSymbolicTensors = (0,_utils_generic_utils__WEBPACK_IMPORTED_MODULE_10__/* .pyListRepeat */ .JE)(null, symbolicTensorNames.length);\n        let outputsRemaining = symbolicTensorNames.length;\n        for (const layer of this.layers) {\n            const layerOutputs = Array.isArray(layer.output) ? layer.output : [layer.output];\n            const layerOutputNames = layerOutputs.map(output => output.name);\n            for (let i = 0; i < symbolicTensorNames.length; ++i) {\n                const index = layerOutputNames.indexOf(symbolicTensorNames[i]);\n                if (index !== -1) {\n                    outputSymbolicTensors[i] = layerOutputs[index];\n                    outputsRemaining--;\n                }\n                if (outputsRemaining === 0) {\n                    break;\n                }\n            }\n            if (outputsRemaining === 0) {\n                break;\n            }\n        }\n        if (outputsRemaining > 0) {\n            const remainingNames = [];\n            outputSymbolicTensors.forEach((tensor, i) => {\n                if (tensor == null) {\n                    remainingNames.push(symbolicTensorNames[i]);\n                }\n            });\n            throw new _errors__WEBPACK_IMPORTED_MODULE_4__/* .ValueError */ .nu(`Cannot find SymbolicTensors for output name(s): ` +\n                `${JSON.stringify(remainingNames)}`);\n        }\n        return outputSymbolicTensors;\n    }\n    /**\n     * Helper method to loop over some data in batches.\n     *\n     * Porting Note: Not using the functional approach in the Python equivalent\n     *   due to the imperative backend.\n     * Porting Note: Does not support step mode currently.\n     *\n     * @param ins: input data\n     * @param batchSize: integer batch size.\n     * @param verbose: verbosity model\n     * @returns: Predictions as `tf.Tensor` (if a single output) or an `Array` of\n     *   `tf.Tensor` (if multipe outputs).\n     */\n    predictLoop(ins, batchSize = 32, verbose = false) {\n        return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy(() => {\n            const numSamples = this.checkNumSamples(ins);\n            if (verbose) {\n                throw new _errors__WEBPACK_IMPORTED_MODULE_4__/* .NotImplementedError */ .nj('Verbose predictLoop() is not implemented yet.');\n            }\n            // Sample-based predictions.\n            // Porting Note: Tensor currently does not support sliced assignments as\n            //   in numpy, e.g., x[1:3] = y. Therefore we use concatenation while\n            //   iterating over the batches.\n            const batches = (0,_training_tensors__WEBPACK_IMPORTED_MODULE_16__/* .makeBatches */ .R_)(numSamples, batchSize);\n            const outsBatches = this.outputs.map(output => []);\n            // TODO(cais): Can the scope() be pushed down inside the for loop?\n            for (let batchIndex = 0; batchIndex < batches.length; ++batchIndex) {\n                const batchOuts = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy(() => {\n                    const batchStart = batches[batchIndex][0];\n                    const batchEnd = batches[batchIndex][1];\n                    // TODO(cais): Take care of the case of the last element is a flag for\n                    //   training/test.\n                    const insBatch = (0,_training_tensors__WEBPACK_IMPORTED_MODULE_16__/* .sliceArrays */ .sf)(ins, batchStart, batchEnd);\n                    // Construct the feeds for execute();\n                    const feeds = [];\n                    if (Array.isArray(insBatch)) {\n                        for (let i = 0; i < insBatch.length; ++i) {\n                            feeds.push({ key: this.inputs[i], value: insBatch[i] });\n                        }\n                    }\n                    else {\n                        feeds.push({ key: this.inputs[0], value: insBatch });\n                    }\n                    const feedDict = new _executor__WEBPACK_IMPORTED_MODULE_14__/* .FeedDict */ .l2(feeds);\n                    return (0,_executor__WEBPACK_IMPORTED_MODULE_14__/* .execute */ .ht)(this.outputs, feedDict);\n                });\n                batchOuts.forEach((batchOut, i) => outsBatches[i].push(batchOut));\n            }\n            return (0,_utils_generic_utils__WEBPACK_IMPORTED_MODULE_10__/* .singletonOrArray */ .Bq)(outsBatches.map(batches => _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.concat(batches, 0)));\n        });\n    }\n    /**\n     * Generates output predictions for the input samples.\n     *\n     * Computation is done in batches.\n     *\n     * Note: the \"step\" mode of predict() is currently not supported.\n     *   This is because the TensorFlow.js core backend is imperative only.\n     *\n     * ```js\n     * const model = tf.sequential({\n     *   layers: [tf.layers.dense({units: 1, inputShape: [10]})]\n     * });\n     * model.predict(tf.ones([8, 10]), {batchSize: 4}).print();\n     * ```\n     *\n     * @param x The input data, as a Tensor, or an `Array` of `tf.Tensor`s if\n     *   the model has multiple inputs.\n     * @param args A `ModelPredictArgs` object containing optional fields.\n     *\n     * @return Prediction results as a `tf.Tensor`(s).\n     *\n     * @exception ValueError In case of mismatch between the provided input data\n     *   and the model's expectations, or in case a stateful model receives a\n     *   number of samples that is not a multiple of the batch size.\n     *\n     * @doc {heading: 'Models', subheading: 'Classes'}\n     */\n    predict(x, args = {}) {\n        const xsRank2OrHigher = (0,_training_tensors__WEBPACK_IMPORTED_MODULE_16__/* .ensureTensorsRank2OrHigher */ .YV)(x);\n        checkInputData(xsRank2OrHigher, this.inputNames, this.feedInputShapes, false);\n        try {\n            // TODO(cais): Take care of stateful models.\n            //   if (this.stateful) ...\n            // TODO(cais): Take care of the learning_phase boolean flag.\n            //   if (this.useLearningPhase) ...\n            const batchSize = args.batchSize == null ? 32 : args.batchSize;\n            (0,_training_tensors__WEBPACK_IMPORTED_MODULE_16__/* .checkBatchSize */ .fQ)(batchSize);\n            return this.predictLoop(xsRank2OrHigher, batchSize);\n        }\n        finally {\n            (0,_training_tensors__WEBPACK_IMPORTED_MODULE_16__/* .disposeNewTensors */ .kS)(xsRank2OrHigher, x);\n        }\n    }\n    /**\n     * Returns predictions for a single batch of samples.\n     *\n     * ```js\n     * const model = tf.sequential({\n     *   layers: [tf.layers.dense({units: 1, inputShape: [10]})]\n     * });\n     * model.predictOnBatch(tf.ones([8, 10])).print();\n     * ```\n     * @param x: Input samples, as a Tensor (for models with exactly one\n     *   input) or an array of Tensors (for models with more than one input).\n     * @return Tensor(s) of predictions\n     *\n     * @doc {heading: 'Models', subheading: 'Classes'}\n     */\n    predictOnBatch(x) {\n        checkInputData(x, this.inputNames, this.feedInputShapes, true);\n        // TODO(cais): Take care of the learning_phase boolean flag.\n        //   if (this.useLearningPhase) ...\n        const batchSize = (Array.isArray(x) ? x[0] : x).shape[0];\n        return this.predictLoop(x, batchSize);\n    }\n    standardizeUserDataXY(x, y, checkBatchAxis = true, batchSize) {\n        // TODO(cais): Add sampleWeight, classWeight\n        if (this.optimizer_ == null) {\n            throw new _errors__WEBPACK_IMPORTED_MODULE_4__/* .RuntimeError */ .LH('You must compile a model before training/testing. Use ' +\n                'LayersModel.compile(modelCompileArgs).');\n        }\n        const outputShapes = [];\n        for (let i = 0; i < this.feedOutputShapes.length; ++i) {\n            const outputShape = this.feedOutputShapes[i];\n            const lossFn = this.feedLossFns[i];\n            if (lossFn === _losses__WEBPACK_IMPORTED_MODULE_7__/* .sparseCategoricalCrossentropy */ .KM) {\n                outputShapes.push(outputShape.slice(0, outputShape.length - 1).concat([1]));\n            }\n            else {\n                // Porting Note: Because of strong typing `lossFn` must be a function.\n                outputShapes.push(outputShape);\n            }\n        }\n        x = standardizeInputData(x, this.feedInputNames, this.feedInputShapes, false, 'input');\n        y = standardizeInputData(y, this.feedOutputNames, outputShapes, false, 'target');\n        // TODO(cais): Standardize sampleWeights & classWeights.\n        checkArrayLengths(x, y, null);\n        // TODO(cais): Check sampleWeights as well.\n        checkLossAndTargetCompatibility(y, this.feedLossFns, this.feedOutputShapes);\n        if (this.stateful && batchSize != null && batchSize > 0) {\n            if (x[0].shape[0] % batchSize !== 0) {\n                throw new _errors__WEBPACK_IMPORTED_MODULE_4__/* .ValueError */ .nu(`In a stateful network, you should only pass inputs with a ` +\n                    `number of samples that is divisible by the batch size ` +\n                    `${batchSize}. Found: ${x[0].shape[0]} sample(s).`);\n            }\n        }\n        return [x, y];\n    }\n    async standardizeUserData(x, y, sampleWeight, classWeight, checkBatchAxis = true, batchSize) {\n        const [standardXs, standardYs] = this.standardizeUserDataXY(x, y, checkBatchAxis, batchSize);\n        // TODO(cais): Handle sampleWeights.\n        if (sampleWeight != null) {\n            throw new Error('sample weight is not supported yet.');\n        }\n        let standardSampleWeights = null;\n        if (classWeight != null) {\n            const classWeights = (0,_training_utils__WEBPACK_IMPORTED_MODULE_17__/* .standardizeClassWeights */ .Vf)(classWeight, this.outputNames);\n            standardSampleWeights = [];\n            for (let i = 0; i < classWeights.length; ++i) {\n                standardSampleWeights.push(await (0,_training_utils__WEBPACK_IMPORTED_MODULE_17__/* .standardizeWeights */ .tl)(standardYs[i], null, classWeights[i]));\n            }\n        }\n        // TODO(cais): Deal with the case of model.stateful == true.\n        return [standardXs, standardYs, standardSampleWeights];\n    }\n    /**\n     * Loop over some test data in batches.\n     * @param f A Function returning a list of tensors.\n     * @param ins Array of tensors to be fed to `f`.\n     * @param batchSize Integer batch size or `null` / `undefined`.\n     * @param verbose verbosity mode.\n     * @param steps Total number of steps (batches of samples) before\n     * declaring test finished. Ignored with the default value of `null` /\n     * `undefined`.\n     * @returns Array of Scalars.\n     */\n    testLoop(f, ins, batchSize, verbose = 0, steps) {\n        return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy(() => {\n            const numSamples = this.checkNumSamples(ins, batchSize, steps, 'steps');\n            const outs = [];\n            if (verbose > 0) {\n                throw new _errors__WEBPACK_IMPORTED_MODULE_4__/* .NotImplementedError */ .nj('Verbose mode is not implemented yet.');\n            }\n            // TODO(cais): Use `indicesForConversionToDense' to prevent slow down.\n            if (steps != null) {\n                throw new _errors__WEBPACK_IMPORTED_MODULE_4__/* .NotImplementedError */ .nj('steps mode in testLoop() is not implemented yet');\n            }\n            else {\n                const batches = (0,_training_tensors__WEBPACK_IMPORTED_MODULE_16__/* .makeBatches */ .R_)(numSamples, batchSize);\n                const indexArray = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tensor1d)((0,_utils_math_utils__WEBPACK_IMPORTED_MODULE_11__/* .range */ .w6)(0, numSamples));\n                for (let batchIndex = 0; batchIndex < batches.length; ++batchIndex) {\n                    const batchStart = batches[batchIndex][0];\n                    const batchEnd = batches[batchIndex][1];\n                    const batchIds = _backend_tfjs_backend__WEBPACK_IMPORTED_MODULE_1__/* .sliceAlongFirstAxis */ .c9(indexArray, batchStart, batchEnd - batchStart);\n                    // TODO(cais): In ins, train flag can be a number, instead of an\n                    //   Tensor? Do we need to handle this in tfjs-layers?\n                    const insBatch = (0,_training_tensors__WEBPACK_IMPORTED_MODULE_16__/* .sliceArraysByIndices */ .YX)(ins, batchIds);\n                    const batchOuts = f(insBatch);\n                    if (batchIndex === 0) {\n                        for (let i = 0; i < batchOuts.length; ++i) {\n                            outs.push((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.scalar)(0));\n                        }\n                    }\n                    for (let i = 0; i < batchOuts.length; ++i) {\n                        const batchOut = batchOuts[i];\n                        outs[i] =\n                            _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.add(outs[i], _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.mul(batchEnd - batchStart, batchOut));\n                    }\n                }\n                for (let i = 0; i < outs.length; ++i) {\n                    outs[i] = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.div(outs[i], numSamples);\n                }\n            }\n            return outs;\n        });\n    }\n    getDedupedMetricsNames() {\n        const outLabels = this.metricsNames;\n        // Rename duplicated metrics names (can happen with an output layer\n        // shared among multiple dataflows).\n        const dedupedOutLabels = [];\n        for (let i = 0; i < outLabels.length; ++i) {\n            const label = outLabels[i];\n            let newLabel = label;\n            if ((0,_utils_generic_utils__WEBPACK_IMPORTED_MODULE_10__/* .count */ .QX)(outLabels, label) > 1) {\n                const dupIndex = (0,_utils_generic_utils__WEBPACK_IMPORTED_MODULE_10__/* .count */ .QX)(outLabels.slice(0, i), label);\n                newLabel += `_${dupIndex}`;\n            }\n            dedupedOutLabels.push(newLabel);\n        }\n        return dedupedOutLabels;\n    }\n    /**\n     * Creates a function that performs the following actions:\n     *\n     * 1. computes the losses\n     * 2. sums them to get the total loss\n     * 3. call the optimizer computes the gradients of the LayersModel's\n     *    trainable weights w.r.t. the total loss and update the variables\n     * 4. calculates the metrics\n     * 5. returns the values of the losses and metrics.\n     */\n    makeTrainFunction() {\n        return (data) => {\n            const lossValues = [];\n            const inputs = data.slice(0, this.inputs.length);\n            const targets = data.slice(this.inputs.length, this.inputs.length + this.outputs.length);\n            const sampleWeights = data.slice(this.inputs.length + this.outputs.length, this.inputs.length + this.outputs.length * 2);\n            const metricsValues = [];\n            // Create a function that computes the total loss based on the\n            // inputs. This function is used for obtaining gradients through\n            // backprop.\n            const totalLossFunction = () => {\n                const feeds = [];\n                for (let i = 0; i < this.inputs.length; ++i) {\n                    feeds.push({ key: this.inputs[i], value: inputs[i] });\n                }\n                const feedDict = new _executor__WEBPACK_IMPORTED_MODULE_14__/* .FeedDict */ .l2(feeds);\n                const outputs = (0,_executor__WEBPACK_IMPORTED_MODULE_14__/* .execute */ .ht)(this.outputs, feedDict, { 'training': true });\n                // TODO(cais): Take care of the case of multiple outputs from a\n                //   single layer?\n                let totalLoss;\n                for (let i = 0; i < this.lossFunctions.length; ++i) {\n                    const lossFunction = this.lossFunctions[i];\n                    let loss = lossFunction(targets[i], outputs[i]);\n                    if (sampleWeights[i] != null) {\n                        loss = (0,_training_utils__WEBPACK_IMPORTED_MODULE_17__/* .computeWeightedLoss */ .mo)(loss, sampleWeights[i]);\n                    }\n                    // TODO(cais): push Scalar instead.\n                    const meanLoss = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.mean(loss);\n                    // TODO(cais): Use a scope() instead, to avoid ownership.\n                    lossValues.push(meanLoss);\n                    if (i === 0) {\n                        totalLoss = loss;\n                    }\n                    else {\n                        totalLoss = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.add(totalLoss, loss);\n                    }\n                }\n                // Compute the metrics.\n                // TODO(cais): These should probably be calculated outside\n                //   totalLossFunction to benefit speed?\n                for (let i = 0; i < this.metricsTensors.length; ++i) {\n                    let weightedMetric;\n                    if (this.outputs.length > 1 && i < this.outputs.length) {\n                        weightedMetric = lossValues[i];\n                    }\n                    else {\n                        const metric = this.metricsTensors[i][0];\n                        const outputIndex = this.metricsTensors[i][1];\n                        weightedMetric =\n                            _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.mean(metric(targets[outputIndex], outputs[outputIndex]));\n                    }\n                    _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.keep(weightedMetric);\n                    // TODO(cais): Use a scope() instead, to avoid ownership.\n                    metricsValues.push(weightedMetric);\n                }\n                totalLoss = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.mean(totalLoss);\n                // Add regularizer penalties.\n                this.calculateLosses().forEach(regularizerLoss => {\n                    totalLoss = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.add(totalLoss, regularizerLoss);\n                });\n                return totalLoss;\n            };\n            const variables = this.collectedTrainableWeights.map(param => param.read());\n            const returnCost = true;\n            const totalLossValue = this.optimizer_.minimize(totalLossFunction, returnCost, variables);\n            return [totalLossValue].concat(metricsValues);\n        };\n    }\n    /**\n     * Create a function which, when invoked with an array of `tf.Tensor`s as a\n     * batch of inputs, returns the prespecified loss and metrics of the model\n     * under the batch of input data.\n     */\n    makeTestFunction() {\n        this.testFunction = (data) => {\n            return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy(() => {\n                const valOutputs = [];\n                let totalLoss;\n                const inputs = data.slice(0, this.inputs.length);\n                const targets = data.slice(this.inputs.length, this.inputs.length + this.outputs.length);\n                const feeds = [];\n                for (let i = 0; i < this.inputs.length; ++i) {\n                    feeds.push({ key: this.inputs[i], value: inputs[i] });\n                }\n                const feedDict = new _executor__WEBPACK_IMPORTED_MODULE_14__/* .FeedDict */ .l2(feeds);\n                const outputs = (0,_executor__WEBPACK_IMPORTED_MODULE_14__/* .execute */ .ht)(this.outputs, feedDict);\n                // Compute total loss.\n                for (let i = 0; i < this.lossFunctions.length; ++i) {\n                    const lossFunction = this.lossFunctions[i];\n                    // TODO(cais): Add sample weighting and replace the simple\n                    // averaging.\n                    const loss = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.mean(lossFunction(targets[i], outputs[i]));\n                    if (i === 0) {\n                        totalLoss = loss;\n                    }\n                    else {\n                        totalLoss = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.add(totalLoss, loss);\n                    }\n                    valOutputs.push(totalLoss);\n                }\n                // Compute the metrics.\n                for (let i = 0; i < this.metricsTensors.length; ++i) {\n                    const metric = this.metricsTensors[i][0];\n                    const outputIndex = this.metricsTensors[i][1];\n                    // TODO(cais): Replace K.mean() with a proper weighting function.\n                    const meanMetric = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.mean(metric(targets[outputIndex], outputs[outputIndex]));\n                    valOutputs.push(meanMetric);\n                }\n                return valOutputs;\n            });\n        };\n    }\n    /**\n     * Trains the model for a fixed number of epochs (iterations on a\n     * dataset).\n     *\n     * ```js\n     * const model = tf.sequential({\n     *     layers: [tf.layers.dense({units: 1, inputShape: [10]})]\n     * });\n     * model.compile({optimizer: 'sgd', loss: 'meanSquaredError'});\n     * for (let i = 1; i < 5 ; ++i) {\n     *   const h = await model.fit(tf.ones([8, 10]), tf.ones([8, 1]), {\n     *       batchSize: 4,\n     *       epochs: 3\n     *   });\n     *   console.log(\"Loss after Epoch \" + i + \" : \" + h.history.loss[0]);\n     * }\n     * ```\n     *\n     * @param x `tf.Tensor` of training data, or an array of `tf.Tensor`s if the\n     * model has multiple inputs. If all inputs in the model are named, you\n     * can also pass a dictionary mapping input names to `tf.Tensor`s.\n     * @param y `tf.Tensor` of target (label) data, or an array of `tf.Tensor`s if\n     * the model has multiple outputs. If all outputs in the model are named,\n     * you can also pass a dictionary mapping output names to `tf.Tensor`s.\n     * @param args A `ModelFitArgs`, containing optional fields.\n     *\n     * @return A `History` instance. Its `history` attribute contains all\n     *   information collected during training.\n     *\n     * @exception ValueError In case of mismatch between the provided input\n     * data and what the model expects.\n     *\n     * @doc {heading: 'Models', subheading: 'Classes'}\n     */\n    async fit(x, y, args = {}) {\n        if (this.isTraining) {\n            throw new Error('Cannot start training because another fit() call is ongoing.');\n        }\n        this.isTraining = true;\n        let inputs;\n        let targets;\n        let originalInputs;\n        let originalTargets;\n        let inputValX;\n        let inputValY;\n        let valX;\n        let valY;\n        let sampleWeights;\n        try {\n            const batchSize = args.batchSize == null ? 32 : args.batchSize;\n            (0,_training_tensors__WEBPACK_IMPORTED_MODULE_16__/* .checkBatchSize */ .fQ)(batchSize);\n            // Validate user data.\n            // TODO(cais): Support sampleWeight.\n            const checkBatchAxis = false;\n            const standardizedOuts = await this.standardizeUserData(x, y, args.sampleWeight, args.classWeight, checkBatchAxis, batchSize);\n            inputs = standardizedOuts[0];\n            targets = standardizedOuts[1];\n            sampleWeights = standardizedOuts[2];\n            // Prepare validation data.\n            let doValidation = false;\n            let valIns;\n            if (args.validationData != null && args.validationData.length > 0) {\n                doValidation = true;\n                if (args.validationData.length === 2) {\n                    // config.validationData consists of valX and valY.\n                    inputValX = args.validationData[0];\n                    inputValY = args.validationData[1];\n                }\n                else if (args.validationData.length === 3) {\n                    throw new _errors__WEBPACK_IMPORTED_MODULE_4__/* .NotImplementedError */ .nj('validationData including sample weights is not supported yet.');\n                }\n                else {\n                    throw new _errors__WEBPACK_IMPORTED_MODULE_4__/* .ValueError */ .nu(`When passing validation data, it must contain 2 (valX, valY) ` +\n                        `or 3 (valX, valY, valSampleWeight) items; ` +\n                        `${args.validationData} is invalid.`);\n                }\n                const checkBatchAxis = true;\n                const valStandardized = await this.standardizeUserData(inputValX, inputValY, null, /** Unused sample weights. */ null, /** Unused class weights. */ checkBatchAxis, batchSize);\n                valX = valStandardized[0];\n                valY = valStandardized[1];\n                valIns = valX.concat(valY);\n                // TODO(cais): Add useLearningPhase data properly.\n            }\n            else if (args.validationSplit != null && args.validationSplit > 0 &&\n                args.validationSplit < 1) {\n                doValidation = true;\n                // Porting Note: In tfjs-layers, inputs[0] is always a Tensor.\n                const splitAt = Math.floor(inputs[0].shape[0] * (1 - args.validationSplit));\n                const originalBatchSize = inputs[0].shape[0];\n                valX = (0,_training_tensors__WEBPACK_IMPORTED_MODULE_16__/* .sliceArrays */ .sf)(inputs, splitAt, originalBatchSize);\n                originalInputs = inputs;\n                inputs = (0,_training_tensors__WEBPACK_IMPORTED_MODULE_16__/* .sliceArrays */ .sf)(inputs, 0, splitAt);\n                valY = (0,_training_tensors__WEBPACK_IMPORTED_MODULE_16__/* .sliceArrays */ .sf)(targets, splitAt, originalBatchSize);\n                originalTargets = targets;\n                targets = (0,_training_tensors__WEBPACK_IMPORTED_MODULE_16__/* .sliceArrays */ .sf)(targets, 0, splitAt);\n                // TODO(cais): Once sampleWeights becomes available, slice it to get\n                //   valSampleWeights.\n                valIns = valX.concat(valY);\n                // TODO(cais): Add useLearningPhase data properly.\n            }\n            else if (args.validationSteps != null) {\n                doValidation = true;\n                // TODO(cais): Add useLearningPhase.\n            }\n            const ins = inputs.concat(targets).concat(sampleWeights);\n            this.checkTrainableWeightsConsistency();\n            // TODO(cais): Handle use_learning_phase and learning_phase?\n            // Porting Note: Here we see a key deviation of tfjs-layers from\n            // Keras.\n            //  Due to the imperative nature of tfjs-layers' backend (tfjs-core),\n            //  we do not construct symbolic computation graphs to embody the\n            //  training process. Instead, we define a function that performs the\n            //  training action. In PyKeras, the data (inputs and targets) are fed\n            //  through graph placeholders. In tfjs-layers, the data are fed as\n            //  function arguments. Since the function are defined below in the\n            //  scope, we don't have equivalents of PyKeras's\n            //  `_make_train_funciton`.\n            const trainFunction = this.makeTrainFunction();\n            const outLabels = this.getDedupedMetricsNames();\n            let valFunction;\n            let callbackMetrics;\n            if (doValidation) {\n                this.makeTestFunction();\n                valFunction = this.testFunction;\n                callbackMetrics =\n                    outLabels.slice().concat(outLabels.map(n => 'val_' + n));\n            }\n            else {\n                valFunction = null;\n                valIns = [];\n                callbackMetrics = outLabels.slice();\n            }\n            const callbacks = (0,_base_callbacks__WEBPACK_IMPORTED_MODULE_2__/* .standardizeCallbacks */ .CZ)(args.callbacks, args.yieldEvery);\n            const out = await this.fitLoop(trainFunction, ins, outLabels, batchSize, args.epochs, args.verbose, callbacks, valFunction, valIns, args.shuffle, callbackMetrics, args.initialEpoch, null, null);\n            return out;\n        }\n        finally {\n            this.isTraining = false;\n            // Memory clean up.\n            (0,_training_tensors__WEBPACK_IMPORTED_MODULE_16__/* .disposeNewTensors */ .kS)(inputs, x);\n            (0,_training_tensors__WEBPACK_IMPORTED_MODULE_16__/* .disposeNewTensors */ .kS)(targets, y);\n            (0,_training_tensors__WEBPACK_IMPORTED_MODULE_16__/* .disposeNewTensors */ .kS)(originalInputs, x);\n            (0,_training_tensors__WEBPACK_IMPORTED_MODULE_16__/* .disposeNewTensors */ .kS)(originalTargets, y);\n            (0,_training_tensors__WEBPACK_IMPORTED_MODULE_16__/* .disposeNewTensors */ .kS)(valX, inputValX);\n            (0,_training_tensors__WEBPACK_IMPORTED_MODULE_16__/* .disposeNewTensors */ .kS)(valY, inputValY);\n            if (sampleWeights != null) {\n                _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.dispose(sampleWeights);\n            }\n        }\n        // TODO(cais): Add value to outLabels.\n    }\n    /**\n     * Abstract fit function for `f(ins)`.\n     * @param f A Function returning a list of tensors. For training, this\n     *   function is expected to perform the updates to the variables.\n     * @param ins List of tensors to be fed to `f`.\n     * @param outLabels List of strings, display names of the outputs of `f`.\n     * @param batchSize Integer batch size or `== null` if unknown. Default : 32.\n     * @param epochs Number of times to iterate over the data. Default : 1.\n     * @param verbose Verbosity mode: 0, 1, or 2. Default: 1.\n     * @param callbacks List of callbacks to be called during training.\n     * @param valF Function to call for validation.\n     * @param valIns List of tensors to be fed to `valF`.\n     * @param shuffle Whether to shuffle the data at the beginning of every\n     * epoch. Default : true.\n     * @param callbackMetrics List of strings, the display names of the metrics\n     *   passed to the callbacks. They should be the concatenation of the\n     *   display names of the outputs of `f` and the list of display names\n     *   of the outputs of `valF`.\n     * @param initialEpoch Epoch at which to start training (useful for\n     *   resuming a previous training run). Default : 0.\n     * @param stepsPerEpoch Total number of steps (batches on samples) before\n     *   declaring one epoch finished and starting the next epoch. Ignored with\n     *   the default value of `undefined` or `null`.\n     * @param validationSteps Number of steps to run validation for (only if\n     *   doing validation from data tensors). Not applicable for tfjs-layers.\n     * @returns A `History` object.\n     */\n    async fitLoop(f, ins, outLabels, batchSize, epochs, verbose, callbacks, valF, valIns, shuffle, callbackMetrics, initialEpoch, stepsPerEpoch, validationSteps) {\n        if (batchSize == null) {\n            batchSize = 32;\n        }\n        if (epochs == null) {\n            epochs = 1;\n        }\n        if (shuffle == null) {\n            shuffle = true;\n        }\n        if (initialEpoch == null) {\n            initialEpoch = 0;\n        }\n        // TODO(cais): Change const to let below when implementing validation.\n        let doValidation = false;\n        if (valF != null && valIns != null) {\n            doValidation = true;\n            // TODO(cais): verbose message.\n        }\n        if (validationSteps != null) {\n            doValidation = true;\n            if (stepsPerEpoch == null) {\n                throw new _errors__WEBPACK_IMPORTED_MODULE_4__/* .ValueError */ .nu('Can only use `validationSteps` when doing step-wise training, ' +\n                    'i.e., `stepsPerEpoch` must be set.');\n            }\n        }\n        const numTrainSamples = this.checkNumSamples(ins, batchSize, stepsPerEpoch, 'steps_per_epoch');\n        let indexArray;\n        if (numTrainSamples != null) {\n            indexArray = (0,_utils_math_utils__WEBPACK_IMPORTED_MODULE_11__/* .range */ .w6)(0, numTrainSamples);\n        }\n        if (verbose == null) {\n            verbose = 1;\n        }\n        const { callbackList, history } = (0,_base_callbacks__WEBPACK_IMPORTED_MODULE_2__/* .configureCallbacks */ .m$)(callbacks, verbose, epochs, initialEpoch, numTrainSamples, stepsPerEpoch, batchSize, doValidation, callbackMetrics);\n        callbackList.setModel(this);\n        this.history = history;\n        await callbackList.onTrainBegin();\n        this.stopTraining_ = false;\n        // TODO(cais): Take care of callbacks.validation_data as in PyKeras.\n        // TODO(cais): Pre-convert feeds for performance as in PyKeras.\n        for (let epoch = initialEpoch; epoch < epochs; ++epoch) {\n            await callbackList.onEpochBegin(epoch);\n            const epochLogs = {};\n            if (stepsPerEpoch != null) {\n                throw new _errors__WEBPACK_IMPORTED_MODULE_4__/* .NotImplementedError */ .nj('stepsPerEpoch mode is not implemented yet.');\n            }\n            else {\n                if (shuffle === 'batch') {\n                    throw new _errors__WEBPACK_IMPORTED_MODULE_4__/* .NotImplementedError */ .nj('batch shuffling is not implemneted'\n                        + ' yet');\n                }\n                else if (shuffle) {\n                    _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.shuffle(indexArray);\n                }\n                // Convert the potentially shuffled indices to Tensor1D, to avoid the\n                // cost of repeated creation of Array1Ds later on.\n                const epochIndexArray1D = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tensor1d)(indexArray);\n                const batches = (0,_training_tensors__WEBPACK_IMPORTED_MODULE_16__/* .makeBatches */ .R_)(numTrainSamples, batchSize);\n                for (let batchIndex = 0; batchIndex < batches.length; ++batchIndex) {\n                    const batchLogs = {};\n                    await callbackList.onBatchBegin(batchIndex, batchLogs);\n                    _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy(() => {\n                        const batchStart = batches[batchIndex][0];\n                        const batchEnd = batches[batchIndex][1];\n                        const batchIds = _backend_tfjs_backend__WEBPACK_IMPORTED_MODULE_1__/* .sliceAlongFirstAxis */ .c9(epochIndexArray1D, batchStart, batchEnd - batchStart);\n                        batchLogs['batch'] = batchIndex;\n                        batchLogs['size'] = batchEnd - batchStart;\n                        // TODO(cais): In ins, train flag can be a number, instead of an\n                        //   Tensor? Do we need to handle this in tfjs-layers?\n                        const insBatch = (0,_training_tensors__WEBPACK_IMPORTED_MODULE_16__/* .sliceArraysByIndices */ .YX)(ins, batchIds);\n                        const outs = f(insBatch);\n                        for (let i = 0; i < outLabels.length; ++i) {\n                            const label = outLabels[i];\n                            const out = outs[i];\n                            batchLogs[label] = out;\n                            _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.keep(out);\n                            // TODO(cais): Use scope() to avoid ownership.\n                        }\n                        if (batchIndex === batches.length - 1) { // Last batch.\n                            if (doValidation) {\n                                const valOuts = this.testLoop(valF, valIns, batchSize);\n                                // Porting Notes: In tfjs-layers, valOuts is always an Array.\n                                for (let i = 0; i < outLabels.length; ++i) {\n                                    const label = outLabels[i];\n                                    const out = valOuts[i];\n                                    _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.keep(out);\n                                    // TODO(cais): Use scope() to avoid ownership.\n                                    epochLogs['val_' + label] = out;\n                                }\n                            }\n                        }\n                    });\n                    await callbackList.onBatchEnd(batchIndex, batchLogs);\n                    (0,_logs__WEBPACK_IMPORTED_MODULE_6__/* .disposeTensorsInLogs */ .i)(batchLogs);\n                    if (this.stopTraining_) {\n                        break;\n                    }\n                    // TODO(cais): return outs as list of Tensor.\n                }\n                epochIndexArray1D.dispose();\n            }\n            // TODO(cais): Run validation at the end of the epoch.\n            await callbackList.onEpochEnd(epoch, epochLogs);\n            if (this.stopTraining_) {\n                break;\n            }\n        }\n        await callbackList.onTrainEnd();\n        await this.history.syncData();\n        return this.history;\n    }\n    // TODO(cais): Add code snippet below when it's possible to instantiate\n    //   actual dataset objects.\n    /**\n     * Trains the model using a dataset object.\n     *\n     * @param dataset A dataset object. Its `iterator()` method is expected\n     *   to generate a dataset iterator object, the `next()` method of which\n     *   is expected to produce data batches for training. The return value\n     *   of the `next()` call ought to contain a boolean `done` field and a\n     *   `value` field. The `value` field is expected to be an array of two\n     *   `tf.Tensor`s or an array of two nested `tf.Tensor` structures. The former\n     *   case is for models with exactly one input and one output (e.g.\n     *   a sequential model). The latter case is for models with multiple\n     *   inputs and/or multiple outputs.\n     *   Of the two items in the array, the first is the input feature(s) and\n     *   the second is the output target(s).\n     * @param args A `ModelFitDatasetArgs`, containing optional fields.\n     *\n     * @return A `History` instance. Its `history` attribute contains all\n     *   information collected during training.\n     *\n     * @doc {heading: 'Models', subheading: 'Classes'}\n     */\n    async fitDataset(dataset, args) {\n        return (0,_training_dataset__WEBPACK_IMPORTED_MODULE_15__/* .fitDataset */ .y)(this, dataset, args);\n    }\n    /**\n     * Runs a single gradient update on a single batch of data.\n     *\n     * This method differs from `fit()` and `fitDataset()` in the following\n     * regards:\n     *   - It operates on exactly one batch of data.\n     *   - It returns only the loss and metric values, instead of\n     *     returning the batch-by-batch loss and metric values.\n     *   - It doesn't support fine-grained options such as verbosity and\n     *     callbacks.\n     *\n     * @param x Input data. It could be one of the following:\n     *   - A `tf.Tensor`, or an Array of `tf.Tensor`s (in case the model has\n     *     multiple inputs).\n     *   - An Object mapping input names to corresponding `tf.Tensor` (if the\n     *     model has named inputs).\n     * @param y Target data. It could be either a `tf.Tensor` or multiple\n     *   `tf.Tensor`s. It should be consistent with `x`.\n     * @returns Training loss or losses (in case the model has\n     *   multiple outputs), along with metrics (if any), as numbers.\n     *\n     * @doc {heading: 'Models', subheading: 'Classes'}\n     */\n    async trainOnBatch(x, y) {\n        // TODO(cais): Support sampleWeight and classWeight.\n        // TODO(cais): Support Dataset objects.\n        const standardizeOut = await this.standardizeUserData(x, y);\n        const inputs = standardizeOut[0];\n        const targets = standardizeOut[1];\n        const trainFunction = this.makeTrainFunction();\n        const losses = trainFunction(inputs.concat(targets));\n        const lossValues = [];\n        for (const loss of losses) {\n            const v = await loss.data();\n            lossValues.push(v[0]);\n        }\n        _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.dispose(losses);\n        (0,_training_tensors__WEBPACK_IMPORTED_MODULE_16__/* .disposeNewTensors */ .kS)(standardizeOut[0], x);\n        (0,_training_tensors__WEBPACK_IMPORTED_MODULE_16__/* .disposeNewTensors */ .kS)(standardizeOut[1], y);\n        return (0,_utils_generic_utils__WEBPACK_IMPORTED_MODULE_10__/* .singletonOrArray */ .Bq)(lossValues);\n    }\n    /**\n     * Extract weight values of the model.\n     *\n     * @param config: An instance of `io.SaveConfig`, which specifies\n     * model-saving options such as whether only trainable weights are to be\n     * saved.\n     * @returns A `NamedTensorMap` mapping original weight names (i.e.,\n     *   non-uniqueified weight names) to their values.\n     */\n    getNamedWeights(config) {\n        const namedWeights = [];\n        const trainableOnly = config != null && config.trainableOnly;\n        const weights = trainableOnly ? this.trainableWeights : this.weights;\n        const weightValues = this.getWeights(trainableOnly);\n        for (let i = 0; i < weights.length; ++i) {\n            if (trainableOnly && !weights[i].trainable) {\n                // Optionally skip non-trainable weights.\n                continue;\n            }\n            namedWeights.push({ name: weights[i].originalName, tensor: weightValues[i] });\n        }\n        return namedWeights;\n    }\n    /**\n     * Setter used for force stopping of LayersModel.fit() (i.e., training).\n     *\n     * Example:\n     *\n     * ```js\n     * const input = tf.input({shape: [10]});\n     * const output = tf.layers.dense({units: 1}).apply(input);\n     * const model = tf.model({inputs: [input], outputs: [output]});\n     * model.compile({loss: 'meanSquaredError', optimizer: 'sgd'});\n     * const xs = tf.ones([8, 10]);\n     * const ys = tf.zeros([8, 1]);\n     *\n     * const history = await model.fit(xs, ys, {\n     *   epochs: 10,\n     *   callbacks: {\n     *     onEpochEnd: async (epoch, logs) => {\n     *       if (epoch === 2) {\n     *         model.stopTraining = true;\n     *       }\n     *     }\n     *   }\n     * });\n     *\n     * // There should be only 3 values in the loss array, instead of 10\n     * values,\n     * // due to the stopping after 3 epochs.\n     * console.log(history.history.loss);\n     * ```\n     */\n    set stopTraining(stop) {\n        this.stopTraining_ = stop;\n    }\n    get stopTraining() {\n        return this.stopTraining_;\n    }\n    get optimizer() {\n        return this.optimizer_;\n    }\n    set optimizer(optimizer) {\n        if (this.optimizer_ !== optimizer) {\n            this.optimizer_ = optimizer;\n            this.isOptimizerOwned = false;\n        }\n    }\n    dispose() {\n        const result = super.dispose();\n        if (result.refCountAfterDispose === 0 && this.optimizer != null &&\n            this.isOptimizerOwned) {\n            const numTensorsBeforeOptmizerDisposal = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.memory().numTensors;\n            this.optimizer_.dispose();\n            result.numDisposedVariables +=\n                numTensorsBeforeOptmizerDisposal - _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.memory().numTensors;\n        }\n        return result;\n    }\n    getLossIdentifiers() {\n        let lossNames;\n        if (typeof this.loss === 'string') {\n            lossNames = (0,_utils_generic_utils__WEBPACK_IMPORTED_MODULE_10__/* .toSnakeCase */ .D1)(this.loss);\n        }\n        else if (Array.isArray(this.loss)) {\n            for (const loss of this.loss) {\n                if (typeof loss !== 'string') {\n                    throw new Error('Serialization of non-string loss is not supported.');\n                }\n            }\n            lossNames = this.loss.map(name => (0,_utils_generic_utils__WEBPACK_IMPORTED_MODULE_10__/* .toSnakeCase */ .D1)(name));\n        }\n        else {\n            const outputNames = Object.keys(this.loss);\n            lossNames = {};\n            const losses = this.loss;\n            for (const outputName of outputNames) {\n                if (typeof losses[outputName] === 'string') {\n                    lossNames[outputName] =\n                        (0,_utils_generic_utils__WEBPACK_IMPORTED_MODULE_10__/* .toSnakeCase */ .D1)(losses[outputName]);\n                }\n                else {\n                    throw new Error('Serialization of non-string loss is not supported.');\n                }\n            }\n        }\n        return lossNames;\n    }\n    getMetricIdentifiers() {\n        if (typeof this.metrics === 'string' ||\n            typeof this.metrics === 'function') {\n            return [(0,_utils_generic_utils__WEBPACK_IMPORTED_MODULE_10__/* .toSnakeCase */ .D1)(_metrics__WEBPACK_IMPORTED_MODULE_8__/* .getLossOrMetricName */ .aI(this.metrics))];\n        }\n        else if (Array.isArray(this.metrics)) {\n            return this.metrics.map(metric => (0,_utils_generic_utils__WEBPACK_IMPORTED_MODULE_10__/* .toSnakeCase */ .D1)(_metrics__WEBPACK_IMPORTED_MODULE_8__/* .getLossOrMetricName */ .aI(metric)));\n        }\n        else {\n            const metricsIdentifiers = {};\n            for (const key in this.metrics) {\n                metricsIdentifiers[key] =\n                    (0,_utils_generic_utils__WEBPACK_IMPORTED_MODULE_10__/* .toSnakeCase */ .D1)(_metrics__WEBPACK_IMPORTED_MODULE_8__/* .getLossOrMetricName */ .aI(this.metrics[key]));\n            }\n            return metricsIdentifiers;\n        }\n    }\n    getTrainingConfig() {\n        return {\n            loss: this.getLossIdentifiers(),\n            metrics: this.getMetricIdentifiers(),\n            optimizer_config: {\n                class_name: this.optimizer.getClassName(),\n                config: this.optimizer.getConfig()\n            }\n        };\n        // TODO(cais): Add weight_metrics when they are supported.\n        // TODO(cais): Add sample_weight_mode when it's supported.\n        // TODO(cais): Add loss_weights when it's supported.\n    }\n    loadTrainingConfig(trainingConfig) {\n        if (trainingConfig.weighted_metrics != null) {\n            throw new Error('Loading weight_metrics is not supported yet.');\n        }\n        if (trainingConfig.loss_weights != null) {\n            throw new Error('Loading loss_weights is not supported yet.');\n        }\n        if (trainingConfig.sample_weight_mode != null) {\n            throw new Error('Loading sample_weight_mode is not supported yet.');\n        }\n        const tsConfig = (0,_utils_serialization_utils__WEBPACK_IMPORTED_MODULE_12__/* .convertPythonicToTs */ .a)(trainingConfig.optimizer_config);\n        const optimizer = (0,_layers_serialization__WEBPACK_IMPORTED_MODULE_5__/* .deserialize */ .v)(tsConfig);\n        let loss;\n        if (typeof trainingConfig.loss === 'string') {\n            loss = (0,_utils_generic_utils__WEBPACK_IMPORTED_MODULE_10__/* .toCamelCase */ .zW)(trainingConfig.loss);\n        }\n        else if (Array.isArray(trainingConfig.loss)) {\n            loss = trainingConfig.loss.map(lossEntry => (0,_utils_generic_utils__WEBPACK_IMPORTED_MODULE_10__/* .toCamelCase */ .zW)(lossEntry));\n        }\n        else if (trainingConfig.loss != null) {\n            loss = {};\n            for (const key in trainingConfig.loss) {\n                loss[key] = (0,_utils_generic_utils__WEBPACK_IMPORTED_MODULE_10__/* .toCamelCase */ .zW)(trainingConfig.loss[key]);\n            }\n        }\n        let metrics;\n        if (Array.isArray(trainingConfig.metrics)) {\n            metrics = trainingConfig.metrics.map(metric => (0,_utils_generic_utils__WEBPACK_IMPORTED_MODULE_10__/* .toCamelCase */ .zW)(metric));\n        }\n        else if (trainingConfig.metrics != null) {\n            metrics = {};\n            for (const key in trainingConfig.metrics) {\n                metrics[key] = (0,_utils_generic_utils__WEBPACK_IMPORTED_MODULE_10__/* .toCamelCase */ .zW)(trainingConfig.metrics[key]);\n            }\n        }\n        this.compile({ loss, metrics, optimizer });\n    }\n    /**\n     * Save the configuration and/or weights of the LayersModel.\n     *\n     * An `IOHandler` is an object that has a `save` method of the proper\n     * signature defined. The `save` method manages the storing or\n     * transmission of serialized data (\"artifacts\") that represent the\n     * model's topology and weights onto or via a specific medium, such as\n     * file downloads, local storage, IndexedDB in the web browser and HTTP\n     * requests to a server. TensorFlow.js provides `IOHandler`\n     * implementations for a number of frequently used saving mediums, such as\n     * `tf.io.browserDownloads` and `tf.io.browserLocalStorage`. See `tf.io`\n     * for more details.\n     *\n     * This method also allows you to refer to certain types of `IOHandler`s\n     * as URL-like string shortcuts, such as 'localstorage://' and\n     * 'indexeddb://'.\n     *\n     * Example 1: Save `model`'s topology and weights to browser [local\n     * storage](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage);\n     * then load it back.\n     *\n     * ```js\n     * const model = tf.sequential(\n     *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});\n     * console.log('Prediction from original model:');\n     * model.predict(tf.ones([1, 3])).print();\n     *\n     * const saveResults = await model.save('localstorage://my-model-1');\n     *\n     * const loadedModel = await tf.loadLayersModel('localstorage://my-model-1');\n     * console.log('Prediction from loaded model:');\n     * loadedModel.predict(tf.ones([1, 3])).print();\n     * ```\n     *\n     * Example 2. Saving `model`'s topology and weights to browser\n     * [IndexedDB](https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API);\n     * then load it back.\n     *\n     * ```js\n     * const model = tf.sequential(\n     *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});\n     * console.log('Prediction from original model:');\n     * model.predict(tf.ones([1, 3])).print();\n     *\n     * const saveResults = await model.save('indexeddb://my-model-1');\n     *\n     * const loadedModel = await tf.loadLayersModel('indexeddb://my-model-1');\n     * console.log('Prediction from loaded model:');\n     * loadedModel.predict(tf.ones([1, 3])).print();\n     * ```\n     *\n     * Example 3. Saving `model`'s topology and weights as two files\n     * (`my-model-1.json` and `my-model-1.weights.bin`) downloaded from\n     * browser.\n     *\n     * ```js\n     * const model = tf.sequential(\n     *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});\n     * const saveResults = await model.save('downloads://my-model-1');\n     * ```\n     *\n     * Example 4. Send  `model`'s topology and weights to an HTTP server.\n     * See the documentation of `tf.io.http` for more details\n     * including specifying request parameters and implementation of the\n     * server.\n     *\n     * ```js\n     * const model = tf.sequential(\n     *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});\n     * const saveResults = await model.save('http://my-server/model/upload');\n     * ```\n     *\n     * @param handlerOrURL An instance of `IOHandler` or a URL-like,\n     * scheme-based string shortcut for `IOHandler`.\n     * @param config Options for saving the model.\n     * @returns A `Promise` of `SaveResult`, which summarizes the result of\n     * the saving, such as byte sizes of the saved artifacts for the model's\n     *   topology and weight values.\n     *\n     * @doc {heading: 'Models', subheading: 'Classes', ignoreCI: true}\n     */\n    async save(handlerOrURL, config) {\n        if (typeof handlerOrURL === 'string') {\n            const handlers = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.io.getSaveHandlers(handlerOrURL);\n            if (handlers.length === 0) {\n                throw new _errors__WEBPACK_IMPORTED_MODULE_4__/* .ValueError */ .nu(`Cannot find any save handlers for URL '${handlerOrURL}'`);\n            }\n            else if (handlers.length > 1) {\n                throw new _errors__WEBPACK_IMPORTED_MODULE_4__/* .ValueError */ .nu(`Found more than one (${handlers.length}) save handlers for ` +\n                    `URL '${handlerOrURL}'`);\n            }\n            handlerOrURL = handlers[0];\n        }\n        if (handlerOrURL.save == null) {\n            throw new _errors__WEBPACK_IMPORTED_MODULE_4__/* .ValueError */ .nu('LayersModel.save() cannot proceed because the IOHandler ' +\n                'provided does not have the `save` attribute defined.');\n        }\n        const weightDataAndSpecs = await _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.io.encodeWeights(this.getNamedWeights(config));\n        const returnString = false;\n        const unusedArg = null;\n        const modelConfig = this.toJSON(unusedArg, returnString);\n        const modelArtifacts = {\n            modelTopology: modelConfig,\n            format: LAYERS_MODEL_FORMAT_NAME,\n            generatedBy: `TensorFlow.js tfjs-layers v${_version__WEBPACK_IMPORTED_MODULE_19__/* .version */ .i}`,\n            convertedBy: null,\n        };\n        const includeOptimizer = config == null ? false : config.includeOptimizer;\n        if (includeOptimizer && this.optimizer != null) {\n            modelArtifacts.trainingConfig = this.getTrainingConfig();\n            const weightType = 'optimizer';\n            const { data: optimizerWeightData, specs: optimizerWeightSpecs } = await _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.io.encodeWeights(await this.optimizer.getWeights(), weightType);\n            weightDataAndSpecs.specs.push(...optimizerWeightSpecs);\n            weightDataAndSpecs.data = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.io.concatenateArrayBuffers([weightDataAndSpecs.data, optimizerWeightData]);\n        }\n        if (this.userDefinedMetadata != null) {\n            // Check serialized size of user-defined metadata.\n            const checkSize = true;\n            (0,_user_defined_metadata__WEBPACK_IMPORTED_MODULE_20__/* .checkUserDefinedMetadata */ .WE)(this.userDefinedMetadata, this.name, checkSize);\n            modelArtifacts.userDefinedMetadata = this.userDefinedMetadata;\n        }\n        modelArtifacts.weightData = weightDataAndSpecs.data;\n        modelArtifacts.weightSpecs = weightDataAndSpecs.specs;\n        return handlerOrURL.save(modelArtifacts);\n    }\n    /**\n     * Set user-defined metadata.\n     *\n     * The set metadata will be serialized together with the topology\n     * and weights of the model during `save()` calls.\n     *\n     * @param setUserDefinedMetadata\n     */\n    setUserDefinedMetadata(userDefinedMetadata) {\n        (0,_user_defined_metadata__WEBPACK_IMPORTED_MODULE_20__/* .checkUserDefinedMetadata */ .WE)(userDefinedMetadata, this.name);\n        this.userDefinedMetadata = userDefinedMetadata;\n    }\n    /**\n     * Get user-defined metadata.\n     *\n     * The metadata is supplied via one of the two routes:\n     *   1. By calling `setUserDefinedMetadata()`.\n     *   2. Loaded during model loading (if the model is constructed\n     *      via `tf.loadLayersModel()`.)\n     *\n     * If no user-defined metadata is available from either of the\n     * two routes, this function will return `undefined`.\n     */\n    getUserDefinedMetadata() {\n        return this.userDefinedMetadata;\n    }\n}\n// The class name is 'Model' rather than 'LayersModel' for backwards\n// compatibility since this class name shows up in the serialization format.\n/** @nocollapse */\nLayersModel.className = 'Model';\n_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.serialization.registerClass(LayersModel);\n/**\n * A `tf.Functional` is an alias to `tf.LayersModel`.\n *\n * See also:\n *   `tf.LayersModel`, `tf.Sequential`, `tf.loadLayersModel`.\n */\n/** @doc {heading: 'Models', subheading: 'Classes'} */\nclass Functional extends LayersModel {\n}\nFunctional.className = 'Functional';\n_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.serialization.registerClass(Functional);\n//# sourceMappingURL=data:application/json;base64,\n\n/***/ })\n\n}]);"],"names":["self","push","__unused_webpack_module","__webpack_exports__","__webpack_require__","d","LayersModel","_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__","_backend_tfjs_backend__WEBPACK_IMPORTED_MODULE_1__","_base_callbacks__WEBPACK_IMPORTED_MODULE_2__","_common__WEBPACK_IMPORTED_MODULE_3__","_errors__WEBPACK_IMPORTED_MODULE_4__","_layers_serialization__WEBPACK_IMPORTED_MODULE_5__","_logs__WEBPACK_IMPORTED_MODULE_6__","_losses__WEBPACK_IMPORTED_MODULE_7__","_metrics__WEBPACK_IMPORTED_MODULE_8__","_optimizers__WEBPACK_IMPORTED_MODULE_9__","_user_defined_metadata__WEBPACK_IMPORTED_MODULE_20__","_utils_generic_utils__WEBPACK_IMPORTED_MODULE_10__","_utils_layer_utils__WEBPACK_IMPORTED_MODULE_18__","_utils_math_utils__WEBPACK_IMPORTED_MODULE_11__","_utils_serialization_utils__WEBPACK_IMPORTED_MODULE_12__","_version__WEBPACK_IMPORTED_MODULE_19__","_container__WEBPACK_IMPORTED_MODULE_13__","_executor__WEBPACK_IMPORTED_MODULE_14__","_training_dataset__WEBPACK_IMPORTED_MODULE_15__","_training_tensors__WEBPACK_IMPORTED_MODULE_16__","_training_utils__WEBPACK_IMPORTED_MODULE_17__","isDataArray","x","Array","isArray","isDataDict","Tensor","standardizeInputData","data","names","shapes","checkBatchAxis","exceptionPrefix","arrays","length","gotUnexpectedData","key","hasOwnProperty","nu","map","name","shape","YV","i","array","j","dim","refDim","slice","checkInputData","JSON","stringify","W","constructor","args","isTraining","summary","lineLength","positions","printFn","console","log","built","I","compile","loss","optimizer","optimizer_","isOptimizerOwned","Optimizer","lossFunctions","outputs","theLosses","l","U2","lossFunction","forEach","_","outputNames","indexOf","warn","feedOutputNames","feedOutputShapes","feedLossFns","internalOutputShapes","skipTargetIndices","metrics","metricsNames","metricsTensors","f4","weightedLoss","nestedMetrics","collectMetrics","wrappedMetrics","outputMetrics","appendMetric","outputIndex","metricName","metricTensor","handleMetrics","accFn","weightedMetricFn","metric","metricResult","suffix","outputShape","fO","_F","KM","TY","G5","uq","metricNamePrefix","metricFn","aI","collectedTrainableWeights","trainableWeights","checkTrainableWeightsConsistency","evaluate","y","batchSize","fQ","standardizedOuts","standardizeUserDataXY","ins","concat","makeTestFunction","f","testFunction","testOuts","testLoop","verbose","steps","Bq","kS","evaluateDataset","dataset","D","checkNumSamples","stepsName","numSamples","execute","inputs","outputsIsArray","outputSymbolicTensors","retrieveSymbolicTensors","feedDict","l2","add","input","tensorValue","executeOutputs","ht","symbolicTensorNames","JE","outputsRemaining","layer","layers","layerOutputs","output","layerOutputNames","index","remainingNames","tensor","predictLoop","tidy","nj","batches","R_","outsBatches","batchIndex","batchOuts","batchStart","batchEnd","insBatch","sf","feeds","value","batchOut","predict","xsRank2OrHigher","inputNames","feedInputShapes","predictOnBatch","LH","outputShapes","lossFn","checkArrayLengths","targets","weights","setX","Tw","sort","setY","target","util","arraysEqual","feedInputNames","checkLossAndTargetCompatibility","lossFns","keyLosses","FD","slicedYShape","slicedShape","targetDim","outDim","stateful","standardizeUserData","sampleWeight","classWeight","standardXs","standardYs","standardSampleWeights","classWeights","Vf","tl","outs","indexArray","tensor1d","w6","batchIds","c9","YX","scalar","mul","div","getDedupedMetricsNames","outLabels","dedupedOutLabels","label","newLabel","QX","dupIndex","makeTrainFunction","lossValues","sampleWeights","metricsValues","totalLossFunction","totalLoss","mo","meanLoss","mean","weightedMetric","keep","calculateLosses","regularizerLoss","variables","param","read","totalLossValue","minimize","valOutputs","meanMetric","fit","originalInputs","originalTargets","inputValX","inputValY","valX","valY","valIns","valFunction","callbackMetrics","doValidation","validationData","valStandardized","validationSplit","splitAt","Math","floor","originalBatchSize","validationSteps","trainFunction","n","callbacks","CZ","yieldEvery","out","fitLoop","epochs","shuffle","initialEpoch","dispose","valF","stepsPerEpoch","numTrainSamples","callbackList","history","m$","setModel","onTrainBegin","stopTraining_","epoch","onEpochBegin","epochLogs","epochIndexArray1D","batchLogs","onBatchBegin","valOuts","onBatchEnd","onEpochEnd","onTrainEnd","syncData","fitDataset","trainOnBatch","standardizeOut","losses","v","getNamedWeights","config","namedWeights","trainableOnly","weightValues","getWeights","trainable","originalName","stopTraining","stop","result","refCountAfterDispose","numTensorsBeforeOptmizerDisposal","memory","numTensors","numDisposedVariables","getLossIdentifiers","lossNames","D1","Object","keys","outputName","getMetricIdentifiers","metricsIdentifiers","getTrainingConfig","optimizer_config","class_name","getClassName","getConfig","loadTrainingConfig","trainingConfig","weighted_metrics","loss_weights","sample_weight_mode","tsConfig","a","zW","lossEntry","save","handlerOrURL","handlers","io","getSaveHandlers","weightDataAndSpecs","encodeWeights","modelConfig","toJSON","modelArtifacts","modelTopology","format","generatedBy","convertedBy","includeOptimizer","optimizerWeightData","specs","optimizerWeightSpecs","concatenateArrayBuffers","userDefinedMetadata","WE","weightData","weightSpecs","setUserDefinedMetadata","getUserDefinedMetadata","className","serialization","registerClass","Functional"],"sourceRoot":""}