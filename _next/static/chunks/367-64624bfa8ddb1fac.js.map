{"version":3,"file":"static/chunks/367-64624bfa8ddb1fac.js","mappings":"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","sources":["webpack://_N_E/./node_modules/engine.io-parser/build/esm/commons.js","webpack://_N_E/./node_modules/engine.io-parser/build/esm/encodePacket.browser.js","webpack://_N_E/./node_modules/engine.io-parser/build/esm/contrib/base64-arraybuffer.js","webpack://_N_E/./node_modules/engine.io-parser/build/esm/decodePacket.browser.js","webpack://_N_E/./node_modules/engine.io-parser/build/esm/index.js","webpack://_N_E/./node_modules/@socket.io/component-emitter/index.mjs","webpack://_N_E/./node_modules/engine.io-client/build/esm/globalThis.browser.js","webpack://_N_E/./node_modules/engine.io-client/build/esm/util.js","webpack://_N_E/./node_modules/engine.io-client/build/esm/transport.js","webpack://_N_E/./node_modules/engine.io-client/build/esm/contrib/yeast.js","webpack://_N_E/./node_modules/engine.io-client/build/esm/contrib/parseqs.js","webpack://_N_E/./node_modules/engine.io-client/build/esm/contrib/has-cors.js","webpack://_N_E/./node_modules/engine.io-client/build/esm/transports/xmlhttprequest.browser.js","webpack://_N_E/./node_modules/engine.io-client/build/esm/transports/polling.js","webpack://_N_E/./node_modules/engine.io-client/build/esm/transports/websocket-constructor.browser.js","webpack://_N_E/./node_modules/engine.io-client/build/esm/transports/websocket.js","webpack://_N_E/./node_modules/engine.io-client/build/esm/transports/index.js","webpack://_N_E/./node_modules/engine.io-client/build/esm/contrib/parseuri.js","webpack://_N_E/./node_modules/engine.io-client/build/esm/socket.js","webpack://_N_E/./node_modules/engine.io-client/build/esm/index.js","webpack://_N_E/./node_modules/socket.io-client/build/esm/url.js","webpack://_N_E/./node_modules/socket.io-parser/build/esm/is-binary.js","webpack://_N_E/./node_modules/socket.io-parser/build/esm/binary.js","webpack://_N_E/./node_modules/socket.io-parser/build/esm/index.js","webpack://_N_E/./node_modules/socket.io-client/build/esm/on.js","webpack://_N_E/./node_modules/socket.io-client/build/esm/socket.js","webpack://_N_E/./node_modules/socket.io-client/build/esm/contrib/backo2.js","webpack://_N_E/./node_modules/socket.io-client/build/esm/manager.js","webpack://_N_E/./node_modules/socket.io-client/build/esm/index.js","webpack://_N_E/<anon>"],"sourcesContent":["const PACKET_TYPES = Object.create(null); // no Map = no polyfill\nPACKET_TYPES[\"open\"] = \"0\";\nPACKET_TYPES[\"close\"] = \"1\";\nPACKET_TYPES[\"ping\"] = \"2\";\nPACKET_TYPES[\"pong\"] = \"3\";\nPACKET_TYPES[\"message\"] = \"4\";\nPACKET_TYPES[\"upgrade\"] = \"5\";\nPACKET_TYPES[\"noop\"] = \"6\";\nconst PACKET_TYPES_REVERSE = Object.create(null);\nObject.keys(PACKET_TYPES).forEach(key => {\n    PACKET_TYPES_REVERSE[PACKET_TYPES[key]] = key;\n});\nconst ERROR_PACKET = { type: \"error\", data: \"parser error\" };\nexport { PACKET_TYPES, PACKET_TYPES_REVERSE, ERROR_PACKET };\n","import { PACKET_TYPES } from \"./commons.js\";\nconst withNativeBlob = typeof Blob === \"function\" ||\n    (typeof Blob !== \"undefined\" &&\n        Object.prototype.toString.call(Blob) === \"[object BlobConstructor]\");\nconst withNativeArrayBuffer = typeof ArrayBuffer === \"function\";\n// ArrayBuffer.isView method is not defined in IE10\nconst isView = obj => {\n    return typeof ArrayBuffer.isView === \"function\"\n        ? ArrayBuffer.isView(obj)\n        : obj && obj.buffer instanceof ArrayBuffer;\n};\nconst encodePacket = ({ type, data }, supportsBinary, callback) => {\n    if (withNativeBlob && data instanceof Blob) {\n        if (supportsBinary) {\n            return callback(data);\n        }\n        else {\n            return encodeBlobAsBase64(data, callback);\n        }\n    }\n    else if (withNativeArrayBuffer &&\n        (data instanceof ArrayBuffer || isView(data))) {\n        if (supportsBinary) {\n            return callback(data);\n        }\n        else {\n            return encodeBlobAsBase64(new Blob([data]), callback);\n        }\n    }\n    // plain string\n    return callback(PACKET_TYPES[type] + (data || \"\"));\n};\nconst encodeBlobAsBase64 = (data, callback) => {\n    const fileReader = new FileReader();\n    fileReader.onload = function () {\n        const content = fileReader.result.split(\",\")[1];\n        callback(\"b\" + content);\n    };\n    return fileReader.readAsDataURL(data);\n};\nexport default encodePacket;\n","const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n// Use a lookup table to find the index.\nconst lookup = typeof Uint8Array === 'undefined' ? [] : new Uint8Array(256);\nfor (let i = 0; i < chars.length; i++) {\n    lookup[chars.charCodeAt(i)] = i;\n}\nexport const encode = (arraybuffer) => {\n    let bytes = new Uint8Array(arraybuffer), i, len = bytes.length, base64 = '';\n    for (i = 0; i < len; i += 3) {\n        base64 += chars[bytes[i] >> 2];\n        base64 += chars[((bytes[i] & 3) << 4) | (bytes[i + 1] >> 4)];\n        base64 += chars[((bytes[i + 1] & 15) << 2) | (bytes[i + 2] >> 6)];\n        base64 += chars[bytes[i + 2] & 63];\n    }\n    if (len % 3 === 2) {\n        base64 = base64.substring(0, base64.length - 1) + '=';\n    }\n    else if (len % 3 === 1) {\n        base64 = base64.substring(0, base64.length - 2) + '==';\n    }\n    return base64;\n};\nexport const decode = (base64) => {\n    let bufferLength = base64.length * 0.75, len = base64.length, i, p = 0, encoded1, encoded2, encoded3, encoded4;\n    if (base64[base64.length - 1] === '=') {\n        bufferLength--;\n        if (base64[base64.length - 2] === '=') {\n            bufferLength--;\n        }\n    }\n    const arraybuffer = new ArrayBuffer(bufferLength), bytes = new Uint8Array(arraybuffer);\n    for (i = 0; i < len; i += 4) {\n        encoded1 = lookup[base64.charCodeAt(i)];\n        encoded2 = lookup[base64.charCodeAt(i + 1)];\n        encoded3 = lookup[base64.charCodeAt(i + 2)];\n        encoded4 = lookup[base64.charCodeAt(i + 3)];\n        bytes[p++] = (encoded1 << 2) | (encoded2 >> 4);\n        bytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2);\n        bytes[p++] = ((encoded3 & 3) << 6) | (encoded4 & 63);\n    }\n    return arraybuffer;\n};\n","import { ERROR_PACKET, PACKET_TYPES_REVERSE } from \"./commons.js\";\nimport { decode } from \"./contrib/base64-arraybuffer.js\";\nconst withNativeArrayBuffer = typeof ArrayBuffer === \"function\";\nconst decodePacket = (encodedPacket, binaryType) => {\n    if (typeof encodedPacket !== \"string\") {\n        return {\n            type: \"message\",\n            data: mapBinary(encodedPacket, binaryType)\n        };\n    }\n    const type = encodedPacket.charAt(0);\n    if (type === \"b\") {\n        return {\n            type: \"message\",\n            data: decodeBase64Packet(encodedPacket.substring(1), binaryType)\n        };\n    }\n    const packetType = PACKET_TYPES_REVERSE[type];\n    if (!packetType) {\n        return ERROR_PACKET;\n    }\n    return encodedPacket.length > 1\n        ? {\n            type: PACKET_TYPES_REVERSE[type],\n            data: encodedPacket.substring(1)\n        }\n        : {\n            type: PACKET_TYPES_REVERSE[type]\n        };\n};\nconst decodeBase64Packet = (data, binaryType) => {\n    if (withNativeArrayBuffer) {\n        const decoded = decode(data);\n        return mapBinary(decoded, binaryType);\n    }\n    else {\n        return { base64: true, data }; // fallback for old browsers\n    }\n};\nconst mapBinary = (data, binaryType) => {\n    switch (binaryType) {\n        case \"blob\":\n            return data instanceof ArrayBuffer ? new Blob([data]) : data;\n        case \"arraybuffer\":\n        default:\n            return data; // assuming the data is already an ArrayBuffer\n    }\n};\nexport default decodePacket;\n","import encodePacket from \"./encodePacket.js\";\nimport decodePacket from \"./decodePacket.js\";\nconst SEPARATOR = String.fromCharCode(30); // see https://en.wikipedia.org/wiki/Delimiter#ASCII_delimited_text\nconst encodePayload = (packets, callback) => {\n    // some packets may be added to the array while encoding, so the initial length must be saved\n    const length = packets.length;\n    const encodedPackets = new Array(length);\n    let count = 0;\n    packets.forEach((packet, i) => {\n        // force base64 encoding for binary packets\n        encodePacket(packet, false, encodedPacket => {\n            encodedPackets[i] = encodedPacket;\n            if (++count === length) {\n                callback(encodedPackets.join(SEPARATOR));\n            }\n        });\n    });\n};\nconst decodePayload = (encodedPayload, binaryType) => {\n    const encodedPackets = encodedPayload.split(SEPARATOR);\n    const packets = [];\n    for (let i = 0; i < encodedPackets.length; i++) {\n        const decodedPacket = decodePacket(encodedPackets[i], binaryType);\n        packets.push(decodedPacket);\n        if (decodedPacket.type === \"error\") {\n            break;\n        }\n    }\n    return packets;\n};\nexport const protocol = 4;\nexport { encodePacket, encodePayload, decodePacket, decodePayload };\n","/**\n * Initialize a new `Emitter`.\n *\n * @api public\n */\n\nexport function Emitter(obj) {\n  if (obj) return mixin(obj);\n}\n\n/**\n * Mixin the emitter properties.\n *\n * @param {Object} obj\n * @return {Object}\n * @api private\n */\n\nfunction mixin(obj) {\n  for (var key in Emitter.prototype) {\n    obj[key] = Emitter.prototype[key];\n  }\n  return obj;\n}\n\n/**\n * Listen on the given `event` with `fn`.\n *\n * @param {String} event\n * @param {Function} fn\n * @return {Emitter}\n * @api public\n */\n\nEmitter.prototype.on =\nEmitter.prototype.addEventListener = function(event, fn){\n  this._callbacks = this._callbacks || {};\n  (this._callbacks['$' + event] = this._callbacks['$' + event] || [])\n    .push(fn);\n  return this;\n};\n\n/**\n * Adds an `event` listener that will be invoked a single\n * time then automatically removed.\n *\n * @param {String} event\n * @param {Function} fn\n * @return {Emitter}\n * @api public\n */\n\nEmitter.prototype.once = function(event, fn){\n  function on() {\n    this.off(event, on);\n    fn.apply(this, arguments);\n  }\n\n  on.fn = fn;\n  this.on(event, on);\n  return this;\n};\n\n/**\n * Remove the given callback for `event` or all\n * registered callbacks.\n *\n * @param {String} event\n * @param {Function} fn\n * @return {Emitter}\n * @api public\n */\n\nEmitter.prototype.off =\nEmitter.prototype.removeListener =\nEmitter.prototype.removeAllListeners =\nEmitter.prototype.removeEventListener = function(event, fn){\n  this._callbacks = this._callbacks || {};\n\n  // all\n  if (0 == arguments.length) {\n    this._callbacks = {};\n    return this;\n  }\n\n  // specific event\n  var callbacks = this._callbacks['$' + event];\n  if (!callbacks) return this;\n\n  // remove all handlers\n  if (1 == arguments.length) {\n    delete this._callbacks['$' + event];\n    return this;\n  }\n\n  // remove specific handler\n  var cb;\n  for (var i = 0; i < callbacks.length; i++) {\n    cb = callbacks[i];\n    if (cb === fn || cb.fn === fn) {\n      callbacks.splice(i, 1);\n      break;\n    }\n  }\n\n  // Remove event specific arrays for event types that no\n  // one is subscribed for to avoid memory leak.\n  if (callbacks.length === 0) {\n    delete this._callbacks['$' + event];\n  }\n\n  return this;\n};\n\n/**\n * Emit `event` with the given args.\n *\n * @param {String} event\n * @param {Mixed} ...\n * @return {Emitter}\n */\n\nEmitter.prototype.emit = function(event){\n  this._callbacks = this._callbacks || {};\n\n  var args = new Array(arguments.length - 1)\n    , callbacks = this._callbacks['$' + event];\n\n  for (var i = 1; i < arguments.length; i++) {\n    args[i - 1] = arguments[i];\n  }\n\n  if (callbacks) {\n    callbacks = callbacks.slice(0);\n    for (var i = 0, len = callbacks.length; i < len; ++i) {\n      callbacks[i].apply(this, args);\n    }\n  }\n\n  return this;\n};\n\n// alias used for reserved events (protected method)\nEmitter.prototype.emitReserved = Emitter.prototype.emit;\n\n/**\n * Return array of callbacks for `event`.\n *\n * @param {String} event\n * @return {Array}\n * @api public\n */\n\nEmitter.prototype.listeners = function(event){\n  this._callbacks = this._callbacks || {};\n  return this._callbacks['$' + event] || [];\n};\n\n/**\n * Check if this emitter has `event` handlers.\n *\n * @param {String} event\n * @return {Boolean}\n * @api public\n */\n\nEmitter.prototype.hasListeners = function(event){\n  return !! this.listeners(event).length;\n};\n","export const globalThisShim = (() => {\n    if (typeof self !== \"undefined\") {\n        return self;\n    }\n    else if (typeof window !== \"undefined\") {\n        return window;\n    }\n    else {\n        return Function(\"return this\")();\n    }\n})();\n","import { globalThisShim as globalThis } from \"./globalThis.js\";\nexport function pick(obj, ...attr) {\n    return attr.reduce((acc, k) => {\n        if (obj.hasOwnProperty(k)) {\n            acc[k] = obj[k];\n        }\n        return acc;\n    }, {});\n}\n// Keep a reference to the real timeout functions so they can be used when overridden\nconst NATIVE_SET_TIMEOUT = setTimeout;\nconst NATIVE_CLEAR_TIMEOUT = clearTimeout;\nexport function installTimerFunctions(obj, opts) {\n    if (opts.useNativeTimers) {\n        obj.setTimeoutFn = NATIVE_SET_TIMEOUT.bind(globalThis);\n        obj.clearTimeoutFn = NATIVE_CLEAR_TIMEOUT.bind(globalThis);\n    }\n    else {\n        obj.setTimeoutFn = setTimeout.bind(globalThis);\n        obj.clearTimeoutFn = clearTimeout.bind(globalThis);\n    }\n}\n// base64 encoded buffers are about 33% bigger (https://en.wikipedia.org/wiki/Base64)\nconst BASE64_OVERHEAD = 1.33;\n// we could also have used `new Blob([obj]).size`, but it isn't supported in IE9\nexport function byteLength(obj) {\n    if (typeof obj === \"string\") {\n        return utf8Length(obj);\n    }\n    // arraybuffer or blob\n    return Math.ceil((obj.byteLength || obj.size) * BASE64_OVERHEAD);\n}\nfunction utf8Length(str) {\n    let c = 0, length = 0;\n    for (let i = 0, l = str.length; i < l; i++) {\n        c = str.charCodeAt(i);\n        if (c < 0x80) {\n            length += 1;\n        }\n        else if (c < 0x800) {\n            length += 2;\n        }\n        else if (c < 0xd800 || c >= 0xe000) {\n            length += 3;\n        }\n        else {\n            i++;\n            length += 4;\n        }\n    }\n    return length;\n}\n","import { decodePacket } from \"engine.io-parser\";\nimport { Emitter } from \"@socket.io/component-emitter\";\nimport { installTimerFunctions } from \"./util.js\";\nclass TransportError extends Error {\n    constructor(reason, description, context) {\n        super(reason);\n        this.description = description;\n        this.context = context;\n        this.type = \"TransportError\";\n    }\n}\nexport class Transport extends Emitter {\n    /**\n     * Transport abstract constructor.\n     *\n     * @param {Object} options.\n     * @api private\n     */\n    constructor(opts) {\n        super();\n        this.writable = false;\n        installTimerFunctions(this, opts);\n        this.opts = opts;\n        this.query = opts.query;\n        this.readyState = \"\";\n        this.socket = opts.socket;\n    }\n    /**\n     * Emits an error.\n     *\n     * @param {String} reason\n     * @param description\n     * @param context - the error context\n     * @return {Transport} for chaining\n     * @api protected\n     */\n    onError(reason, description, context) {\n        super.emitReserved(\"error\", new TransportError(reason, description, context));\n        return this;\n    }\n    /**\n     * Opens the transport.\n     *\n     * @api public\n     */\n    open() {\n        if (\"closed\" === this.readyState || \"\" === this.readyState) {\n            this.readyState = \"opening\";\n            this.doOpen();\n        }\n        return this;\n    }\n    /**\n     * Closes the transport.\n     *\n     * @api public\n     */\n    close() {\n        if (\"opening\" === this.readyState || \"open\" === this.readyState) {\n            this.doClose();\n            this.onClose();\n        }\n        return this;\n    }\n    /**\n     * Sends multiple packets.\n     *\n     * @param {Array} packets\n     * @api public\n     */\n    send(packets) {\n        if (\"open\" === this.readyState) {\n            this.write(packets);\n        }\n        else {\n            // this might happen if the transport was silently closed in the beforeunload event handler\n        }\n    }\n    /**\n     * Called upon open\n     *\n     * @api protected\n     */\n    onOpen() {\n        this.readyState = \"open\";\n        this.writable = true;\n        super.emitReserved(\"open\");\n    }\n    /**\n     * Called with data.\n     *\n     * @param {String} data\n     * @api protected\n     */\n    onData(data) {\n        const packet = decodePacket(data, this.socket.binaryType);\n        this.onPacket(packet);\n    }\n    /**\n     * Called with a decoded packet.\n     *\n     * @api protected\n     */\n    onPacket(packet) {\n        super.emitReserved(\"packet\", packet);\n    }\n    /**\n     * Called upon close.\n     *\n     * @api protected\n     */\n    onClose(details) {\n        this.readyState = \"closed\";\n        super.emitReserved(\"close\", details);\n    }\n}\n","// imported from https://github.com/unshiftio/yeast\n'use strict';\nconst alphabet = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_'.split(''), length = 64, map = {};\nlet seed = 0, i = 0, prev;\n/**\n * Return a string representing the specified number.\n *\n * @param {Number} num The number to convert.\n * @returns {String} The string representation of the number.\n * @api public\n */\nexport function encode(num) {\n    let encoded = '';\n    do {\n        encoded = alphabet[num % length] + encoded;\n        num = Math.floor(num / length);\n    } while (num > 0);\n    return encoded;\n}\n/**\n * Return the integer value specified by the given string.\n *\n * @param {String} str The string to convert.\n * @returns {Number} The integer value represented by the string.\n * @api public\n */\nexport function decode(str) {\n    let decoded = 0;\n    for (i = 0; i < str.length; i++) {\n        decoded = decoded * length + map[str.charAt(i)];\n    }\n    return decoded;\n}\n/**\n * Yeast: A tiny growing id generator.\n *\n * @returns {String} A unique id.\n * @api public\n */\nexport function yeast() {\n    const now = encode(+new Date());\n    if (now !== prev)\n        return seed = 0, prev = now;\n    return now + '.' + encode(seed++);\n}\n//\n// Map each character to its index.\n//\nfor (; i < length; i++)\n    map[alphabet[i]] = i;\n","// imported from https://github.com/galkn/querystring\n/**\n * Compiles a querystring\n * Returns string representation of the object\n *\n * @param {Object}\n * @api private\n */\nexport function encode(obj) {\n    let str = '';\n    for (let i in obj) {\n        if (obj.hasOwnProperty(i)) {\n            if (str.length)\n                str += '&';\n            str += encodeURIComponent(i) + '=' + encodeURIComponent(obj[i]);\n        }\n    }\n    return str;\n}\n/**\n * Parses a simple querystring into an object\n *\n * @param {String} qs\n * @api private\n */\nexport function decode(qs) {\n    let qry = {};\n    let pairs = qs.split('&');\n    for (let i = 0, l = pairs.length; i < l; i++) {\n        let pair = pairs[i].split('=');\n        qry[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);\n    }\n    return qry;\n}\n","// imported from https://github.com/component/has-cors\nlet value = false;\ntry {\n    value = typeof XMLHttpRequest !== 'undefined' &&\n        'withCredentials' in new XMLHttpRequest();\n}\ncatch (err) {\n    // if XMLHttp support is disabled in IE then it will throw\n    // when trying to create\n}\nexport const hasCORS = value;\n","// browser shim for xmlhttprequest module\nimport { hasCORS } from \"../contrib/has-cors.js\";\nimport { globalThisShim as globalThis } from \"../globalThis.js\";\nexport function XHR(opts) {\n    const xdomain = opts.xdomain;\n    // XMLHttpRequest can be disabled on IE\n    try {\n        if (\"undefined\" !== typeof XMLHttpRequest && (!xdomain || hasCORS)) {\n            return new XMLHttpRequest();\n        }\n    }\n    catch (e) { }\n    if (!xdomain) {\n        try {\n            return new globalThis[[\"Active\"].concat(\"Object\").join(\"X\")](\"Microsoft.XMLHTTP\");\n        }\n        catch (e) { }\n    }\n}\n","import { Transport } from \"../transport.js\";\nimport { yeast } from \"../contrib/yeast.js\";\nimport { encode } from \"../contrib/parseqs.js\";\nimport { encodePayload, decodePayload } from \"engine.io-parser\";\nimport { XHR as XMLHttpRequest } from \"./xmlhttprequest.js\";\nimport { Emitter } from \"@socket.io/component-emitter\";\nimport { installTimerFunctions, pick } from \"../util.js\";\nimport { globalThisShim as globalThis } from \"../globalThis.js\";\nfunction empty() { }\nconst hasXHR2 = (function () {\n    const xhr = new XMLHttpRequest({\n        xdomain: false\n    });\n    return null != xhr.responseType;\n})();\nexport class Polling extends Transport {\n    /**\n     * XHR Polling constructor.\n     *\n     * @param {Object} opts\n     * @api public\n     */\n    constructor(opts) {\n        super(opts);\n        this.polling = false;\n        if (typeof location !== \"undefined\") {\n            const isSSL = \"https:\" === location.protocol;\n            let port = location.port;\n            // some user agents have empty `location.port`\n            if (!port) {\n                port = isSSL ? \"443\" : \"80\";\n            }\n            this.xd =\n                (typeof location !== \"undefined\" &&\n                    opts.hostname !== location.hostname) ||\n                    port !== opts.port;\n            this.xs = opts.secure !== isSSL;\n        }\n        /**\n         * XHR supports binary\n         */\n        const forceBase64 = opts && opts.forceBase64;\n        this.supportsBinary = hasXHR2 && !forceBase64;\n    }\n    /**\n     * Transport name.\n     */\n    get name() {\n        return \"polling\";\n    }\n    /**\n     * Opens the socket (triggers polling). We write a PING message to determine\n     * when the transport is open.\n     *\n     * @api private\n     */\n    doOpen() {\n        this.poll();\n    }\n    /**\n     * Pauses polling.\n     *\n     * @param {Function} callback upon buffers are flushed and transport is paused\n     * @api private\n     */\n    pause(onPause) {\n        this.readyState = \"pausing\";\n        const pause = () => {\n            this.readyState = \"paused\";\n            onPause();\n        };\n        if (this.polling || !this.writable) {\n            let total = 0;\n            if (this.polling) {\n                total++;\n                this.once(\"pollComplete\", function () {\n                    --total || pause();\n                });\n            }\n            if (!this.writable) {\n                total++;\n                this.once(\"drain\", function () {\n                    --total || pause();\n                });\n            }\n        }\n        else {\n            pause();\n        }\n    }\n    /**\n     * Starts polling cycle.\n     *\n     * @api public\n     */\n    poll() {\n        this.polling = true;\n        this.doPoll();\n        this.emitReserved(\"poll\");\n    }\n    /**\n     * Overloads onData to detect payloads.\n     *\n     * @api private\n     */\n    onData(data) {\n        const callback = packet => {\n            // if its the first message we consider the transport open\n            if (\"opening\" === this.readyState && packet.type === \"open\") {\n                this.onOpen();\n            }\n            // if its a close packet, we close the ongoing requests\n            if (\"close\" === packet.type) {\n                this.onClose({ description: \"transport closed by the server\" });\n                return false;\n            }\n            // otherwise bypass onData and handle the message\n            this.onPacket(packet);\n        };\n        // decode payload\n        decodePayload(data, this.socket.binaryType).forEach(callback);\n        // if an event did not trigger closing\n        if (\"closed\" !== this.readyState) {\n            // if we got data we're not polling\n            this.polling = false;\n            this.emitReserved(\"pollComplete\");\n            if (\"open\" === this.readyState) {\n                this.poll();\n            }\n            else {\n            }\n        }\n    }\n    /**\n     * For polling, send a close packet.\n     *\n     * @api private\n     */\n    doClose() {\n        const close = () => {\n            this.write([{ type: \"close\" }]);\n        };\n        if (\"open\" === this.readyState) {\n            close();\n        }\n        else {\n            // in case we're trying to close while\n            // handshaking is in progress (GH-164)\n            this.once(\"open\", close);\n        }\n    }\n    /**\n     * Writes a packets payload.\n     *\n     * @param {Array} data packets\n     * @param {Function} drain callback\n     * @api private\n     */\n    write(packets) {\n        this.writable = false;\n        encodePayload(packets, data => {\n            this.doWrite(data, () => {\n                this.writable = true;\n                this.emitReserved(\"drain\");\n            });\n        });\n    }\n    /**\n     * Generates uri for connection.\n     *\n     * @api private\n     */\n    uri() {\n        let query = this.query || {};\n        const schema = this.opts.secure ? \"https\" : \"http\";\n        let port = \"\";\n        // cache busting is forced\n        if (false !== this.opts.timestampRequests) {\n            query[this.opts.timestampParam] = yeast();\n        }\n        if (!this.supportsBinary && !query.sid) {\n            query.b64 = 1;\n        }\n        // avoid port if default for schema\n        if (this.opts.port &&\n            ((\"https\" === schema && Number(this.opts.port) !== 443) ||\n                (\"http\" === schema && Number(this.opts.port) !== 80))) {\n            port = \":\" + this.opts.port;\n        }\n        const encodedQuery = encode(query);\n        const ipv6 = this.opts.hostname.indexOf(\":\") !== -1;\n        return (schema +\n            \"://\" +\n            (ipv6 ? \"[\" + this.opts.hostname + \"]\" : this.opts.hostname) +\n            port +\n            this.opts.path +\n            (encodedQuery.length ? \"?\" + encodedQuery : \"\"));\n    }\n    /**\n     * Creates a request.\n     *\n     * @param {String} method\n     * @api private\n     */\n    request(opts = {}) {\n        Object.assign(opts, { xd: this.xd, xs: this.xs }, this.opts);\n        return new Request(this.uri(), opts);\n    }\n    /**\n     * Sends data.\n     *\n     * @param {String} data to send.\n     * @param {Function} called upon flush.\n     * @api private\n     */\n    doWrite(data, fn) {\n        const req = this.request({\n            method: \"POST\",\n            data: data\n        });\n        req.on(\"success\", fn);\n        req.on(\"error\", (xhrStatus, context) => {\n            this.onError(\"xhr post error\", xhrStatus, context);\n        });\n    }\n    /**\n     * Starts a poll cycle.\n     *\n     * @api private\n     */\n    doPoll() {\n        const req = this.request();\n        req.on(\"data\", this.onData.bind(this));\n        req.on(\"error\", (xhrStatus, context) => {\n            this.onError(\"xhr poll error\", xhrStatus, context);\n        });\n        this.pollXhr = req;\n    }\n}\nexport class Request extends Emitter {\n    /**\n     * Request constructor\n     *\n     * @param {Object} options\n     * @api public\n     */\n    constructor(uri, opts) {\n        super();\n        installTimerFunctions(this, opts);\n        this.opts = opts;\n        this.method = opts.method || \"GET\";\n        this.uri = uri;\n        this.async = false !== opts.async;\n        this.data = undefined !== opts.data ? opts.data : null;\n        this.create();\n    }\n    /**\n     * Creates the XHR object and sends the request.\n     *\n     * @api private\n     */\n    create() {\n        const opts = pick(this.opts, \"agent\", \"pfx\", \"key\", \"passphrase\", \"cert\", \"ca\", \"ciphers\", \"rejectUnauthorized\", \"autoUnref\");\n        opts.xdomain = !!this.opts.xd;\n        opts.xscheme = !!this.opts.xs;\n        const xhr = (this.xhr = new XMLHttpRequest(opts));\n        try {\n            xhr.open(this.method, this.uri, this.async);\n            try {\n                if (this.opts.extraHeaders) {\n                    xhr.setDisableHeaderCheck && xhr.setDisableHeaderCheck(true);\n                    for (let i in this.opts.extraHeaders) {\n                        if (this.opts.extraHeaders.hasOwnProperty(i)) {\n                            xhr.setRequestHeader(i, this.opts.extraHeaders[i]);\n                        }\n                    }\n                }\n            }\n            catch (e) { }\n            if (\"POST\" === this.method) {\n                try {\n                    xhr.setRequestHeader(\"Content-type\", \"text/plain;charset=UTF-8\");\n                }\n                catch (e) { }\n            }\n            try {\n                xhr.setRequestHeader(\"Accept\", \"*/*\");\n            }\n            catch (e) { }\n            // ie6 check\n            if (\"withCredentials\" in xhr) {\n                xhr.withCredentials = this.opts.withCredentials;\n            }\n            if (this.opts.requestTimeout) {\n                xhr.timeout = this.opts.requestTimeout;\n            }\n            xhr.onreadystatechange = () => {\n                if (4 !== xhr.readyState)\n                    return;\n                if (200 === xhr.status || 1223 === xhr.status) {\n                    this.onLoad();\n                }\n                else {\n                    // make sure the `error` event handler that's user-set\n                    // does not throw in the same tick and gets caught here\n                    this.setTimeoutFn(() => {\n                        this.onError(typeof xhr.status === \"number\" ? xhr.status : 0);\n                    }, 0);\n                }\n            };\n            xhr.send(this.data);\n        }\n        catch (e) {\n            // Need to defer since .create() is called directly from the constructor\n            // and thus the 'error' event can only be only bound *after* this exception\n            // occurs.  Therefore, also, we cannot throw here at all.\n            this.setTimeoutFn(() => {\n                this.onError(e);\n            }, 0);\n            return;\n        }\n        if (typeof document !== \"undefined\") {\n            this.index = Request.requestsCount++;\n            Request.requests[this.index] = this;\n        }\n    }\n    /**\n     * Called upon error.\n     *\n     * @api private\n     */\n    onError(err) {\n        this.emitReserved(\"error\", err, this.xhr);\n        this.cleanup(true);\n    }\n    /**\n     * Cleans up house.\n     *\n     * @api private\n     */\n    cleanup(fromError) {\n        if (\"undefined\" === typeof this.xhr || null === this.xhr) {\n            return;\n        }\n        this.xhr.onreadystatechange = empty;\n        if (fromError) {\n            try {\n                this.xhr.abort();\n            }\n            catch (e) { }\n        }\n        if (typeof document !== \"undefined\") {\n            delete Request.requests[this.index];\n        }\n        this.xhr = null;\n    }\n    /**\n     * Called upon load.\n     *\n     * @api private\n     */\n    onLoad() {\n        const data = this.xhr.responseText;\n        if (data !== null) {\n            this.emitReserved(\"data\", data);\n            this.emitReserved(\"success\");\n            this.cleanup();\n        }\n    }\n    /**\n     * Aborts the request.\n     *\n     * @api public\n     */\n    abort() {\n        this.cleanup();\n    }\n}\nRequest.requestsCount = 0;\nRequest.requests = {};\n/**\n * Aborts pending requests when unloading the window. This is needed to prevent\n * memory leaks (e.g. when using IE) and to ensure that no spurious error is\n * emitted.\n */\nif (typeof document !== \"undefined\") {\n    // @ts-ignore\n    if (typeof attachEvent === \"function\") {\n        // @ts-ignore\n        attachEvent(\"onunload\", unloadHandler);\n    }\n    else if (typeof addEventListener === \"function\") {\n        const terminationEvent = \"onpagehide\" in globalThis ? \"pagehide\" : \"unload\";\n        addEventListener(terminationEvent, unloadHandler, false);\n    }\n}\nfunction unloadHandler() {\n    for (let i in Request.requests) {\n        if (Request.requests.hasOwnProperty(i)) {\n            Request.requests[i].abort();\n        }\n    }\n}\n","import { globalThisShim as globalThis } from \"../globalThis.js\";\nexport const nextTick = (() => {\n    const isPromiseAvailable = typeof Promise === \"function\" && typeof Promise.resolve === \"function\";\n    if (isPromiseAvailable) {\n        return cb => Promise.resolve().then(cb);\n    }\n    else {\n        return (cb, setTimeoutFn) => setTimeoutFn(cb, 0);\n    }\n})();\nexport const WebSocket = globalThis.WebSocket || globalThis.MozWebSocket;\nexport const usingBrowserWebSocket = true;\nexport const defaultBinaryType = \"arraybuffer\";\n","import { Transport } from \"../transport.js\";\nimport { encode } from \"../contrib/parseqs.js\";\nimport { yeast } from \"../contrib/yeast.js\";\nimport { pick } from \"../util.js\";\nimport { defaultBinaryType, nextTick, usingBrowserWebSocket, WebSocket } from \"./websocket-constructor.js\";\nimport { encodePacket } from \"engine.io-parser\";\n// detect ReactNative environment\nconst isReactNative = typeof navigator !== \"undefined\" &&\n    typeof navigator.product === \"string\" &&\n    navigator.product.toLowerCase() === \"reactnative\";\nexport class WS extends Transport {\n    /**\n     * WebSocket transport constructor.\n     *\n     * @api {Object} connection options\n     * @api public\n     */\n    constructor(opts) {\n        super(opts);\n        this.supportsBinary = !opts.forceBase64;\n    }\n    /**\n     * Transport name.\n     *\n     * @api public\n     */\n    get name() {\n        return \"websocket\";\n    }\n    /**\n     * Opens socket.\n     *\n     * @api private\n     */\n    doOpen() {\n        if (!this.check()) {\n            // let probe timeout\n            return;\n        }\n        const uri = this.uri();\n        const protocols = this.opts.protocols;\n        // React Native only supports the 'headers' option, and will print a warning if anything else is passed\n        const opts = isReactNative\n            ? {}\n            : pick(this.opts, \"agent\", \"perMessageDeflate\", \"pfx\", \"key\", \"passphrase\", \"cert\", \"ca\", \"ciphers\", \"rejectUnauthorized\", \"localAddress\", \"protocolVersion\", \"origin\", \"maxPayload\", \"family\", \"checkServerIdentity\");\n        if (this.opts.extraHeaders) {\n            opts.headers = this.opts.extraHeaders;\n        }\n        try {\n            this.ws =\n                usingBrowserWebSocket && !isReactNative\n                    ? protocols\n                        ? new WebSocket(uri, protocols)\n                        : new WebSocket(uri)\n                    : new WebSocket(uri, protocols, opts);\n        }\n        catch (err) {\n            return this.emitReserved(\"error\", err);\n        }\n        this.ws.binaryType = this.socket.binaryType || defaultBinaryType;\n        this.addEventListeners();\n    }\n    /**\n     * Adds event listeners to the socket\n     *\n     * @api private\n     */\n    addEventListeners() {\n        this.ws.onopen = () => {\n            if (this.opts.autoUnref) {\n                this.ws._socket.unref();\n            }\n            this.onOpen();\n        };\n        this.ws.onclose = closeEvent => this.onClose({\n            description: \"websocket connection closed\",\n            context: closeEvent\n        });\n        this.ws.onmessage = ev => this.onData(ev.data);\n        this.ws.onerror = e => this.onError(\"websocket error\", e);\n    }\n    /**\n     * Writes data to socket.\n     *\n     * @param {Array} array of packets.\n     * @api private\n     */\n    write(packets) {\n        this.writable = false;\n        // encodePacket efficient as it uses WS framing\n        // no need for encodePayload\n        for (let i = 0; i < packets.length; i++) {\n            const packet = packets[i];\n            const lastPacket = i === packets.length - 1;\n            encodePacket(packet, this.supportsBinary, data => {\n                // always create a new object (GH-437)\n                const opts = {};\n                if (!usingBrowserWebSocket) {\n                    if (packet.options) {\n                        opts.compress = packet.options.compress;\n                    }\n                    if (this.opts.perMessageDeflate) {\n                        const len = \n                        // @ts-ignore\n                        \"string\" === typeof data ? Buffer.byteLength(data) : data.length;\n                        if (len < this.opts.perMessageDeflate.threshold) {\n                            opts.compress = false;\n                        }\n                    }\n                }\n                // Sometimes the websocket has already been closed but the browser didn't\n                // have a chance of informing us about it yet, in that case send will\n                // throw an error\n                try {\n                    if (usingBrowserWebSocket) {\n                        // TypeError is thrown when passing the second argument on Safari\n                        this.ws.send(data);\n                    }\n                    else {\n                        this.ws.send(data, opts);\n                    }\n                }\n                catch (e) {\n                }\n                if (lastPacket) {\n                    // fake drain\n                    // defer to next tick to allow Socket to clear writeBuffer\n                    nextTick(() => {\n                        this.writable = true;\n                        this.emitReserved(\"drain\");\n                    }, this.setTimeoutFn);\n                }\n            });\n        }\n    }\n    /**\n     * Closes socket.\n     *\n     * @api private\n     */\n    doClose() {\n        if (typeof this.ws !== \"undefined\") {\n            this.ws.close();\n            this.ws = null;\n        }\n    }\n    /**\n     * Generates uri for connection.\n     *\n     * @api private\n     */\n    uri() {\n        let query = this.query || {};\n        const schema = this.opts.secure ? \"wss\" : \"ws\";\n        let port = \"\";\n        // avoid port if default for schema\n        if (this.opts.port &&\n            ((\"wss\" === schema && Number(this.opts.port) !== 443) ||\n                (\"ws\" === schema && Number(this.opts.port) !== 80))) {\n            port = \":\" + this.opts.port;\n        }\n        // append timestamp to URI\n        if (this.opts.timestampRequests) {\n            query[this.opts.timestampParam] = yeast();\n        }\n        // communicate binary support capabilities\n        if (!this.supportsBinary) {\n            query.b64 = 1;\n        }\n        const encodedQuery = encode(query);\n        const ipv6 = this.opts.hostname.indexOf(\":\") !== -1;\n        return (schema +\n            \"://\" +\n            (ipv6 ? \"[\" + this.opts.hostname + \"]\" : this.opts.hostname) +\n            port +\n            this.opts.path +\n            (encodedQuery.length ? \"?\" + encodedQuery : \"\"));\n    }\n    /**\n     * Feature detection for WebSocket.\n     *\n     * @return {Boolean} whether this transport is available.\n     * @api public\n     */\n    check() {\n        return !!WebSocket;\n    }\n}\n","import { Polling } from \"./polling.js\";\nimport { WS } from \"./websocket.js\";\nexport const transports = {\n    websocket: WS,\n    polling: Polling\n};\n","// imported from https://github.com/galkn/parseuri\n/**\n * Parses an URI\n *\n * @author Steven Levithan <stevenlevithan.com> (MIT license)\n * @api private\n */\nconst re = /^(?:(?![^:@]+:[^:@\\/]*@)(http|https|ws|wss):\\/\\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\\/?#]*)(?::(\\d*))?)(((\\/(?:[^?#](?![^?#\\/]*\\.[^?#\\/.]+(?:[?#]|$)))*\\/?)?([^?#\\/]*))(?:\\?([^#]*))?(?:#(.*))?)/;\nconst parts = [\n    'source', 'protocol', 'authority', 'userInfo', 'user', 'password', 'host', 'port', 'relative', 'path', 'directory', 'file', 'query', 'anchor'\n];\nexport function parse(str) {\n    const src = str, b = str.indexOf('['), e = str.indexOf(']');\n    if (b != -1 && e != -1) {\n        str = str.substring(0, b) + str.substring(b, e).replace(/:/g, ';') + str.substring(e, str.length);\n    }\n    let m = re.exec(str || ''), uri = {}, i = 14;\n    while (i--) {\n        uri[parts[i]] = m[i] || '';\n    }\n    if (b != -1 && e != -1) {\n        uri.source = src;\n        uri.host = uri.host.substring(1, uri.host.length - 1).replace(/;/g, ':');\n        uri.authority = uri.authority.replace('[', '').replace(']', '').replace(/;/g, ':');\n        uri.ipv6uri = true;\n    }\n    uri.pathNames = pathNames(uri, uri['path']);\n    uri.queryKey = queryKey(uri, uri['query']);\n    return uri;\n}\nfunction pathNames(obj, path) {\n    const regx = /\\/{2,9}/g, names = path.replace(regx, \"/\").split(\"/\");\n    if (path.substr(0, 1) == '/' || path.length === 0) {\n        names.splice(0, 1);\n    }\n    if (path.substr(path.length - 1, 1) == '/') {\n        names.splice(names.length - 1, 1);\n    }\n    return names;\n}\nfunction queryKey(uri, query) {\n    const data = {};\n    query.replace(/(?:^|&)([^&=]*)=?([^&]*)/g, function ($0, $1, $2) {\n        if ($1) {\n            data[$1] = $2;\n        }\n    });\n    return data;\n}\n","import { transports } from \"./transports/index.js\";\nimport { installTimerFunctions, byteLength } from \"./util.js\";\nimport { decode } from \"./contrib/parseqs.js\";\nimport { parse } from \"./contrib/parseuri.js\";\nimport { Emitter } from \"@socket.io/component-emitter\";\nimport { protocol } from \"engine.io-parser\";\nexport class Socket extends Emitter {\n    /**\n     * Socket constructor.\n     *\n     * @param {String|Object} uri or options\n     * @param {Object} opts - options\n     * @api public\n     */\n    constructor(uri, opts = {}) {\n        super();\n        if (uri && \"object\" === typeof uri) {\n            opts = uri;\n            uri = null;\n        }\n        if (uri) {\n            uri = parse(uri);\n            opts.hostname = uri.host;\n            opts.secure = uri.protocol === \"https\" || uri.protocol === \"wss\";\n            opts.port = uri.port;\n            if (uri.query)\n                opts.query = uri.query;\n        }\n        else if (opts.host) {\n            opts.hostname = parse(opts.host).host;\n        }\n        installTimerFunctions(this, opts);\n        this.secure =\n            null != opts.secure\n                ? opts.secure\n                : typeof location !== \"undefined\" && \"https:\" === location.protocol;\n        if (opts.hostname && !opts.port) {\n            // if no port is specified manually, use the protocol default\n            opts.port = this.secure ? \"443\" : \"80\";\n        }\n        this.hostname =\n            opts.hostname ||\n                (typeof location !== \"undefined\" ? location.hostname : \"localhost\");\n        this.port =\n            opts.port ||\n                (typeof location !== \"undefined\" && location.port\n                    ? location.port\n                    : this.secure\n                        ? \"443\"\n                        : \"80\");\n        this.transports = opts.transports || [\"polling\", \"websocket\"];\n        this.readyState = \"\";\n        this.writeBuffer = [];\n        this.prevBufferLen = 0;\n        this.opts = Object.assign({\n            path: \"/engine.io\",\n            agent: false,\n            withCredentials: false,\n            upgrade: true,\n            timestampParam: \"t\",\n            rememberUpgrade: false,\n            rejectUnauthorized: true,\n            perMessageDeflate: {\n                threshold: 1024\n            },\n            transportOptions: {},\n            closeOnBeforeunload: true\n        }, opts);\n        this.opts.path = this.opts.path.replace(/\\/$/, \"\") + \"/\";\n        if (typeof this.opts.query === \"string\") {\n            this.opts.query = decode(this.opts.query);\n        }\n        // set on handshake\n        this.id = null;\n        this.upgrades = null;\n        this.pingInterval = null;\n        this.pingTimeout = null;\n        // set on heartbeat\n        this.pingTimeoutTimer = null;\n        if (typeof addEventListener === \"function\") {\n            if (this.opts.closeOnBeforeunload) {\n                // Firefox closes the connection when the \"beforeunload\" event is emitted but not Chrome. This event listener\n                // ensures every browser behaves the same (no \"disconnect\" event at the Socket.IO level when the page is\n                // closed/reloaded)\n                addEventListener(\"beforeunload\", () => {\n                    if (this.transport) {\n                        // silently close the transport\n                        this.transport.removeAllListeners();\n                        this.transport.close();\n                    }\n                }, false);\n            }\n            if (this.hostname !== \"localhost\") {\n                this.offlineEventListener = () => {\n                    this.onClose(\"transport close\", {\n                        description: \"network connection lost\"\n                    });\n                };\n                addEventListener(\"offline\", this.offlineEventListener, false);\n            }\n        }\n        this.open();\n    }\n    /**\n     * Creates transport of the given type.\n     *\n     * @param {String} transport name\n     * @return {Transport}\n     * @api private\n     */\n    createTransport(name) {\n        const query = Object.assign({}, this.opts.query);\n        // append engine.io protocol identifier\n        query.EIO = protocol;\n        // transport name\n        query.transport = name;\n        // session id if we already have one\n        if (this.id)\n            query.sid = this.id;\n        const opts = Object.assign({}, this.opts.transportOptions[name], this.opts, {\n            query,\n            socket: this,\n            hostname: this.hostname,\n            secure: this.secure,\n            port: this.port\n        });\n        return new transports[name](opts);\n    }\n    /**\n     * Initializes transport to use and starts probe.\n     *\n     * @api private\n     */\n    open() {\n        let transport;\n        if (this.opts.rememberUpgrade &&\n            Socket.priorWebsocketSuccess &&\n            this.transports.indexOf(\"websocket\") !== -1) {\n            transport = \"websocket\";\n        }\n        else if (0 === this.transports.length) {\n            // Emit error on next tick so it can be listened to\n            this.setTimeoutFn(() => {\n                this.emitReserved(\"error\", \"No transports available\");\n            }, 0);\n            return;\n        }\n        else {\n            transport = this.transports[0];\n        }\n        this.readyState = \"opening\";\n        // Retry with the next transport if the transport is disabled (jsonp: false)\n        try {\n            transport = this.createTransport(transport);\n        }\n        catch (e) {\n            this.transports.shift();\n            this.open();\n            return;\n        }\n        transport.open();\n        this.setTransport(transport);\n    }\n    /**\n     * Sets the current transport. Disables the existing one (if any).\n     *\n     * @api private\n     */\n    setTransport(transport) {\n        if (this.transport) {\n            this.transport.removeAllListeners();\n        }\n        // set up transport\n        this.transport = transport;\n        // set up transport listeners\n        transport\n            .on(\"drain\", this.onDrain.bind(this))\n            .on(\"packet\", this.onPacket.bind(this))\n            .on(\"error\", this.onError.bind(this))\n            .on(\"close\", reason => this.onClose(\"transport close\", reason));\n    }\n    /**\n     * Probes a transport.\n     *\n     * @param {String} transport name\n     * @api private\n     */\n    probe(name) {\n        let transport = this.createTransport(name);\n        let failed = false;\n        Socket.priorWebsocketSuccess = false;\n        const onTransportOpen = () => {\n            if (failed)\n                return;\n            transport.send([{ type: \"ping\", data: \"probe\" }]);\n            transport.once(\"packet\", msg => {\n                if (failed)\n                    return;\n                if (\"pong\" === msg.type && \"probe\" === msg.data) {\n                    this.upgrading = true;\n                    this.emitReserved(\"upgrading\", transport);\n                    if (!transport)\n                        return;\n                    Socket.priorWebsocketSuccess = \"websocket\" === transport.name;\n                    this.transport.pause(() => {\n                        if (failed)\n                            return;\n                        if (\"closed\" === this.readyState)\n                            return;\n                        cleanup();\n                        this.setTransport(transport);\n                        transport.send([{ type: \"upgrade\" }]);\n                        this.emitReserved(\"upgrade\", transport);\n                        transport = null;\n                        this.upgrading = false;\n                        this.flush();\n                    });\n                }\n                else {\n                    const err = new Error(\"probe error\");\n                    // @ts-ignore\n                    err.transport = transport.name;\n                    this.emitReserved(\"upgradeError\", err);\n                }\n            });\n        };\n        function freezeTransport() {\n            if (failed)\n                return;\n            // Any callback called by transport should be ignored since now\n            failed = true;\n            cleanup();\n            transport.close();\n            transport = null;\n        }\n        // Handle any error that happens while probing\n        const onerror = err => {\n            const error = new Error(\"probe error: \" + err);\n            // @ts-ignore\n            error.transport = transport.name;\n            freezeTransport();\n            this.emitReserved(\"upgradeError\", error);\n        };\n        function onTransportClose() {\n            onerror(\"transport closed\");\n        }\n        // When the socket is closed while we're probing\n        function onclose() {\n            onerror(\"socket closed\");\n        }\n        // When the socket is upgraded while we're probing\n        function onupgrade(to) {\n            if (transport && to.name !== transport.name) {\n                freezeTransport();\n            }\n        }\n        // Remove all listeners on the transport and on self\n        const cleanup = () => {\n            transport.removeListener(\"open\", onTransportOpen);\n            transport.removeListener(\"error\", onerror);\n            transport.removeListener(\"close\", onTransportClose);\n            this.off(\"close\", onclose);\n            this.off(\"upgrading\", onupgrade);\n        };\n        transport.once(\"open\", onTransportOpen);\n        transport.once(\"error\", onerror);\n        transport.once(\"close\", onTransportClose);\n        this.once(\"close\", onclose);\n        this.once(\"upgrading\", onupgrade);\n        transport.open();\n    }\n    /**\n     * Called when connection is deemed open.\n     *\n     * @api private\n     */\n    onOpen() {\n        this.readyState = \"open\";\n        Socket.priorWebsocketSuccess = \"websocket\" === this.transport.name;\n        this.emitReserved(\"open\");\n        this.flush();\n        // we check for `readyState` in case an `open`\n        // listener already closed the socket\n        if (\"open\" === this.readyState &&\n            this.opts.upgrade &&\n            this.transport.pause) {\n            let i = 0;\n            const l = this.upgrades.length;\n            for (; i < l; i++) {\n                this.probe(this.upgrades[i]);\n            }\n        }\n    }\n    /**\n     * Handles a packet.\n     *\n     * @api private\n     */\n    onPacket(packet) {\n        if (\"opening\" === this.readyState ||\n            \"open\" === this.readyState ||\n            \"closing\" === this.readyState) {\n            this.emitReserved(\"packet\", packet);\n            // Socket is live - any packet counts\n            this.emitReserved(\"heartbeat\");\n            switch (packet.type) {\n                case \"open\":\n                    this.onHandshake(JSON.parse(packet.data));\n                    break;\n                case \"ping\":\n                    this.resetPingTimeout();\n                    this.sendPacket(\"pong\");\n                    this.emitReserved(\"ping\");\n                    this.emitReserved(\"pong\");\n                    break;\n                case \"error\":\n                    const err = new Error(\"server error\");\n                    // @ts-ignore\n                    err.code = packet.data;\n                    this.onError(err);\n                    break;\n                case \"message\":\n                    this.emitReserved(\"data\", packet.data);\n                    this.emitReserved(\"message\", packet.data);\n                    break;\n            }\n        }\n        else {\n        }\n    }\n    /**\n     * Called upon handshake completion.\n     *\n     * @param {Object} data - handshake obj\n     * @api private\n     */\n    onHandshake(data) {\n        this.emitReserved(\"handshake\", data);\n        this.id = data.sid;\n        this.transport.query.sid = data.sid;\n        this.upgrades = this.filterUpgrades(data.upgrades);\n        this.pingInterval = data.pingInterval;\n        this.pingTimeout = data.pingTimeout;\n        this.maxPayload = data.maxPayload;\n        this.onOpen();\n        // In case open handler closes socket\n        if (\"closed\" === this.readyState)\n            return;\n        this.resetPingTimeout();\n    }\n    /**\n     * Sets and resets ping timeout timer based on server pings.\n     *\n     * @api private\n     */\n    resetPingTimeout() {\n        this.clearTimeoutFn(this.pingTimeoutTimer);\n        this.pingTimeoutTimer = this.setTimeoutFn(() => {\n            this.onClose(\"ping timeout\");\n        }, this.pingInterval + this.pingTimeout);\n        if (this.opts.autoUnref) {\n            this.pingTimeoutTimer.unref();\n        }\n    }\n    /**\n     * Called on `drain` event\n     *\n     * @api private\n     */\n    onDrain() {\n        this.writeBuffer.splice(0, this.prevBufferLen);\n        // setting prevBufferLen = 0 is very important\n        // for example, when upgrading, upgrade packet is sent over,\n        // and a nonzero prevBufferLen could cause problems on `drain`\n        this.prevBufferLen = 0;\n        if (0 === this.writeBuffer.length) {\n            this.emitReserved(\"drain\");\n        }\n        else {\n            this.flush();\n        }\n    }\n    /**\n     * Flush write buffers.\n     *\n     * @api private\n     */\n    flush() {\n        if (\"closed\" !== this.readyState &&\n            this.transport.writable &&\n            !this.upgrading &&\n            this.writeBuffer.length) {\n            const packets = this.getWritablePackets();\n            this.transport.send(packets);\n            // keep track of current length of writeBuffer\n            // splice writeBuffer and callbackBuffer on `drain`\n            this.prevBufferLen = packets.length;\n            this.emitReserved(\"flush\");\n        }\n    }\n    /**\n     * Ensure the encoded size of the writeBuffer is below the maxPayload value sent by the server (only for HTTP\n     * long-polling)\n     *\n     * @private\n     */\n    getWritablePackets() {\n        const shouldCheckPayloadSize = this.maxPayload &&\n            this.transport.name === \"polling\" &&\n            this.writeBuffer.length > 1;\n        if (!shouldCheckPayloadSize) {\n            return this.writeBuffer;\n        }\n        let payloadSize = 1; // first packet type\n        for (let i = 0; i < this.writeBuffer.length; i++) {\n            const data = this.writeBuffer[i].data;\n            if (data) {\n                payloadSize += byteLength(data);\n            }\n            if (i > 0 && payloadSize > this.maxPayload) {\n                return this.writeBuffer.slice(0, i);\n            }\n            payloadSize += 2; // separator + packet type\n        }\n        return this.writeBuffer;\n    }\n    /**\n     * Sends a message.\n     *\n     * @param {String} message.\n     * @param {Function} callback function.\n     * @param {Object} options.\n     * @return {Socket} for chaining.\n     * @api public\n     */\n    write(msg, options, fn) {\n        this.sendPacket(\"message\", msg, options, fn);\n        return this;\n    }\n    send(msg, options, fn) {\n        this.sendPacket(\"message\", msg, options, fn);\n        return this;\n    }\n    /**\n     * Sends a packet.\n     *\n     * @param {String} packet type.\n     * @param {String} data.\n     * @param {Object} options.\n     * @param {Function} callback function.\n     * @api private\n     */\n    sendPacket(type, data, options, fn) {\n        if (\"function\" === typeof data) {\n            fn = data;\n            data = undefined;\n        }\n        if (\"function\" === typeof options) {\n            fn = options;\n            options = null;\n        }\n        if (\"closing\" === this.readyState || \"closed\" === this.readyState) {\n            return;\n        }\n        options = options || {};\n        options.compress = false !== options.compress;\n        const packet = {\n            type: type,\n            data: data,\n            options: options\n        };\n        this.emitReserved(\"packetCreate\", packet);\n        this.writeBuffer.push(packet);\n        if (fn)\n            this.once(\"flush\", fn);\n        this.flush();\n    }\n    /**\n     * Closes the connection.\n     *\n     * @api public\n     */\n    close() {\n        const close = () => {\n            this.onClose(\"forced close\");\n            this.transport.close();\n        };\n        const cleanupAndClose = () => {\n            this.off(\"upgrade\", cleanupAndClose);\n            this.off(\"upgradeError\", cleanupAndClose);\n            close();\n        };\n        const waitForUpgrade = () => {\n            // wait for upgrade to finish since we can't send packets while pausing a transport\n            this.once(\"upgrade\", cleanupAndClose);\n            this.once(\"upgradeError\", cleanupAndClose);\n        };\n        if (\"opening\" === this.readyState || \"open\" === this.readyState) {\n            this.readyState = \"closing\";\n            if (this.writeBuffer.length) {\n                this.once(\"drain\", () => {\n                    if (this.upgrading) {\n                        waitForUpgrade();\n                    }\n                    else {\n                        close();\n                    }\n                });\n            }\n            else if (this.upgrading) {\n                waitForUpgrade();\n            }\n            else {\n                close();\n            }\n        }\n        return this;\n    }\n    /**\n     * Called upon transport error\n     *\n     * @api private\n     */\n    onError(err) {\n        Socket.priorWebsocketSuccess = false;\n        this.emitReserved(\"error\", err);\n        this.onClose(\"transport error\", err);\n    }\n    /**\n     * Called upon transport close.\n     *\n     * @api private\n     */\n    onClose(reason, description) {\n        if (\"opening\" === this.readyState ||\n            \"open\" === this.readyState ||\n            \"closing\" === this.readyState) {\n            // clear timers\n            this.clearTimeoutFn(this.pingTimeoutTimer);\n            // stop event from firing again for transport\n            this.transport.removeAllListeners(\"close\");\n            // ensure transport won't stay open\n            this.transport.close();\n            // ignore further transport communication\n            this.transport.removeAllListeners();\n            if (typeof removeEventListener === \"function\") {\n                removeEventListener(\"offline\", this.offlineEventListener, false);\n            }\n            // set ready state\n            this.readyState = \"closed\";\n            // clear session id\n            this.id = null;\n            // emit close event\n            this.emitReserved(\"close\", reason, description);\n            // clean buffers after, so users can still\n            // grab the buffers on `close` event\n            this.writeBuffer = [];\n            this.prevBufferLen = 0;\n        }\n    }\n    /**\n     * Filters upgrades, returning only those matching client transports.\n     *\n     * @param {Array} server upgrades\n     * @api private\n     *\n     */\n    filterUpgrades(upgrades) {\n        const filteredUpgrades = [];\n        let i = 0;\n        const j = upgrades.length;\n        for (; i < j; i++) {\n            if (~this.transports.indexOf(upgrades[i]))\n                filteredUpgrades.push(upgrades[i]);\n        }\n        return filteredUpgrades;\n    }\n}\nSocket.protocol = protocol;\n","import { Socket } from \"./socket.js\";\nexport { Socket };\nexport const protocol = Socket.protocol;\nexport { Transport } from \"./transport.js\";\nexport { transports } from \"./transports/index.js\";\nexport { installTimerFunctions } from \"./util.js\";\nexport { parse } from \"./contrib/parseuri.js\";\n","import { parse } from \"engine.io-client\";\n/**\n * URL parser.\n *\n * @param uri - url\n * @param path - the request path of the connection\n * @param loc - An object meant to mimic window.location.\n *        Defaults to window.location.\n * @public\n */\nexport function url(uri, path = \"\", loc) {\n    let obj = uri;\n    // default to window.location\n    loc = loc || (typeof location !== \"undefined\" && location);\n    if (null == uri)\n        uri = loc.protocol + \"//\" + loc.host;\n    // relative path support\n    if (typeof uri === \"string\") {\n        if (\"/\" === uri.charAt(0)) {\n            if (\"/\" === uri.charAt(1)) {\n                uri = loc.protocol + uri;\n            }\n            else {\n                uri = loc.host + uri;\n            }\n        }\n        if (!/^(https?|wss?):\\/\\//.test(uri)) {\n            if (\"undefined\" !== typeof loc) {\n                uri = loc.protocol + \"//\" + uri;\n            }\n            else {\n                uri = \"https://\" + uri;\n            }\n        }\n        // parse\n        obj = parse(uri);\n    }\n    // make sure we treat `localhost:80` and `localhost` equally\n    if (!obj.port) {\n        if (/^(http|ws)$/.test(obj.protocol)) {\n            obj.port = \"80\";\n        }\n        else if (/^(http|ws)s$/.test(obj.protocol)) {\n            obj.port = \"443\";\n        }\n    }\n    obj.path = obj.path || \"/\";\n    const ipv6 = obj.host.indexOf(\":\") !== -1;\n    const host = ipv6 ? \"[\" + obj.host + \"]\" : obj.host;\n    // define unique id\n    obj.id = obj.protocol + \"://\" + host + \":\" + obj.port + path;\n    // define href\n    obj.href =\n        obj.protocol +\n            \"://\" +\n            host +\n            (loc && loc.port === obj.port ? \"\" : \":\" + obj.port);\n    return obj;\n}\n","const withNativeArrayBuffer = typeof ArrayBuffer === \"function\";\nconst isView = (obj) => {\n    return typeof ArrayBuffer.isView === \"function\"\n        ? ArrayBuffer.isView(obj)\n        : obj.buffer instanceof ArrayBuffer;\n};\nconst toString = Object.prototype.toString;\nconst withNativeBlob = typeof Blob === \"function\" ||\n    (typeof Blob !== \"undefined\" &&\n        toString.call(Blob) === \"[object BlobConstructor]\");\nconst withNativeFile = typeof File === \"function\" ||\n    (typeof File !== \"undefined\" &&\n        toString.call(File) === \"[object FileConstructor]\");\n/**\n * Returns true if obj is a Buffer, an ArrayBuffer, a Blob or a File.\n *\n * @private\n */\nexport function isBinary(obj) {\n    return ((withNativeArrayBuffer && (obj instanceof ArrayBuffer || isView(obj))) ||\n        (withNativeBlob && obj instanceof Blob) ||\n        (withNativeFile && obj instanceof File));\n}\nexport function hasBinary(obj, toJSON) {\n    if (!obj || typeof obj !== \"object\") {\n        return false;\n    }\n    if (Array.isArray(obj)) {\n        for (let i = 0, l = obj.length; i < l; i++) {\n            if (hasBinary(obj[i])) {\n                return true;\n            }\n        }\n        return false;\n    }\n    if (isBinary(obj)) {\n        return true;\n    }\n    if (obj.toJSON &&\n        typeof obj.toJSON === \"function\" &&\n        arguments.length === 1) {\n        return hasBinary(obj.toJSON(), true);\n    }\n    for (const key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key) && hasBinary(obj[key])) {\n            return true;\n        }\n    }\n    return false;\n}\n","import { isBinary } from \"./is-binary.js\";\n/**\n * Replaces every Buffer | ArrayBuffer | Blob | File in packet with a numbered placeholder.\n *\n * @param {Object} packet - socket.io event packet\n * @return {Object} with deconstructed packet and list of buffers\n * @public\n */\nexport function deconstructPacket(packet) {\n    const buffers = [];\n    const packetData = packet.data;\n    const pack = packet;\n    pack.data = _deconstructPacket(packetData, buffers);\n    pack.attachments = buffers.length; // number of binary 'attachments'\n    return { packet: pack, buffers: buffers };\n}\nfunction _deconstructPacket(data, buffers) {\n    if (!data)\n        return data;\n    if (isBinary(data)) {\n        const placeholder = { _placeholder: true, num: buffers.length };\n        buffers.push(data);\n        return placeholder;\n    }\n    else if (Array.isArray(data)) {\n        const newData = new Array(data.length);\n        for (let i = 0; i < data.length; i++) {\n            newData[i] = _deconstructPacket(data[i], buffers);\n        }\n        return newData;\n    }\n    else if (typeof data === \"object\" && !(data instanceof Date)) {\n        const newData = {};\n        for (const key in data) {\n            if (Object.prototype.hasOwnProperty.call(data, key)) {\n                newData[key] = _deconstructPacket(data[key], buffers);\n            }\n        }\n        return newData;\n    }\n    return data;\n}\n/**\n * Reconstructs a binary packet from its placeholder packet and buffers\n *\n * @param {Object} packet - event packet with placeholders\n * @param {Array} buffers - binary buffers to put in placeholder positions\n * @return {Object} reconstructed packet\n * @public\n */\nexport function reconstructPacket(packet, buffers) {\n    packet.data = _reconstructPacket(packet.data, buffers);\n    packet.attachments = undefined; // no longer useful\n    return packet;\n}\nfunction _reconstructPacket(data, buffers) {\n    if (!data)\n        return data;\n    if (data && data._placeholder === true) {\n        const isIndexValid = typeof data.num === \"number\" &&\n            data.num >= 0 &&\n            data.num < buffers.length;\n        if (isIndexValid) {\n            return buffers[data.num]; // appropriate buffer (should be natural order anyway)\n        }\n        else {\n            throw new Error(\"illegal attachments\");\n        }\n    }\n    else if (Array.isArray(data)) {\n        for (let i = 0; i < data.length; i++) {\n            data[i] = _reconstructPacket(data[i], buffers);\n        }\n    }\n    else if (typeof data === \"object\") {\n        for (const key in data) {\n            if (Object.prototype.hasOwnProperty.call(data, key)) {\n                data[key] = _reconstructPacket(data[key], buffers);\n            }\n        }\n    }\n    return data;\n}\n","import { Emitter } from \"@socket.io/component-emitter\";\nimport { deconstructPacket, reconstructPacket } from \"./binary.js\";\nimport { isBinary, hasBinary } from \"./is-binary.js\";\n/**\n * Protocol version.\n *\n * @public\n */\nexport const protocol = 5;\nexport var PacketType;\n(function (PacketType) {\n    PacketType[PacketType[\"CONNECT\"] = 0] = \"CONNECT\";\n    PacketType[PacketType[\"DISCONNECT\"] = 1] = \"DISCONNECT\";\n    PacketType[PacketType[\"EVENT\"] = 2] = \"EVENT\";\n    PacketType[PacketType[\"ACK\"] = 3] = \"ACK\";\n    PacketType[PacketType[\"CONNECT_ERROR\"] = 4] = \"CONNECT_ERROR\";\n    PacketType[PacketType[\"BINARY_EVENT\"] = 5] = \"BINARY_EVENT\";\n    PacketType[PacketType[\"BINARY_ACK\"] = 6] = \"BINARY_ACK\";\n})(PacketType || (PacketType = {}));\n/**\n * A socket.io Encoder instance\n */\nexport class Encoder {\n    /**\n     * Encoder constructor\n     *\n     * @param {function} replacer - custom replacer to pass down to JSON.parse\n     */\n    constructor(replacer) {\n        this.replacer = replacer;\n    }\n    /**\n     * Encode a packet as a single string if non-binary, or as a\n     * buffer sequence, depending on packet type.\n     *\n     * @param {Object} obj - packet object\n     */\n    encode(obj) {\n        if (obj.type === PacketType.EVENT || obj.type === PacketType.ACK) {\n            if (hasBinary(obj)) {\n                obj.type =\n                    obj.type === PacketType.EVENT\n                        ? PacketType.BINARY_EVENT\n                        : PacketType.BINARY_ACK;\n                return this.encodeAsBinary(obj);\n            }\n        }\n        return [this.encodeAsString(obj)];\n    }\n    /**\n     * Encode packet as string.\n     */\n    encodeAsString(obj) {\n        // first is type\n        let str = \"\" + obj.type;\n        // attachments if we have them\n        if (obj.type === PacketType.BINARY_EVENT ||\n            obj.type === PacketType.BINARY_ACK) {\n            str += obj.attachments + \"-\";\n        }\n        // if we have a namespace other than `/`\n        // we append it followed by a comma `,`\n        if (obj.nsp && \"/\" !== obj.nsp) {\n            str += obj.nsp + \",\";\n        }\n        // immediately followed by the id\n        if (null != obj.id) {\n            str += obj.id;\n        }\n        // json data\n        if (null != obj.data) {\n            str += JSON.stringify(obj.data, this.replacer);\n        }\n        return str;\n    }\n    /**\n     * Encode packet as 'buffer sequence' by removing blobs, and\n     * deconstructing packet into object with placeholders and\n     * a list of buffers.\n     */\n    encodeAsBinary(obj) {\n        const deconstruction = deconstructPacket(obj);\n        const pack = this.encodeAsString(deconstruction.packet);\n        const buffers = deconstruction.buffers;\n        buffers.unshift(pack); // add packet info to beginning of data list\n        return buffers; // write all the buffers\n    }\n}\n/**\n * A socket.io Decoder instance\n *\n * @return {Object} decoder\n */\nexport class Decoder extends Emitter {\n    /**\n     * Decoder constructor\n     *\n     * @param {function} reviver - custom reviver to pass down to JSON.stringify\n     */\n    constructor(reviver) {\n        super();\n        this.reviver = reviver;\n    }\n    /**\n     * Decodes an encoded packet string into packet JSON.\n     *\n     * @param {String} obj - encoded packet\n     */\n    add(obj) {\n        let packet;\n        if (typeof obj === \"string\") {\n            if (this.reconstructor) {\n                throw new Error(\"got plaintext data when reconstructing a packet\");\n            }\n            packet = this.decodeString(obj);\n            if (packet.type === PacketType.BINARY_EVENT ||\n                packet.type === PacketType.BINARY_ACK) {\n                // binary packet's json\n                this.reconstructor = new BinaryReconstructor(packet);\n                // no attachments, labeled binary but no binary data to follow\n                if (packet.attachments === 0) {\n                    super.emitReserved(\"decoded\", packet);\n                }\n            }\n            else {\n                // non-binary full packet\n                super.emitReserved(\"decoded\", packet);\n            }\n        }\n        else if (isBinary(obj) || obj.base64) {\n            // raw binary data\n            if (!this.reconstructor) {\n                throw new Error(\"got binary data when not reconstructing a packet\");\n            }\n            else {\n                packet = this.reconstructor.takeBinaryData(obj);\n                if (packet) {\n                    // received final buffer\n                    this.reconstructor = null;\n                    super.emitReserved(\"decoded\", packet);\n                }\n            }\n        }\n        else {\n            throw new Error(\"Unknown type: \" + obj);\n        }\n    }\n    /**\n     * Decode a packet String (JSON data)\n     *\n     * @param {String} str\n     * @return {Object} packet\n     */\n    decodeString(str) {\n        let i = 0;\n        // look up type\n        const p = {\n            type: Number(str.charAt(0)),\n        };\n        if (PacketType[p.type] === undefined) {\n            throw new Error(\"unknown packet type \" + p.type);\n        }\n        // look up attachments if type binary\n        if (p.type === PacketType.BINARY_EVENT ||\n            p.type === PacketType.BINARY_ACK) {\n            const start = i + 1;\n            while (str.charAt(++i) !== \"-\" && i != str.length) { }\n            const buf = str.substring(start, i);\n            if (buf != Number(buf) || str.charAt(i) !== \"-\") {\n                throw new Error(\"Illegal attachments\");\n            }\n            p.attachments = Number(buf);\n        }\n        // look up namespace (if any)\n        if (\"/\" === str.charAt(i + 1)) {\n            const start = i + 1;\n            while (++i) {\n                const c = str.charAt(i);\n                if (\",\" === c)\n                    break;\n                if (i === str.length)\n                    break;\n            }\n            p.nsp = str.substring(start, i);\n        }\n        else {\n            p.nsp = \"/\";\n        }\n        // look up id\n        const next = str.charAt(i + 1);\n        if (\"\" !== next && Number(next) == next) {\n            const start = i + 1;\n            while (++i) {\n                const c = str.charAt(i);\n                if (null == c || Number(c) != c) {\n                    --i;\n                    break;\n                }\n                if (i === str.length)\n                    break;\n            }\n            p.id = Number(str.substring(start, i + 1));\n        }\n        // look up json data\n        if (str.charAt(++i)) {\n            const payload = this.tryParse(str.substr(i));\n            if (Decoder.isPayloadValid(p.type, payload)) {\n                p.data = payload;\n            }\n            else {\n                throw new Error(\"invalid payload\");\n            }\n        }\n        return p;\n    }\n    tryParse(str) {\n        try {\n            return JSON.parse(str, this.reviver);\n        }\n        catch (e) {\n            return false;\n        }\n    }\n    static isPayloadValid(type, payload) {\n        switch (type) {\n            case PacketType.CONNECT:\n                return typeof payload === \"object\";\n            case PacketType.DISCONNECT:\n                return payload === undefined;\n            case PacketType.CONNECT_ERROR:\n                return typeof payload === \"string\" || typeof payload === \"object\";\n            case PacketType.EVENT:\n            case PacketType.BINARY_EVENT:\n                return Array.isArray(payload) && payload.length > 0;\n            case PacketType.ACK:\n            case PacketType.BINARY_ACK:\n                return Array.isArray(payload);\n        }\n    }\n    /**\n     * Deallocates a parser's resources\n     */\n    destroy() {\n        if (this.reconstructor) {\n            this.reconstructor.finishedReconstruction();\n        }\n    }\n}\n/**\n * A manager of a binary event's 'buffer sequence'. Should\n * be constructed whenever a packet of type BINARY_EVENT is\n * decoded.\n *\n * @param {Object} packet\n * @return {BinaryReconstructor} initialized reconstructor\n */\nclass BinaryReconstructor {\n    constructor(packet) {\n        this.packet = packet;\n        this.buffers = [];\n        this.reconPack = packet;\n    }\n    /**\n     * Method to be called when binary data received from connection\n     * after a BINARY_EVENT packet.\n     *\n     * @param {Buffer | ArrayBuffer} binData - the raw binary data received\n     * @return {null | Object} returns null if more binary data is expected or\n     *   a reconstructed packet object if all buffers have been received.\n     */\n    takeBinaryData(binData) {\n        this.buffers.push(binData);\n        if (this.buffers.length === this.reconPack.attachments) {\n            // done with buffer list\n            const packet = reconstructPacket(this.reconPack, this.buffers);\n            this.finishedReconstruction();\n            return packet;\n        }\n        return null;\n    }\n    /**\n     * Cleans up binary packet reconstruction variables.\n     */\n    finishedReconstruction() {\n        this.reconPack = null;\n        this.buffers = [];\n    }\n}\n","export function on(obj, ev, fn) {\n    obj.on(ev, fn);\n    return function subDestroy() {\n        obj.off(ev, fn);\n    };\n}\n","import { PacketType } from \"socket.io-parser\";\nimport { on } from \"./on.js\";\nimport { Emitter, } from \"@socket.io/component-emitter\";\n/**\n * Internal events.\n * These events can't be emitted by the user.\n */\nconst RESERVED_EVENTS = Object.freeze({\n    connect: 1,\n    connect_error: 1,\n    disconnect: 1,\n    disconnecting: 1,\n    // EventEmitter reserved events: https://nodejs.org/api/events.html#events_event_newlistener\n    newListener: 1,\n    removeListener: 1,\n});\nexport class Socket extends Emitter {\n    /**\n     * `Socket` constructor.\n     *\n     * @public\n     */\n    constructor(io, nsp, opts) {\n        super();\n        this.connected = false;\n        this.receiveBuffer = [];\n        this.sendBuffer = [];\n        this.ids = 0;\n        this.acks = {};\n        this.flags = {};\n        this.io = io;\n        this.nsp = nsp;\n        if (opts && opts.auth) {\n            this.auth = opts.auth;\n        }\n        if (this.io._autoConnect)\n            this.open();\n    }\n    /**\n     * Whether the socket is currently disconnected\n     */\n    get disconnected() {\n        return !this.connected;\n    }\n    /**\n     * Subscribe to open, close and packet events\n     *\n     * @private\n     */\n    subEvents() {\n        if (this.subs)\n            return;\n        const io = this.io;\n        this.subs = [\n            on(io, \"open\", this.onopen.bind(this)),\n            on(io, \"packet\", this.onpacket.bind(this)),\n            on(io, \"error\", this.onerror.bind(this)),\n            on(io, \"close\", this.onclose.bind(this)),\n        ];\n    }\n    /**\n     * Whether the Socket will try to reconnect when its Manager connects or reconnects\n     */\n    get active() {\n        return !!this.subs;\n    }\n    /**\n     * \"Opens\" the socket.\n     *\n     * @public\n     */\n    connect() {\n        if (this.connected)\n            return this;\n        this.subEvents();\n        if (!this.io[\"_reconnecting\"])\n            this.io.open(); // ensure open\n        if (\"open\" === this.io._readyState)\n            this.onopen();\n        return this;\n    }\n    /**\n     * Alias for connect()\n     */\n    open() {\n        return this.connect();\n    }\n    /**\n     * Sends a `message` event.\n     *\n     * @return self\n     * @public\n     */\n    send(...args) {\n        args.unshift(\"message\");\n        this.emit.apply(this, args);\n        return this;\n    }\n    /**\n     * Override `emit`.\n     * If the event is in `events`, it's emitted normally.\n     *\n     * @return self\n     * @public\n     */\n    emit(ev, ...args) {\n        if (RESERVED_EVENTS.hasOwnProperty(ev)) {\n            throw new Error('\"' + ev.toString() + '\" is a reserved event name');\n        }\n        args.unshift(ev);\n        const packet = {\n            type: PacketType.EVENT,\n            data: args,\n        };\n        packet.options = {};\n        packet.options.compress = this.flags.compress !== false;\n        // event ack callback\n        if (\"function\" === typeof args[args.length - 1]) {\n            const id = this.ids++;\n            const ack = args.pop();\n            this._registerAckCallback(id, ack);\n            packet.id = id;\n        }\n        const isTransportWritable = this.io.engine &&\n            this.io.engine.transport &&\n            this.io.engine.transport.writable;\n        const discardPacket = this.flags.volatile && (!isTransportWritable || !this.connected);\n        if (discardPacket) {\n        }\n        else if (this.connected) {\n            this.notifyOutgoingListeners(packet);\n            this.packet(packet);\n        }\n        else {\n            this.sendBuffer.push(packet);\n        }\n        this.flags = {};\n        return this;\n    }\n    /**\n     * @private\n     */\n    _registerAckCallback(id, ack) {\n        const timeout = this.flags.timeout;\n        if (timeout === undefined) {\n            this.acks[id] = ack;\n            return;\n        }\n        // @ts-ignore\n        const timer = this.io.setTimeoutFn(() => {\n            delete this.acks[id];\n            for (let i = 0; i < this.sendBuffer.length; i++) {\n                if (this.sendBuffer[i].id === id) {\n                    this.sendBuffer.splice(i, 1);\n                }\n            }\n            ack.call(this, new Error(\"operation has timed out\"));\n        }, timeout);\n        this.acks[id] = (...args) => {\n            // @ts-ignore\n            this.io.clearTimeoutFn(timer);\n            ack.apply(this, [null, ...args]);\n        };\n    }\n    /**\n     * Sends a packet.\n     *\n     * @param packet\n     * @private\n     */\n    packet(packet) {\n        packet.nsp = this.nsp;\n        this.io._packet(packet);\n    }\n    /**\n     * Called upon engine `open`.\n     *\n     * @private\n     */\n    onopen() {\n        if (typeof this.auth == \"function\") {\n            this.auth((data) => {\n                this.packet({ type: PacketType.CONNECT, data });\n            });\n        }\n        else {\n            this.packet({ type: PacketType.CONNECT, data: this.auth });\n        }\n    }\n    /**\n     * Called upon engine or manager `error`.\n     *\n     * @param err\n     * @private\n     */\n    onerror(err) {\n        if (!this.connected) {\n            this.emitReserved(\"connect_error\", err);\n        }\n    }\n    /**\n     * Called upon engine `close`.\n     *\n     * @param reason\n     * @param description\n     * @private\n     */\n    onclose(reason, description) {\n        this.connected = false;\n        delete this.id;\n        this.emitReserved(\"disconnect\", reason, description);\n    }\n    /**\n     * Called with socket packet.\n     *\n     * @param packet\n     * @private\n     */\n    onpacket(packet) {\n        const sameNamespace = packet.nsp === this.nsp;\n        if (!sameNamespace)\n            return;\n        switch (packet.type) {\n            case PacketType.CONNECT:\n                if (packet.data && packet.data.sid) {\n                    const id = packet.data.sid;\n                    this.onconnect(id);\n                }\n                else {\n                    this.emitReserved(\"connect_error\", new Error(\"It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)\"));\n                }\n                break;\n            case PacketType.EVENT:\n            case PacketType.BINARY_EVENT:\n                this.onevent(packet);\n                break;\n            case PacketType.ACK:\n            case PacketType.BINARY_ACK:\n                this.onack(packet);\n                break;\n            case PacketType.DISCONNECT:\n                this.ondisconnect();\n                break;\n            case PacketType.CONNECT_ERROR:\n                this.destroy();\n                const err = new Error(packet.data.message);\n                // @ts-ignore\n                err.data = packet.data.data;\n                this.emitReserved(\"connect_error\", err);\n                break;\n        }\n    }\n    /**\n     * Called upon a server event.\n     *\n     * @param packet\n     * @private\n     */\n    onevent(packet) {\n        const args = packet.data || [];\n        if (null != packet.id) {\n            args.push(this.ack(packet.id));\n        }\n        if (this.connected) {\n            this.emitEvent(args);\n        }\n        else {\n            this.receiveBuffer.push(Object.freeze(args));\n        }\n    }\n    emitEvent(args) {\n        if (this._anyListeners && this._anyListeners.length) {\n            const listeners = this._anyListeners.slice();\n            for (const listener of listeners) {\n                listener.apply(this, args);\n            }\n        }\n        super.emit.apply(this, args);\n    }\n    /**\n     * Produces an ack callback to emit with an event.\n     *\n     * @private\n     */\n    ack(id) {\n        const self = this;\n        let sent = false;\n        return function (...args) {\n            // prevent double callbacks\n            if (sent)\n                return;\n            sent = true;\n            self.packet({\n                type: PacketType.ACK,\n                id: id,\n                data: args,\n            });\n        };\n    }\n    /**\n     * Called upon a server acknowlegement.\n     *\n     * @param packet\n     * @private\n     */\n    onack(packet) {\n        const ack = this.acks[packet.id];\n        if (\"function\" === typeof ack) {\n            ack.apply(this, packet.data);\n            delete this.acks[packet.id];\n        }\n        else {\n        }\n    }\n    /**\n     * Called upon server connect.\n     *\n     * @private\n     */\n    onconnect(id) {\n        this.id = id;\n        this.connected = true;\n        this.emitBuffered();\n        this.emitReserved(\"connect\");\n    }\n    /**\n     * Emit buffered events (received and emitted).\n     *\n     * @private\n     */\n    emitBuffered() {\n        this.receiveBuffer.forEach((args) => this.emitEvent(args));\n        this.receiveBuffer = [];\n        this.sendBuffer.forEach((packet) => {\n            this.notifyOutgoingListeners(packet);\n            this.packet(packet);\n        });\n        this.sendBuffer = [];\n    }\n    /**\n     * Called upon server disconnect.\n     *\n     * @private\n     */\n    ondisconnect() {\n        this.destroy();\n        this.onclose(\"io server disconnect\");\n    }\n    /**\n     * Called upon forced client/server side disconnections,\n     * this method ensures the manager stops tracking us and\n     * that reconnections don't get triggered for this.\n     *\n     * @private\n     */\n    destroy() {\n        if (this.subs) {\n            // clean subscriptions to avoid reconnections\n            this.subs.forEach((subDestroy) => subDestroy());\n            this.subs = undefined;\n        }\n        this.io[\"_destroy\"](this);\n    }\n    /**\n     * Disconnects the socket manually.\n     *\n     * @return self\n     * @public\n     */\n    disconnect() {\n        if (this.connected) {\n            this.packet({ type: PacketType.DISCONNECT });\n        }\n        // remove socket from pool\n        this.destroy();\n        if (this.connected) {\n            // fire events\n            this.onclose(\"io client disconnect\");\n        }\n        return this;\n    }\n    /**\n     * Alias for disconnect()\n     *\n     * @return self\n     * @public\n     */\n    close() {\n        return this.disconnect();\n    }\n    /**\n     * Sets the compress flag.\n     *\n     * @param compress - if `true`, compresses the sending data\n     * @return self\n     * @public\n     */\n    compress(compress) {\n        this.flags.compress = compress;\n        return this;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the event message will be dropped when this socket is not\n     * ready to send messages.\n     *\n     * @returns self\n     * @public\n     */\n    get volatile() {\n        this.flags.volatile = true;\n        return this;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the callback will be called with an error when the\n     * given number of milliseconds have elapsed without an acknowledgement from the server:\n     *\n     * ```\n     * socket.timeout(5000).emit(\"my-event\", (err) => {\n     *   if (err) {\n     *     // the server did not acknowledge the event in the given delay\n     *   }\n     * });\n     * ```\n     *\n     * @returns self\n     * @public\n     */\n    timeout(timeout) {\n        this.flags.timeout = timeout;\n        return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback.\n     *\n     * @param listener\n     * @public\n     */\n    onAny(listener) {\n        this._anyListeners = this._anyListeners || [];\n        this._anyListeners.push(listener);\n        return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback. The listener is added to the beginning of the listeners array.\n     *\n     * @param listener\n     * @public\n     */\n    prependAny(listener) {\n        this._anyListeners = this._anyListeners || [];\n        this._anyListeners.unshift(listener);\n        return this;\n    }\n    /**\n     * Removes the listener that will be fired when any event is emitted.\n     *\n     * @param listener\n     * @public\n     */\n    offAny(listener) {\n        if (!this._anyListeners) {\n            return this;\n        }\n        if (listener) {\n            const listeners = this._anyListeners;\n            for (let i = 0; i < listeners.length; i++) {\n                if (listener === listeners[i]) {\n                    listeners.splice(i, 1);\n                    return this;\n                }\n            }\n        }\n        else {\n            this._anyListeners = [];\n        }\n        return this;\n    }\n    /**\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n     * e.g. to remove listeners.\n     *\n     * @public\n     */\n    listenersAny() {\n        return this._anyListeners || [];\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback.\n     *\n     * @param listener\n     *\n     * <pre><code>\n     *\n     * socket.onAnyOutgoing((event, ...args) => {\n     *   console.log(event);\n     * });\n     *\n     * </pre></code>\n     *\n     * @public\n     */\n    onAnyOutgoing(listener) {\n        this._anyOutgoingListeners = this._anyOutgoingListeners || [];\n        this._anyOutgoingListeners.push(listener);\n        return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback. The listener is added to the beginning of the listeners array.\n     *\n     * @param listener\n     *\n     * <pre><code>\n     *\n     * socket.prependAnyOutgoing((event, ...args) => {\n     *   console.log(event);\n     * });\n     *\n     * </pre></code>\n     *\n     * @public\n     */\n    prependAnyOutgoing(listener) {\n        this._anyOutgoingListeners = this._anyOutgoingListeners || [];\n        this._anyOutgoingListeners.unshift(listener);\n        return this;\n    }\n    /**\n     * Removes the listener that will be fired when any event is emitted.\n     *\n     * @param listener\n     *\n     * <pre><code>\n     *\n     * const handler = (event, ...args) => {\n     *   console.log(event);\n     * }\n     *\n     * socket.onAnyOutgoing(handler);\n     *\n     * // then later\n     * socket.offAnyOutgoing(handler);\n     *\n     * </pre></code>\n     *\n     * @public\n     */\n    offAnyOutgoing(listener) {\n        if (!this._anyOutgoingListeners) {\n            return this;\n        }\n        if (listener) {\n            const listeners = this._anyOutgoingListeners;\n            for (let i = 0; i < listeners.length; i++) {\n                if (listener === listeners[i]) {\n                    listeners.splice(i, 1);\n                    return this;\n                }\n            }\n        }\n        else {\n            this._anyOutgoingListeners = [];\n        }\n        return this;\n    }\n    /**\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n     * e.g. to remove listeners.\n     *\n     * @public\n     */\n    listenersAnyOutgoing() {\n        return this._anyOutgoingListeners || [];\n    }\n    /**\n     * Notify the listeners for each packet sent\n     *\n     * @param packet\n     *\n     * @private\n     */\n    notifyOutgoingListeners(packet) {\n        if (this._anyOutgoingListeners && this._anyOutgoingListeners.length) {\n            const listeners = this._anyOutgoingListeners.slice();\n            for (const listener of listeners) {\n                listener.apply(this, packet.data);\n            }\n        }\n    }\n}\n","/**\n * Initialize backoff timer with `opts`.\n *\n * - `min` initial timeout in milliseconds [100]\n * - `max` max timeout [10000]\n * - `jitter` [0]\n * - `factor` [2]\n *\n * @param {Object} opts\n * @api public\n */\nexport function Backoff(opts) {\n    opts = opts || {};\n    this.ms = opts.min || 100;\n    this.max = opts.max || 10000;\n    this.factor = opts.factor || 2;\n    this.jitter = opts.jitter > 0 && opts.jitter <= 1 ? opts.jitter : 0;\n    this.attempts = 0;\n}\n/**\n * Return the backoff duration.\n *\n * @return {Number}\n * @api public\n */\nBackoff.prototype.duration = function () {\n    var ms = this.ms * Math.pow(this.factor, this.attempts++);\n    if (this.jitter) {\n        var rand = Math.random();\n        var deviation = Math.floor(rand * this.jitter * ms);\n        ms = (Math.floor(rand * 10) & 1) == 0 ? ms - deviation : ms + deviation;\n    }\n    return Math.min(ms, this.max) | 0;\n};\n/**\n * Reset the number of attempts.\n *\n * @api public\n */\nBackoff.prototype.reset = function () {\n    this.attempts = 0;\n};\n/**\n * Set the minimum duration\n *\n * @api public\n */\nBackoff.prototype.setMin = function (min) {\n    this.ms = min;\n};\n/**\n * Set the maximum duration\n *\n * @api public\n */\nBackoff.prototype.setMax = function (max) {\n    this.max = max;\n};\n/**\n * Set the jitter\n *\n * @api public\n */\nBackoff.prototype.setJitter = function (jitter) {\n    this.jitter = jitter;\n};\n","import { Socket as Engine, installTimerFunctions, } from \"engine.io-client\";\nimport { Socket } from \"./socket.js\";\nimport * as parser from \"socket.io-parser\";\nimport { on } from \"./on.js\";\nimport { Backoff } from \"./contrib/backo2.js\";\nimport { Emitter, } from \"@socket.io/component-emitter\";\nexport class Manager extends Emitter {\n    constructor(uri, opts) {\n        var _a;\n        super();\n        this.nsps = {};\n        this.subs = [];\n        if (uri && \"object\" === typeof uri) {\n            opts = uri;\n            uri = undefined;\n        }\n        opts = opts || {};\n        opts.path = opts.path || \"/socket.io\";\n        this.opts = opts;\n        installTimerFunctions(this, opts);\n        this.reconnection(opts.reconnection !== false);\n        this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);\n        this.reconnectionDelay(opts.reconnectionDelay || 1000);\n        this.reconnectionDelayMax(opts.reconnectionDelayMax || 5000);\n        this.randomizationFactor((_a = opts.randomizationFactor) !== null && _a !== void 0 ? _a : 0.5);\n        this.backoff = new Backoff({\n            min: this.reconnectionDelay(),\n            max: this.reconnectionDelayMax(),\n            jitter: this.randomizationFactor(),\n        });\n        this.timeout(null == opts.timeout ? 20000 : opts.timeout);\n        this._readyState = \"closed\";\n        this.uri = uri;\n        const _parser = opts.parser || parser;\n        this.encoder = new _parser.Encoder();\n        this.decoder = new _parser.Decoder();\n        this._autoConnect = opts.autoConnect !== false;\n        if (this._autoConnect)\n            this.open();\n    }\n    reconnection(v) {\n        if (!arguments.length)\n            return this._reconnection;\n        this._reconnection = !!v;\n        return this;\n    }\n    reconnectionAttempts(v) {\n        if (v === undefined)\n            return this._reconnectionAttempts;\n        this._reconnectionAttempts = v;\n        return this;\n    }\n    reconnectionDelay(v) {\n        var _a;\n        if (v === undefined)\n            return this._reconnectionDelay;\n        this._reconnectionDelay = v;\n        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMin(v);\n        return this;\n    }\n    randomizationFactor(v) {\n        var _a;\n        if (v === undefined)\n            return this._randomizationFactor;\n        this._randomizationFactor = v;\n        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setJitter(v);\n        return this;\n    }\n    reconnectionDelayMax(v) {\n        var _a;\n        if (v === undefined)\n            return this._reconnectionDelayMax;\n        this._reconnectionDelayMax = v;\n        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMax(v);\n        return this;\n    }\n    timeout(v) {\n        if (!arguments.length)\n            return this._timeout;\n        this._timeout = v;\n        return this;\n    }\n    /**\n     * Starts trying to reconnect if reconnection is enabled and we have not\n     * started reconnecting yet\n     *\n     * @private\n     */\n    maybeReconnectOnOpen() {\n        // Only try to reconnect if it's the first time we're connecting\n        if (!this._reconnecting &&\n            this._reconnection &&\n            this.backoff.attempts === 0) {\n            // keeps reconnection from firing twice for the same reconnection loop\n            this.reconnect();\n        }\n    }\n    /**\n     * Sets the current transport `socket`.\n     *\n     * @param {Function} fn - optional, callback\n     * @return self\n     * @public\n     */\n    open(fn) {\n        if (~this._readyState.indexOf(\"open\"))\n            return this;\n        this.engine = new Engine(this.uri, this.opts);\n        const socket = this.engine;\n        const self = this;\n        this._readyState = \"opening\";\n        this.skipReconnect = false;\n        // emit `open`\n        const openSubDestroy = on(socket, \"open\", function () {\n            self.onopen();\n            fn && fn();\n        });\n        // emit `error`\n        const errorSub = on(socket, \"error\", (err) => {\n            self.cleanup();\n            self._readyState = \"closed\";\n            this.emitReserved(\"error\", err);\n            if (fn) {\n                fn(err);\n            }\n            else {\n                // Only do this if there is no fn to handle the error\n                self.maybeReconnectOnOpen();\n            }\n        });\n        if (false !== this._timeout) {\n            const timeout = this._timeout;\n            if (timeout === 0) {\n                openSubDestroy(); // prevents a race condition with the 'open' event\n            }\n            // set timer\n            const timer = this.setTimeoutFn(() => {\n                openSubDestroy();\n                socket.close();\n                // @ts-ignore\n                socket.emit(\"error\", new Error(\"timeout\"));\n            }, timeout);\n            if (this.opts.autoUnref) {\n                timer.unref();\n            }\n            this.subs.push(function subDestroy() {\n                clearTimeout(timer);\n            });\n        }\n        this.subs.push(openSubDestroy);\n        this.subs.push(errorSub);\n        return this;\n    }\n    /**\n     * Alias for open()\n     *\n     * @return self\n     * @public\n     */\n    connect(fn) {\n        return this.open(fn);\n    }\n    /**\n     * Called upon transport open.\n     *\n     * @private\n     */\n    onopen() {\n        // clear old subs\n        this.cleanup();\n        // mark as open\n        this._readyState = \"open\";\n        this.emitReserved(\"open\");\n        // add new subs\n        const socket = this.engine;\n        this.subs.push(on(socket, \"ping\", this.onping.bind(this)), on(socket, \"data\", this.ondata.bind(this)), on(socket, \"error\", this.onerror.bind(this)), on(socket, \"close\", this.onclose.bind(this)), on(this.decoder, \"decoded\", this.ondecoded.bind(this)));\n    }\n    /**\n     * Called upon a ping.\n     *\n     * @private\n     */\n    onping() {\n        this.emitReserved(\"ping\");\n    }\n    /**\n     * Called with data.\n     *\n     * @private\n     */\n    ondata(data) {\n        try {\n            this.decoder.add(data);\n        }\n        catch (e) {\n            this.onclose(\"parse error\");\n        }\n    }\n    /**\n     * Called when parser fully decodes a packet.\n     *\n     * @private\n     */\n    ondecoded(packet) {\n        this.emitReserved(\"packet\", packet);\n    }\n    /**\n     * Called upon socket error.\n     *\n     * @private\n     */\n    onerror(err) {\n        this.emitReserved(\"error\", err);\n    }\n    /**\n     * Creates a new socket for the given `nsp`.\n     *\n     * @return {Socket}\n     * @public\n     */\n    socket(nsp, opts) {\n        let socket = this.nsps[nsp];\n        if (!socket) {\n            socket = new Socket(this, nsp, opts);\n            this.nsps[nsp] = socket;\n        }\n        return socket;\n    }\n    /**\n     * Called upon a socket close.\n     *\n     * @param socket\n     * @private\n     */\n    _destroy(socket) {\n        const nsps = Object.keys(this.nsps);\n        for (const nsp of nsps) {\n            const socket = this.nsps[nsp];\n            if (socket.active) {\n                return;\n            }\n        }\n        this._close();\n    }\n    /**\n     * Writes a packet.\n     *\n     * @param packet\n     * @private\n     */\n    _packet(packet) {\n        const encodedPackets = this.encoder.encode(packet);\n        for (let i = 0; i < encodedPackets.length; i++) {\n            this.engine.write(encodedPackets[i], packet.options);\n        }\n    }\n    /**\n     * Clean up transport subscriptions and packet buffer.\n     *\n     * @private\n     */\n    cleanup() {\n        this.subs.forEach((subDestroy) => subDestroy());\n        this.subs.length = 0;\n        this.decoder.destroy();\n    }\n    /**\n     * Close the current socket.\n     *\n     * @private\n     */\n    _close() {\n        this.skipReconnect = true;\n        this._reconnecting = false;\n        this.onclose(\"forced close\");\n        if (this.engine)\n            this.engine.close();\n    }\n    /**\n     * Alias for close()\n     *\n     * @private\n     */\n    disconnect() {\n        return this._close();\n    }\n    /**\n     * Called upon engine close.\n     *\n     * @private\n     */\n    onclose(reason, description) {\n        this.cleanup();\n        this.backoff.reset();\n        this._readyState = \"closed\";\n        this.emitReserved(\"close\", reason, description);\n        if (this._reconnection && !this.skipReconnect) {\n            this.reconnect();\n        }\n    }\n    /**\n     * Attempt a reconnection.\n     *\n     * @private\n     */\n    reconnect() {\n        if (this._reconnecting || this.skipReconnect)\n            return this;\n        const self = this;\n        if (this.backoff.attempts >= this._reconnectionAttempts) {\n            this.backoff.reset();\n            this.emitReserved(\"reconnect_failed\");\n            this._reconnecting = false;\n        }\n        else {\n            const delay = this.backoff.duration();\n            this._reconnecting = true;\n            const timer = this.setTimeoutFn(() => {\n                if (self.skipReconnect)\n                    return;\n                this.emitReserved(\"reconnect_attempt\", self.backoff.attempts);\n                // check again for the case socket closed in above events\n                if (self.skipReconnect)\n                    return;\n                self.open((err) => {\n                    if (err) {\n                        self._reconnecting = false;\n                        self.reconnect();\n                        this.emitReserved(\"reconnect_error\", err);\n                    }\n                    else {\n                        self.onreconnect();\n                    }\n                });\n            }, delay);\n            if (this.opts.autoUnref) {\n                timer.unref();\n            }\n            this.subs.push(function subDestroy() {\n                clearTimeout(timer);\n            });\n        }\n    }\n    /**\n     * Called upon successful reconnect.\n     *\n     * @private\n     */\n    onreconnect() {\n        const attempt = this.backoff.attempts;\n        this._reconnecting = false;\n        this.backoff.reset();\n        this.emitReserved(\"reconnect\", attempt);\n    }\n}\n","import { url } from \"./url.js\";\nimport { Manager } from \"./manager.js\";\nimport { Socket } from \"./socket.js\";\n/**\n * Managers cache.\n */\nconst cache = {};\nfunction lookup(uri, opts) {\n    if (typeof uri === \"object\") {\n        opts = uri;\n        uri = undefined;\n    }\n    opts = opts || {};\n    const parsed = url(uri, opts.path || \"/socket.io\");\n    const source = parsed.source;\n    const id = parsed.id;\n    const path = parsed.path;\n    const sameNamespace = cache[id] && path in cache[id][\"nsps\"];\n    const newConnection = opts.forceNew ||\n        opts[\"force new connection\"] ||\n        false === opts.multiplex ||\n        sameNamespace;\n    let io;\n    if (newConnection) {\n        io = new Manager(source, opts);\n    }\n    else {\n        if (!cache[id]) {\n            cache[id] = new Manager(source, opts);\n        }\n        io = cache[id];\n    }\n    if (parsed.query && !opts.query) {\n        opts.query = parsed.queryKey;\n    }\n    return io.socket(parsed.path, opts);\n}\n// so that \"lookup\" can be used both as a function (e.g. `io(...)`) and as a\n// namespace (e.g. `io.connect(...)`), for backward compatibility\nObject.assign(lookup, {\n    Manager,\n    Socket,\n    io: lookup,\n    connect: lookup,\n});\n/**\n * Protocol version.\n *\n * @public\n */\nexport { protocol } from \"socket.io-parser\";\n/**\n * Expose constructors for standalone build.\n *\n * @public\n */\nexport { Manager, Socket, lookup as io, lookup as connect, lookup as default, };\n","\"use strict\";\n(self[\"webpackChunk_N_E\"] = self[\"webpackChunk_N_E\"] || []).push([[367],{\n\n/***/ 9367:\n/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {\n\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"ZP\": function() { return /* binding */ esm_lookup; }\n});\n\n// UNUSED EXPORTS: Manager, Socket, connect, io, protocol\n\n// NAMESPACE OBJECT: ./node_modules/socket.io-parser/build/esm/index.js\nvar socket_io_parser_build_esm_namespaceObject = {};\n__webpack_require__.r(socket_io_parser_build_esm_namespaceObject);\n__webpack_require__.d(socket_io_parser_build_esm_namespaceObject, {\n  \"Decoder\": function() { return Decoder; },\n  \"Encoder\": function() { return Encoder; },\n  \"PacketType\": function() { return PacketType; },\n  \"protocol\": function() { return build_esm_protocol; }\n});\n\n;// CONCATENATED MODULE: ./node_modules/engine.io-parser/build/esm/commons.js\nconst PACKET_TYPES = Object.create(null); // no Map = no polyfill\nPACKET_TYPES[\"open\"] = \"0\";\nPACKET_TYPES[\"close\"] = \"1\";\nPACKET_TYPES[\"ping\"] = \"2\";\nPACKET_TYPES[\"pong\"] = \"3\";\nPACKET_TYPES[\"message\"] = \"4\";\nPACKET_TYPES[\"upgrade\"] = \"5\";\nPACKET_TYPES[\"noop\"] = \"6\";\nconst PACKET_TYPES_REVERSE = Object.create(null);\nObject.keys(PACKET_TYPES).forEach(key => {\n    PACKET_TYPES_REVERSE[PACKET_TYPES[key]] = key;\n});\nconst ERROR_PACKET = { type: \"error\", data: \"parser error\" };\n\n\n;// CONCATENATED MODULE: ./node_modules/engine.io-parser/build/esm/encodePacket.browser.js\n\nconst withNativeBlob = typeof Blob === \"function\" ||\n    (typeof Blob !== \"undefined\" &&\n        Object.prototype.toString.call(Blob) === \"[object BlobConstructor]\");\nconst withNativeArrayBuffer = typeof ArrayBuffer === \"function\";\n// ArrayBuffer.isView method is not defined in IE10\nconst isView = obj => {\n    return typeof ArrayBuffer.isView === \"function\"\n        ? ArrayBuffer.isView(obj)\n        : obj && obj.buffer instanceof ArrayBuffer;\n};\nconst encodePacket = ({ type, data }, supportsBinary, callback) => {\n    if (withNativeBlob && data instanceof Blob) {\n        if (supportsBinary) {\n            return callback(data);\n        }\n        else {\n            return encodeBlobAsBase64(data, callback);\n        }\n    }\n    else if (withNativeArrayBuffer &&\n        (data instanceof ArrayBuffer || isView(data))) {\n        if (supportsBinary) {\n            return callback(data);\n        }\n        else {\n            return encodeBlobAsBase64(new Blob([data]), callback);\n        }\n    }\n    // plain string\n    return callback(PACKET_TYPES[type] + (data || \"\"));\n};\nconst encodeBlobAsBase64 = (data, callback) => {\n    const fileReader = new FileReader();\n    fileReader.onload = function () {\n        const content = fileReader.result.split(\",\")[1];\n        callback(\"b\" + content);\n    };\n    return fileReader.readAsDataURL(data);\n};\n/* harmony default export */ var encodePacket_browser = (encodePacket);\n\n;// CONCATENATED MODULE: ./node_modules/engine.io-parser/build/esm/contrib/base64-arraybuffer.js\nconst chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n// Use a lookup table to find the index.\nconst lookup = typeof Uint8Array === 'undefined' ? [] : new Uint8Array(256);\nfor (let i = 0; i < chars.length; i++) {\n    lookup[chars.charCodeAt(i)] = i;\n}\nconst encode = (arraybuffer) => {\n    let bytes = new Uint8Array(arraybuffer), i, len = bytes.length, base64 = '';\n    for (i = 0; i < len; i += 3) {\n        base64 += chars[bytes[i] >> 2];\n        base64 += chars[((bytes[i] & 3) << 4) | (bytes[i + 1] >> 4)];\n        base64 += chars[((bytes[i + 1] & 15) << 2) | (bytes[i + 2] >> 6)];\n        base64 += chars[bytes[i + 2] & 63];\n    }\n    if (len % 3 === 2) {\n        base64 = base64.substring(0, base64.length - 1) + '=';\n    }\n    else if (len % 3 === 1) {\n        base64 = base64.substring(0, base64.length - 2) + '==';\n    }\n    return base64;\n};\nconst decode = (base64) => {\n    let bufferLength = base64.length * 0.75, len = base64.length, i, p = 0, encoded1, encoded2, encoded3, encoded4;\n    if (base64[base64.length - 1] === '=') {\n        bufferLength--;\n        if (base64[base64.length - 2] === '=') {\n            bufferLength--;\n        }\n    }\n    const arraybuffer = new ArrayBuffer(bufferLength), bytes = new Uint8Array(arraybuffer);\n    for (i = 0; i < len; i += 4) {\n        encoded1 = lookup[base64.charCodeAt(i)];\n        encoded2 = lookup[base64.charCodeAt(i + 1)];\n        encoded3 = lookup[base64.charCodeAt(i + 2)];\n        encoded4 = lookup[base64.charCodeAt(i + 3)];\n        bytes[p++] = (encoded1 << 2) | (encoded2 >> 4);\n        bytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2);\n        bytes[p++] = ((encoded3 & 3) << 6) | (encoded4 & 63);\n    }\n    return arraybuffer;\n};\n\n;// CONCATENATED MODULE: ./node_modules/engine.io-parser/build/esm/decodePacket.browser.js\n\n\nconst decodePacket_browser_withNativeArrayBuffer = typeof ArrayBuffer === \"function\";\nconst decodePacket = (encodedPacket, binaryType) => {\n    if (typeof encodedPacket !== \"string\") {\n        return {\n            type: \"message\",\n            data: mapBinary(encodedPacket, binaryType)\n        };\n    }\n    const type = encodedPacket.charAt(0);\n    if (type === \"b\") {\n        return {\n            type: \"message\",\n            data: decodeBase64Packet(encodedPacket.substring(1), binaryType)\n        };\n    }\n    const packetType = PACKET_TYPES_REVERSE[type];\n    if (!packetType) {\n        return ERROR_PACKET;\n    }\n    return encodedPacket.length > 1\n        ? {\n            type: PACKET_TYPES_REVERSE[type],\n            data: encodedPacket.substring(1)\n        }\n        : {\n            type: PACKET_TYPES_REVERSE[type]\n        };\n};\nconst decodeBase64Packet = (data, binaryType) => {\n    if (decodePacket_browser_withNativeArrayBuffer) {\n        const decoded = decode(data);\n        return mapBinary(decoded, binaryType);\n    }\n    else {\n        return { base64: true, data }; // fallback for old browsers\n    }\n};\nconst mapBinary = (data, binaryType) => {\n    switch (binaryType) {\n        case \"blob\":\n            return data instanceof ArrayBuffer ? new Blob([data]) : data;\n        case \"arraybuffer\":\n        default:\n            return data; // assuming the data is already an ArrayBuffer\n    }\n};\n/* harmony default export */ var decodePacket_browser = (decodePacket);\n\n;// CONCATENATED MODULE: ./node_modules/engine.io-parser/build/esm/index.js\n\n\nconst SEPARATOR = String.fromCharCode(30); // see https://en.wikipedia.org/wiki/Delimiter#ASCII_delimited_text\nconst encodePayload = (packets, callback) => {\n    // some packets may be added to the array while encoding, so the initial length must be saved\n    const length = packets.length;\n    const encodedPackets = new Array(length);\n    let count = 0;\n    packets.forEach((packet, i) => {\n        // force base64 encoding for binary packets\n        encodePacket_browser(packet, false, encodedPacket => {\n            encodedPackets[i] = encodedPacket;\n            if (++count === length) {\n                callback(encodedPackets.join(SEPARATOR));\n            }\n        });\n    });\n};\nconst decodePayload = (encodedPayload, binaryType) => {\n    const encodedPackets = encodedPayload.split(SEPARATOR);\n    const packets = [];\n    for (let i = 0; i < encodedPackets.length; i++) {\n        const decodedPacket = decodePacket_browser(encodedPackets[i], binaryType);\n        packets.push(decodedPacket);\n        if (decodedPacket.type === \"error\") {\n            break;\n        }\n    }\n    return packets;\n};\nconst protocol = 4;\n\n\n;// CONCATENATED MODULE: ./node_modules/@socket.io/component-emitter/index.mjs\n/**\n * Initialize a new `Emitter`.\n *\n * @api public\n */\n\nfunction Emitter(obj) {\n  if (obj) return mixin(obj);\n}\n\n/**\n * Mixin the emitter properties.\n *\n * @param {Object} obj\n * @return {Object}\n * @api private\n */\n\nfunction mixin(obj) {\n  for (var key in Emitter.prototype) {\n    obj[key] = Emitter.prototype[key];\n  }\n  return obj;\n}\n\n/**\n * Listen on the given `event` with `fn`.\n *\n * @param {String} event\n * @param {Function} fn\n * @return {Emitter}\n * @api public\n */\n\nEmitter.prototype.on =\nEmitter.prototype.addEventListener = function(event, fn){\n  this._callbacks = this._callbacks || {};\n  (this._callbacks['$' + event] = this._callbacks['$' + event] || [])\n    .push(fn);\n  return this;\n};\n\n/**\n * Adds an `event` listener that will be invoked a single\n * time then automatically removed.\n *\n * @param {String} event\n * @param {Function} fn\n * @return {Emitter}\n * @api public\n */\n\nEmitter.prototype.once = function(event, fn){\n  function on() {\n    this.off(event, on);\n    fn.apply(this, arguments);\n  }\n\n  on.fn = fn;\n  this.on(event, on);\n  return this;\n};\n\n/**\n * Remove the given callback for `event` or all\n * registered callbacks.\n *\n * @param {String} event\n * @param {Function} fn\n * @return {Emitter}\n * @api public\n */\n\nEmitter.prototype.off =\nEmitter.prototype.removeListener =\nEmitter.prototype.removeAllListeners =\nEmitter.prototype.removeEventListener = function(event, fn){\n  this._callbacks = this._callbacks || {};\n\n  // all\n  if (0 == arguments.length) {\n    this._callbacks = {};\n    return this;\n  }\n\n  // specific event\n  var callbacks = this._callbacks['$' + event];\n  if (!callbacks) return this;\n\n  // remove all handlers\n  if (1 == arguments.length) {\n    delete this._callbacks['$' + event];\n    return this;\n  }\n\n  // remove specific handler\n  var cb;\n  for (var i = 0; i < callbacks.length; i++) {\n    cb = callbacks[i];\n    if (cb === fn || cb.fn === fn) {\n      callbacks.splice(i, 1);\n      break;\n    }\n  }\n\n  // Remove event specific arrays for event types that no\n  // one is subscribed for to avoid memory leak.\n  if (callbacks.length === 0) {\n    delete this._callbacks['$' + event];\n  }\n\n  return this;\n};\n\n/**\n * Emit `event` with the given args.\n *\n * @param {String} event\n * @param {Mixed} ...\n * @return {Emitter}\n */\n\nEmitter.prototype.emit = function(event){\n  this._callbacks = this._callbacks || {};\n\n  var args = new Array(arguments.length - 1)\n    , callbacks = this._callbacks['$' + event];\n\n  for (var i = 1; i < arguments.length; i++) {\n    args[i - 1] = arguments[i];\n  }\n\n  if (callbacks) {\n    callbacks = callbacks.slice(0);\n    for (var i = 0, len = callbacks.length; i < len; ++i) {\n      callbacks[i].apply(this, args);\n    }\n  }\n\n  return this;\n};\n\n// alias used for reserved events (protected method)\nEmitter.prototype.emitReserved = Emitter.prototype.emit;\n\n/**\n * Return array of callbacks for `event`.\n *\n * @param {String} event\n * @return {Array}\n * @api public\n */\n\nEmitter.prototype.listeners = function(event){\n  this._callbacks = this._callbacks || {};\n  return this._callbacks['$' + event] || [];\n};\n\n/**\n * Check if this emitter has `event` handlers.\n *\n * @param {String} event\n * @return {Boolean}\n * @api public\n */\n\nEmitter.prototype.hasListeners = function(event){\n  return !! this.listeners(event).length;\n};\n\n;// CONCATENATED MODULE: ./node_modules/engine.io-client/build/esm/globalThis.browser.js\nconst globalThisShim = (() => {\n    if (typeof self !== \"undefined\") {\n        return self;\n    }\n    else if (typeof window !== \"undefined\") {\n        return window;\n    }\n    else {\n        return Function(\"return this\")();\n    }\n})();\n\n;// CONCATENATED MODULE: ./node_modules/engine.io-client/build/esm/util.js\n\nfunction pick(obj, ...attr) {\n    return attr.reduce((acc, k) => {\n        if (obj.hasOwnProperty(k)) {\n            acc[k] = obj[k];\n        }\n        return acc;\n    }, {});\n}\n// Keep a reference to the real timeout functions so they can be used when overridden\nconst NATIVE_SET_TIMEOUT = setTimeout;\nconst NATIVE_CLEAR_TIMEOUT = clearTimeout;\nfunction installTimerFunctions(obj, opts) {\n    if (opts.useNativeTimers) {\n        obj.setTimeoutFn = NATIVE_SET_TIMEOUT.bind(globalThisShim);\n        obj.clearTimeoutFn = NATIVE_CLEAR_TIMEOUT.bind(globalThisShim);\n    }\n    else {\n        obj.setTimeoutFn = setTimeout.bind(globalThisShim);\n        obj.clearTimeoutFn = clearTimeout.bind(globalThisShim);\n    }\n}\n// base64 encoded buffers are about 33% bigger (https://en.wikipedia.org/wiki/Base64)\nconst BASE64_OVERHEAD = 1.33;\n// we could also have used `new Blob([obj]).size`, but it isn't supported in IE9\nfunction byteLength(obj) {\n    if (typeof obj === \"string\") {\n        return utf8Length(obj);\n    }\n    // arraybuffer or blob\n    return Math.ceil((obj.byteLength || obj.size) * BASE64_OVERHEAD);\n}\nfunction utf8Length(str) {\n    let c = 0, length = 0;\n    for (let i = 0, l = str.length; i < l; i++) {\n        c = str.charCodeAt(i);\n        if (c < 0x80) {\n            length += 1;\n        }\n        else if (c < 0x800) {\n            length += 2;\n        }\n        else if (c < 0xd800 || c >= 0xe000) {\n            length += 3;\n        }\n        else {\n            i++;\n            length += 4;\n        }\n    }\n    return length;\n}\n\n;// CONCATENATED MODULE: ./node_modules/engine.io-client/build/esm/transport.js\n\n\n\nclass TransportError extends Error {\n    constructor(reason, description, context) {\n        super(reason);\n        this.description = description;\n        this.context = context;\n        this.type = \"TransportError\";\n    }\n}\nclass Transport extends Emitter {\n    /**\n     * Transport abstract constructor.\n     *\n     * @param {Object} options.\n     * @api private\n     */\n    constructor(opts) {\n        super();\n        this.writable = false;\n        installTimerFunctions(this, opts);\n        this.opts = opts;\n        this.query = opts.query;\n        this.readyState = \"\";\n        this.socket = opts.socket;\n    }\n    /**\n     * Emits an error.\n     *\n     * @param {String} reason\n     * @param description\n     * @param context - the error context\n     * @return {Transport} for chaining\n     * @api protected\n     */\n    onError(reason, description, context) {\n        super.emitReserved(\"error\", new TransportError(reason, description, context));\n        return this;\n    }\n    /**\n     * Opens the transport.\n     *\n     * @api public\n     */\n    open() {\n        if (\"closed\" === this.readyState || \"\" === this.readyState) {\n            this.readyState = \"opening\";\n            this.doOpen();\n        }\n        return this;\n    }\n    /**\n     * Closes the transport.\n     *\n     * @api public\n     */\n    close() {\n        if (\"opening\" === this.readyState || \"open\" === this.readyState) {\n            this.doClose();\n            this.onClose();\n        }\n        return this;\n    }\n    /**\n     * Sends multiple packets.\n     *\n     * @param {Array} packets\n     * @api public\n     */\n    send(packets) {\n        if (\"open\" === this.readyState) {\n            this.write(packets);\n        }\n        else {\n            // this might happen if the transport was silently closed in the beforeunload event handler\n        }\n    }\n    /**\n     * Called upon open\n     *\n     * @api protected\n     */\n    onOpen() {\n        this.readyState = \"open\";\n        this.writable = true;\n        super.emitReserved(\"open\");\n    }\n    /**\n     * Called with data.\n     *\n     * @param {String} data\n     * @api protected\n     */\n    onData(data) {\n        const packet = decodePacket_browser(data, this.socket.binaryType);\n        this.onPacket(packet);\n    }\n    /**\n     * Called with a decoded packet.\n     *\n     * @api protected\n     */\n    onPacket(packet) {\n        super.emitReserved(\"packet\", packet);\n    }\n    /**\n     * Called upon close.\n     *\n     * @api protected\n     */\n    onClose(details) {\n        this.readyState = \"closed\";\n        super.emitReserved(\"close\", details);\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/engine.io-client/build/esm/contrib/yeast.js\n// imported from https://github.com/unshiftio/yeast\n\nconst alphabet = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_'.split(''), yeast_length = 64, map = {};\nlet seed = 0, i = 0, prev;\n/**\n * Return a string representing the specified number.\n *\n * @param {Number} num The number to convert.\n * @returns {String} The string representation of the number.\n * @api public\n */\nfunction yeast_encode(num) {\n    let encoded = '';\n    do {\n        encoded = alphabet[num % yeast_length] + encoded;\n        num = Math.floor(num / yeast_length);\n    } while (num > 0);\n    return encoded;\n}\n/**\n * Return the integer value specified by the given string.\n *\n * @param {String} str The string to convert.\n * @returns {Number} The integer value represented by the string.\n * @api public\n */\nfunction yeast_decode(str) {\n    let decoded = 0;\n    for (i = 0; i < str.length; i++) {\n        decoded = decoded * yeast_length + map[str.charAt(i)];\n    }\n    return decoded;\n}\n/**\n * Yeast: A tiny growing id generator.\n *\n * @returns {String} A unique id.\n * @api public\n */\nfunction yeast() {\n    const now = yeast_encode(+new Date());\n    if (now !== prev)\n        return seed = 0, prev = now;\n    return now + '.' + yeast_encode(seed++);\n}\n//\n// Map each character to its index.\n//\nfor (; i < yeast_length; i++)\n    map[alphabet[i]] = i;\n\n;// CONCATENATED MODULE: ./node_modules/engine.io-client/build/esm/contrib/parseqs.js\n// imported from https://github.com/galkn/querystring\n/**\n * Compiles a querystring\n * Returns string representation of the object\n *\n * @param {Object}\n * @api private\n */\nfunction parseqs_encode(obj) {\n    let str = '';\n    for (let i in obj) {\n        if (obj.hasOwnProperty(i)) {\n            if (str.length)\n                str += '&';\n            str += encodeURIComponent(i) + '=' + encodeURIComponent(obj[i]);\n        }\n    }\n    return str;\n}\n/**\n * Parses a simple querystring into an object\n *\n * @param {String} qs\n * @api private\n */\nfunction parseqs_decode(qs) {\n    let qry = {};\n    let pairs = qs.split('&');\n    for (let i = 0, l = pairs.length; i < l; i++) {\n        let pair = pairs[i].split('=');\n        qry[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);\n    }\n    return qry;\n}\n\n;// CONCATENATED MODULE: ./node_modules/engine.io-client/build/esm/contrib/has-cors.js\n// imported from https://github.com/component/has-cors\nlet value = false;\ntry {\n    value = typeof XMLHttpRequest !== 'undefined' &&\n        'withCredentials' in new XMLHttpRequest();\n}\ncatch (err) {\n    // if XMLHttp support is disabled in IE then it will throw\n    // when trying to create\n}\nconst hasCORS = value;\n\n;// CONCATENATED MODULE: ./node_modules/engine.io-client/build/esm/transports/xmlhttprequest.browser.js\n// browser shim for xmlhttprequest module\n\n\nfunction XHR(opts) {\n    const xdomain = opts.xdomain;\n    // XMLHttpRequest can be disabled on IE\n    try {\n        if (\"undefined\" !== typeof XMLHttpRequest && (!xdomain || hasCORS)) {\n            return new XMLHttpRequest();\n        }\n    }\n    catch (e) { }\n    if (!xdomain) {\n        try {\n            return new globalThisShim[[\"Active\"].concat(\"Object\").join(\"X\")](\"Microsoft.XMLHTTP\");\n        }\n        catch (e) { }\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/engine.io-client/build/esm/transports/polling.js\n\n\n\n\n\n\n\n\nfunction empty() { }\nconst hasXHR2 = (function () {\n    const xhr = new XHR({\n        xdomain: false\n    });\n    return null != xhr.responseType;\n})();\nclass Polling extends Transport {\n    /**\n     * XHR Polling constructor.\n     *\n     * @param {Object} opts\n     * @api public\n     */\n    constructor(opts) {\n        super(opts);\n        this.polling = false;\n        if (typeof location !== \"undefined\") {\n            const isSSL = \"https:\" === location.protocol;\n            let port = location.port;\n            // some user agents have empty `location.port`\n            if (!port) {\n                port = isSSL ? \"443\" : \"80\";\n            }\n            this.xd =\n                (typeof location !== \"undefined\" &&\n                    opts.hostname !== location.hostname) ||\n                    port !== opts.port;\n            this.xs = opts.secure !== isSSL;\n        }\n        /**\n         * XHR supports binary\n         */\n        const forceBase64 = opts && opts.forceBase64;\n        this.supportsBinary = hasXHR2 && !forceBase64;\n    }\n    /**\n     * Transport name.\n     */\n    get name() {\n        return \"polling\";\n    }\n    /**\n     * Opens the socket (triggers polling). We write a PING message to determine\n     * when the transport is open.\n     *\n     * @api private\n     */\n    doOpen() {\n        this.poll();\n    }\n    /**\n     * Pauses polling.\n     *\n     * @param {Function} callback upon buffers are flushed and transport is paused\n     * @api private\n     */\n    pause(onPause) {\n        this.readyState = \"pausing\";\n        const pause = () => {\n            this.readyState = \"paused\";\n            onPause();\n        };\n        if (this.polling || !this.writable) {\n            let total = 0;\n            if (this.polling) {\n                total++;\n                this.once(\"pollComplete\", function () {\n                    --total || pause();\n                });\n            }\n            if (!this.writable) {\n                total++;\n                this.once(\"drain\", function () {\n                    --total || pause();\n                });\n            }\n        }\n        else {\n            pause();\n        }\n    }\n    /**\n     * Starts polling cycle.\n     *\n     * @api public\n     */\n    poll() {\n        this.polling = true;\n        this.doPoll();\n        this.emitReserved(\"poll\");\n    }\n    /**\n     * Overloads onData to detect payloads.\n     *\n     * @api private\n     */\n    onData(data) {\n        const callback = packet => {\n            // if its the first message we consider the transport open\n            if (\"opening\" === this.readyState && packet.type === \"open\") {\n                this.onOpen();\n            }\n            // if its a close packet, we close the ongoing requests\n            if (\"close\" === packet.type) {\n                this.onClose({ description: \"transport closed by the server\" });\n                return false;\n            }\n            // otherwise bypass onData and handle the message\n            this.onPacket(packet);\n        };\n        // decode payload\n        decodePayload(data, this.socket.binaryType).forEach(callback);\n        // if an event did not trigger closing\n        if (\"closed\" !== this.readyState) {\n            // if we got data we're not polling\n            this.polling = false;\n            this.emitReserved(\"pollComplete\");\n            if (\"open\" === this.readyState) {\n                this.poll();\n            }\n            else {\n            }\n        }\n    }\n    /**\n     * For polling, send a close packet.\n     *\n     * @api private\n     */\n    doClose() {\n        const close = () => {\n            this.write([{ type: \"close\" }]);\n        };\n        if (\"open\" === this.readyState) {\n            close();\n        }\n        else {\n            // in case we're trying to close while\n            // handshaking is in progress (GH-164)\n            this.once(\"open\", close);\n        }\n    }\n    /**\n     * Writes a packets payload.\n     *\n     * @param {Array} data packets\n     * @param {Function} drain callback\n     * @api private\n     */\n    write(packets) {\n        this.writable = false;\n        encodePayload(packets, data => {\n            this.doWrite(data, () => {\n                this.writable = true;\n                this.emitReserved(\"drain\");\n            });\n        });\n    }\n    /**\n     * Generates uri for connection.\n     *\n     * @api private\n     */\n    uri() {\n        let query = this.query || {};\n        const schema = this.opts.secure ? \"https\" : \"http\";\n        let port = \"\";\n        // cache busting is forced\n        if (false !== this.opts.timestampRequests) {\n            query[this.opts.timestampParam] = yeast();\n        }\n        if (!this.supportsBinary && !query.sid) {\n            query.b64 = 1;\n        }\n        // avoid port if default for schema\n        if (this.opts.port &&\n            ((\"https\" === schema && Number(this.opts.port) !== 443) ||\n                (\"http\" === schema && Number(this.opts.port) !== 80))) {\n            port = \":\" + this.opts.port;\n        }\n        const encodedQuery = parseqs_encode(query);\n        const ipv6 = this.opts.hostname.indexOf(\":\") !== -1;\n        return (schema +\n            \"://\" +\n            (ipv6 ? \"[\" + this.opts.hostname + \"]\" : this.opts.hostname) +\n            port +\n            this.opts.path +\n            (encodedQuery.length ? \"?\" + encodedQuery : \"\"));\n    }\n    /**\n     * Creates a request.\n     *\n     * @param {String} method\n     * @api private\n     */\n    request(opts = {}) {\n        Object.assign(opts, { xd: this.xd, xs: this.xs }, this.opts);\n        return new Request(this.uri(), opts);\n    }\n    /**\n     * Sends data.\n     *\n     * @param {String} data to send.\n     * @param {Function} called upon flush.\n     * @api private\n     */\n    doWrite(data, fn) {\n        const req = this.request({\n            method: \"POST\",\n            data: data\n        });\n        req.on(\"success\", fn);\n        req.on(\"error\", (xhrStatus, context) => {\n            this.onError(\"xhr post error\", xhrStatus, context);\n        });\n    }\n    /**\n     * Starts a poll cycle.\n     *\n     * @api private\n     */\n    doPoll() {\n        const req = this.request();\n        req.on(\"data\", this.onData.bind(this));\n        req.on(\"error\", (xhrStatus, context) => {\n            this.onError(\"xhr poll error\", xhrStatus, context);\n        });\n        this.pollXhr = req;\n    }\n}\nclass Request extends Emitter {\n    /**\n     * Request constructor\n     *\n     * @param {Object} options\n     * @api public\n     */\n    constructor(uri, opts) {\n        super();\n        installTimerFunctions(this, opts);\n        this.opts = opts;\n        this.method = opts.method || \"GET\";\n        this.uri = uri;\n        this.async = false !== opts.async;\n        this.data = undefined !== opts.data ? opts.data : null;\n        this.create();\n    }\n    /**\n     * Creates the XHR object and sends the request.\n     *\n     * @api private\n     */\n    create() {\n        const opts = pick(this.opts, \"agent\", \"pfx\", \"key\", \"passphrase\", \"cert\", \"ca\", \"ciphers\", \"rejectUnauthorized\", \"autoUnref\");\n        opts.xdomain = !!this.opts.xd;\n        opts.xscheme = !!this.opts.xs;\n        const xhr = (this.xhr = new XHR(opts));\n        try {\n            xhr.open(this.method, this.uri, this.async);\n            try {\n                if (this.opts.extraHeaders) {\n                    xhr.setDisableHeaderCheck && xhr.setDisableHeaderCheck(true);\n                    for (let i in this.opts.extraHeaders) {\n                        if (this.opts.extraHeaders.hasOwnProperty(i)) {\n                            xhr.setRequestHeader(i, this.opts.extraHeaders[i]);\n                        }\n                    }\n                }\n            }\n            catch (e) { }\n            if (\"POST\" === this.method) {\n                try {\n                    xhr.setRequestHeader(\"Content-type\", \"text/plain;charset=UTF-8\");\n                }\n                catch (e) { }\n            }\n            try {\n                xhr.setRequestHeader(\"Accept\", \"*/*\");\n            }\n            catch (e) { }\n            // ie6 check\n            if (\"withCredentials\" in xhr) {\n                xhr.withCredentials = this.opts.withCredentials;\n            }\n            if (this.opts.requestTimeout) {\n                xhr.timeout = this.opts.requestTimeout;\n            }\n            xhr.onreadystatechange = () => {\n                if (4 !== xhr.readyState)\n                    return;\n                if (200 === xhr.status || 1223 === xhr.status) {\n                    this.onLoad();\n                }\n                else {\n                    // make sure the `error` event handler that's user-set\n                    // does not throw in the same tick and gets caught here\n                    this.setTimeoutFn(() => {\n                        this.onError(typeof xhr.status === \"number\" ? xhr.status : 0);\n                    }, 0);\n                }\n            };\n            xhr.send(this.data);\n        }\n        catch (e) {\n            // Need to defer since .create() is called directly from the constructor\n            // and thus the 'error' event can only be only bound *after* this exception\n            // occurs.  Therefore, also, we cannot throw here at all.\n            this.setTimeoutFn(() => {\n                this.onError(e);\n            }, 0);\n            return;\n        }\n        if (typeof document !== \"undefined\") {\n            this.index = Request.requestsCount++;\n            Request.requests[this.index] = this;\n        }\n    }\n    /**\n     * Called upon error.\n     *\n     * @api private\n     */\n    onError(err) {\n        this.emitReserved(\"error\", err, this.xhr);\n        this.cleanup(true);\n    }\n    /**\n     * Cleans up house.\n     *\n     * @api private\n     */\n    cleanup(fromError) {\n        if (\"undefined\" === typeof this.xhr || null === this.xhr) {\n            return;\n        }\n        this.xhr.onreadystatechange = empty;\n        if (fromError) {\n            try {\n                this.xhr.abort();\n            }\n            catch (e) { }\n        }\n        if (typeof document !== \"undefined\") {\n            delete Request.requests[this.index];\n        }\n        this.xhr = null;\n    }\n    /**\n     * Called upon load.\n     *\n     * @api private\n     */\n    onLoad() {\n        const data = this.xhr.responseText;\n        if (data !== null) {\n            this.emitReserved(\"data\", data);\n            this.emitReserved(\"success\");\n            this.cleanup();\n        }\n    }\n    /**\n     * Aborts the request.\n     *\n     * @api public\n     */\n    abort() {\n        this.cleanup();\n    }\n}\nRequest.requestsCount = 0;\nRequest.requests = {};\n/**\n * Aborts pending requests when unloading the window. This is needed to prevent\n * memory leaks (e.g. when using IE) and to ensure that no spurious error is\n * emitted.\n */\nif (typeof document !== \"undefined\") {\n    // @ts-ignore\n    if (typeof attachEvent === \"function\") {\n        // @ts-ignore\n        attachEvent(\"onunload\", unloadHandler);\n    }\n    else if (typeof addEventListener === \"function\") {\n        const terminationEvent = \"onpagehide\" in globalThisShim ? \"pagehide\" : \"unload\";\n        addEventListener(terminationEvent, unloadHandler, false);\n    }\n}\nfunction unloadHandler() {\n    for (let i in Request.requests) {\n        if (Request.requests.hasOwnProperty(i)) {\n            Request.requests[i].abort();\n        }\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/engine.io-client/build/esm/transports/websocket-constructor.browser.js\n\nconst nextTick = (() => {\n    const isPromiseAvailable = typeof Promise === \"function\" && typeof Promise.resolve === \"function\";\n    if (isPromiseAvailable) {\n        return cb => Promise.resolve().then(cb);\n    }\n    else {\n        return (cb, setTimeoutFn) => setTimeoutFn(cb, 0);\n    }\n})();\nconst WebSocket = globalThisShim.WebSocket || globalThisShim.MozWebSocket;\nconst usingBrowserWebSocket = true;\nconst defaultBinaryType = \"arraybuffer\";\n\n;// CONCATENATED MODULE: ./node_modules/engine.io-client/build/esm/transports/websocket.js\n/* provided dependency */ var Buffer = __webpack_require__(21876)[\"Buffer\"];\n\n\n\n\n\n\n// detect ReactNative environment\nconst isReactNative = typeof navigator !== \"undefined\" &&\n    typeof navigator.product === \"string\" &&\n    navigator.product.toLowerCase() === \"reactnative\";\nclass WS extends Transport {\n    /**\n     * WebSocket transport constructor.\n     *\n     * @api {Object} connection options\n     * @api public\n     */\n    constructor(opts) {\n        super(opts);\n        this.supportsBinary = !opts.forceBase64;\n    }\n    /**\n     * Transport name.\n     *\n     * @api public\n     */\n    get name() {\n        return \"websocket\";\n    }\n    /**\n     * Opens socket.\n     *\n     * @api private\n     */\n    doOpen() {\n        if (!this.check()) {\n            // let probe timeout\n            return;\n        }\n        const uri = this.uri();\n        const protocols = this.opts.protocols;\n        // React Native only supports the 'headers' option, and will print a warning if anything else is passed\n        const opts = isReactNative\n            ? {}\n            : pick(this.opts, \"agent\", \"perMessageDeflate\", \"pfx\", \"key\", \"passphrase\", \"cert\", \"ca\", \"ciphers\", \"rejectUnauthorized\", \"localAddress\", \"protocolVersion\", \"origin\", \"maxPayload\", \"family\", \"checkServerIdentity\");\n        if (this.opts.extraHeaders) {\n            opts.headers = this.opts.extraHeaders;\n        }\n        try {\n            this.ws =\n                usingBrowserWebSocket && !isReactNative\n                    ? protocols\n                        ? new WebSocket(uri, protocols)\n                        : new WebSocket(uri)\n                    : new WebSocket(uri, protocols, opts);\n        }\n        catch (err) {\n            return this.emitReserved(\"error\", err);\n        }\n        this.ws.binaryType = this.socket.binaryType || defaultBinaryType;\n        this.addEventListeners();\n    }\n    /**\n     * Adds event listeners to the socket\n     *\n     * @api private\n     */\n    addEventListeners() {\n        this.ws.onopen = () => {\n            if (this.opts.autoUnref) {\n                this.ws._socket.unref();\n            }\n            this.onOpen();\n        };\n        this.ws.onclose = closeEvent => this.onClose({\n            description: \"websocket connection closed\",\n            context: closeEvent\n        });\n        this.ws.onmessage = ev => this.onData(ev.data);\n        this.ws.onerror = e => this.onError(\"websocket error\", e);\n    }\n    /**\n     * Writes data to socket.\n     *\n     * @param {Array} array of packets.\n     * @api private\n     */\n    write(packets) {\n        this.writable = false;\n        // encodePacket efficient as it uses WS framing\n        // no need for encodePayload\n        for (let i = 0; i < packets.length; i++) {\n            const packet = packets[i];\n            const lastPacket = i === packets.length - 1;\n            encodePacket_browser(packet, this.supportsBinary, data => {\n                // always create a new object (GH-437)\n                const opts = {};\n                if (!usingBrowserWebSocket) {\n                    if (packet.options) {\n                        opts.compress = packet.options.compress;\n                    }\n                    if (this.opts.perMessageDeflate) {\n                        const len = \n                        // @ts-ignore\n                        \"string\" === typeof data ? Buffer.byteLength(data) : data.length;\n                        if (len < this.opts.perMessageDeflate.threshold) {\n                            opts.compress = false;\n                        }\n                    }\n                }\n                // Sometimes the websocket has already been closed but the browser didn't\n                // have a chance of informing us about it yet, in that case send will\n                // throw an error\n                try {\n                    if (usingBrowserWebSocket) {\n                        // TypeError is thrown when passing the second argument on Safari\n                        this.ws.send(data);\n                    }\n                    else {\n                        this.ws.send(data, opts);\n                    }\n                }\n                catch (e) {\n                }\n                if (lastPacket) {\n                    // fake drain\n                    // defer to next tick to allow Socket to clear writeBuffer\n                    nextTick(() => {\n                        this.writable = true;\n                        this.emitReserved(\"drain\");\n                    }, this.setTimeoutFn);\n                }\n            });\n        }\n    }\n    /**\n     * Closes socket.\n     *\n     * @api private\n     */\n    doClose() {\n        if (typeof this.ws !== \"undefined\") {\n            this.ws.close();\n            this.ws = null;\n        }\n    }\n    /**\n     * Generates uri for connection.\n     *\n     * @api private\n     */\n    uri() {\n        let query = this.query || {};\n        const schema = this.opts.secure ? \"wss\" : \"ws\";\n        let port = \"\";\n        // avoid port if default for schema\n        if (this.opts.port &&\n            ((\"wss\" === schema && Number(this.opts.port) !== 443) ||\n                (\"ws\" === schema && Number(this.opts.port) !== 80))) {\n            port = \":\" + this.opts.port;\n        }\n        // append timestamp to URI\n        if (this.opts.timestampRequests) {\n            query[this.opts.timestampParam] = yeast();\n        }\n        // communicate binary support capabilities\n        if (!this.supportsBinary) {\n            query.b64 = 1;\n        }\n        const encodedQuery = parseqs_encode(query);\n        const ipv6 = this.opts.hostname.indexOf(\":\") !== -1;\n        return (schema +\n            \"://\" +\n            (ipv6 ? \"[\" + this.opts.hostname + \"]\" : this.opts.hostname) +\n            port +\n            this.opts.path +\n            (encodedQuery.length ? \"?\" + encodedQuery : \"\"));\n    }\n    /**\n     * Feature detection for WebSocket.\n     *\n     * @return {Boolean} whether this transport is available.\n     * @api public\n     */\n    check() {\n        return !!WebSocket;\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/engine.io-client/build/esm/transports/index.js\n\n\nconst transports = {\n    websocket: WS,\n    polling: Polling\n};\n\n;// CONCATENATED MODULE: ./node_modules/engine.io-client/build/esm/contrib/parseuri.js\n// imported from https://github.com/galkn/parseuri\n/**\n * Parses an URI\n *\n * @author Steven Levithan <stevenlevithan.com> (MIT license)\n * @api private\n */\nconst re = /^(?:(?![^:@]+:[^:@\\/]*@)(http|https|ws|wss):\\/\\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\\/?#]*)(?::(\\d*))?)(((\\/(?:[^?#](?![^?#\\/]*\\.[^?#\\/.]+(?:[?#]|$)))*\\/?)?([^?#\\/]*))(?:\\?([^#]*))?(?:#(.*))?)/;\nconst parts = [\n    'source', 'protocol', 'authority', 'userInfo', 'user', 'password', 'host', 'port', 'relative', 'path', 'directory', 'file', 'query', 'anchor'\n];\nfunction parse(str) {\n    const src = str, b = str.indexOf('['), e = str.indexOf(']');\n    if (b != -1 && e != -1) {\n        str = str.substring(0, b) + str.substring(b, e).replace(/:/g, ';') + str.substring(e, str.length);\n    }\n    let m = re.exec(str || ''), uri = {}, i = 14;\n    while (i--) {\n        uri[parts[i]] = m[i] || '';\n    }\n    if (b != -1 && e != -1) {\n        uri.source = src;\n        uri.host = uri.host.substring(1, uri.host.length - 1).replace(/;/g, ':');\n        uri.authority = uri.authority.replace('[', '').replace(']', '').replace(/;/g, ':');\n        uri.ipv6uri = true;\n    }\n    uri.pathNames = pathNames(uri, uri['path']);\n    uri.queryKey = queryKey(uri, uri['query']);\n    return uri;\n}\nfunction pathNames(obj, path) {\n    const regx = /\\/{2,9}/g, names = path.replace(regx, \"/\").split(\"/\");\n    if (path.substr(0, 1) == '/' || path.length === 0) {\n        names.splice(0, 1);\n    }\n    if (path.substr(path.length - 1, 1) == '/') {\n        names.splice(names.length - 1, 1);\n    }\n    return names;\n}\nfunction queryKey(uri, query) {\n    const data = {};\n    query.replace(/(?:^|&)([^&=]*)=?([^&]*)/g, function ($0, $1, $2) {\n        if ($1) {\n            data[$1] = $2;\n        }\n    });\n    return data;\n}\n\n;// CONCATENATED MODULE: ./node_modules/engine.io-client/build/esm/socket.js\n\n\n\n\n\n\nclass Socket extends Emitter {\n    /**\n     * Socket constructor.\n     *\n     * @param {String|Object} uri or options\n     * @param {Object} opts - options\n     * @api public\n     */\n    constructor(uri, opts = {}) {\n        super();\n        if (uri && \"object\" === typeof uri) {\n            opts = uri;\n            uri = null;\n        }\n        if (uri) {\n            uri = parse(uri);\n            opts.hostname = uri.host;\n            opts.secure = uri.protocol === \"https\" || uri.protocol === \"wss\";\n            opts.port = uri.port;\n            if (uri.query)\n                opts.query = uri.query;\n        }\n        else if (opts.host) {\n            opts.hostname = parse(opts.host).host;\n        }\n        installTimerFunctions(this, opts);\n        this.secure =\n            null != opts.secure\n                ? opts.secure\n                : typeof location !== \"undefined\" && \"https:\" === location.protocol;\n        if (opts.hostname && !opts.port) {\n            // if no port is specified manually, use the protocol default\n            opts.port = this.secure ? \"443\" : \"80\";\n        }\n        this.hostname =\n            opts.hostname ||\n                (typeof location !== \"undefined\" ? location.hostname : \"localhost\");\n        this.port =\n            opts.port ||\n                (typeof location !== \"undefined\" && location.port\n                    ? location.port\n                    : this.secure\n                        ? \"443\"\n                        : \"80\");\n        this.transports = opts.transports || [\"polling\", \"websocket\"];\n        this.readyState = \"\";\n        this.writeBuffer = [];\n        this.prevBufferLen = 0;\n        this.opts = Object.assign({\n            path: \"/engine.io\",\n            agent: false,\n            withCredentials: false,\n            upgrade: true,\n            timestampParam: \"t\",\n            rememberUpgrade: false,\n            rejectUnauthorized: true,\n            perMessageDeflate: {\n                threshold: 1024\n            },\n            transportOptions: {},\n            closeOnBeforeunload: true\n        }, opts);\n        this.opts.path = this.opts.path.replace(/\\/$/, \"\") + \"/\";\n        if (typeof this.opts.query === \"string\") {\n            this.opts.query = parseqs_decode(this.opts.query);\n        }\n        // set on handshake\n        this.id = null;\n        this.upgrades = null;\n        this.pingInterval = null;\n        this.pingTimeout = null;\n        // set on heartbeat\n        this.pingTimeoutTimer = null;\n        if (typeof addEventListener === \"function\") {\n            if (this.opts.closeOnBeforeunload) {\n                // Firefox closes the connection when the \"beforeunload\" event is emitted but not Chrome. This event listener\n                // ensures every browser behaves the same (no \"disconnect\" event at the Socket.IO level when the page is\n                // closed/reloaded)\n                addEventListener(\"beforeunload\", () => {\n                    if (this.transport) {\n                        // silently close the transport\n                        this.transport.removeAllListeners();\n                        this.transport.close();\n                    }\n                }, false);\n            }\n            if (this.hostname !== \"localhost\") {\n                this.offlineEventListener = () => {\n                    this.onClose(\"transport close\", {\n                        description: \"network connection lost\"\n                    });\n                };\n                addEventListener(\"offline\", this.offlineEventListener, false);\n            }\n        }\n        this.open();\n    }\n    /**\n     * Creates transport of the given type.\n     *\n     * @param {String} transport name\n     * @return {Transport}\n     * @api private\n     */\n    createTransport(name) {\n        const query = Object.assign({}, this.opts.query);\n        // append engine.io protocol identifier\n        query.EIO = protocol;\n        // transport name\n        query.transport = name;\n        // session id if we already have one\n        if (this.id)\n            query.sid = this.id;\n        const opts = Object.assign({}, this.opts.transportOptions[name], this.opts, {\n            query,\n            socket: this,\n            hostname: this.hostname,\n            secure: this.secure,\n            port: this.port\n        });\n        return new transports[name](opts);\n    }\n    /**\n     * Initializes transport to use and starts probe.\n     *\n     * @api private\n     */\n    open() {\n        let transport;\n        if (this.opts.rememberUpgrade &&\n            Socket.priorWebsocketSuccess &&\n            this.transports.indexOf(\"websocket\") !== -1) {\n            transport = \"websocket\";\n        }\n        else if (0 === this.transports.length) {\n            // Emit error on next tick so it can be listened to\n            this.setTimeoutFn(() => {\n                this.emitReserved(\"error\", \"No transports available\");\n            }, 0);\n            return;\n        }\n        else {\n            transport = this.transports[0];\n        }\n        this.readyState = \"opening\";\n        // Retry with the next transport if the transport is disabled (jsonp: false)\n        try {\n            transport = this.createTransport(transport);\n        }\n        catch (e) {\n            this.transports.shift();\n            this.open();\n            return;\n        }\n        transport.open();\n        this.setTransport(transport);\n    }\n    /**\n     * Sets the current transport. Disables the existing one (if any).\n     *\n     * @api private\n     */\n    setTransport(transport) {\n        if (this.transport) {\n            this.transport.removeAllListeners();\n        }\n        // set up transport\n        this.transport = transport;\n        // set up transport listeners\n        transport\n            .on(\"drain\", this.onDrain.bind(this))\n            .on(\"packet\", this.onPacket.bind(this))\n            .on(\"error\", this.onError.bind(this))\n            .on(\"close\", reason => this.onClose(\"transport close\", reason));\n    }\n    /**\n     * Probes a transport.\n     *\n     * @param {String} transport name\n     * @api private\n     */\n    probe(name) {\n        let transport = this.createTransport(name);\n        let failed = false;\n        Socket.priorWebsocketSuccess = false;\n        const onTransportOpen = () => {\n            if (failed)\n                return;\n            transport.send([{ type: \"ping\", data: \"probe\" }]);\n            transport.once(\"packet\", msg => {\n                if (failed)\n                    return;\n                if (\"pong\" === msg.type && \"probe\" === msg.data) {\n                    this.upgrading = true;\n                    this.emitReserved(\"upgrading\", transport);\n                    if (!transport)\n                        return;\n                    Socket.priorWebsocketSuccess = \"websocket\" === transport.name;\n                    this.transport.pause(() => {\n                        if (failed)\n                            return;\n                        if (\"closed\" === this.readyState)\n                            return;\n                        cleanup();\n                        this.setTransport(transport);\n                        transport.send([{ type: \"upgrade\" }]);\n                        this.emitReserved(\"upgrade\", transport);\n                        transport = null;\n                        this.upgrading = false;\n                        this.flush();\n                    });\n                }\n                else {\n                    const err = new Error(\"probe error\");\n                    // @ts-ignore\n                    err.transport = transport.name;\n                    this.emitReserved(\"upgradeError\", err);\n                }\n            });\n        };\n        function freezeTransport() {\n            if (failed)\n                return;\n            // Any callback called by transport should be ignored since now\n            failed = true;\n            cleanup();\n            transport.close();\n            transport = null;\n        }\n        // Handle any error that happens while probing\n        const onerror = err => {\n            const error = new Error(\"probe error: \" + err);\n            // @ts-ignore\n            error.transport = transport.name;\n            freezeTransport();\n            this.emitReserved(\"upgradeError\", error);\n        };\n        function onTransportClose() {\n            onerror(\"transport closed\");\n        }\n        // When the socket is closed while we're probing\n        function onclose() {\n            onerror(\"socket closed\");\n        }\n        // When the socket is upgraded while we're probing\n        function onupgrade(to) {\n            if (transport && to.name !== transport.name) {\n                freezeTransport();\n            }\n        }\n        // Remove all listeners on the transport and on self\n        const cleanup = () => {\n            transport.removeListener(\"open\", onTransportOpen);\n            transport.removeListener(\"error\", onerror);\n            transport.removeListener(\"close\", onTransportClose);\n            this.off(\"close\", onclose);\n            this.off(\"upgrading\", onupgrade);\n        };\n        transport.once(\"open\", onTransportOpen);\n        transport.once(\"error\", onerror);\n        transport.once(\"close\", onTransportClose);\n        this.once(\"close\", onclose);\n        this.once(\"upgrading\", onupgrade);\n        transport.open();\n    }\n    /**\n     * Called when connection is deemed open.\n     *\n     * @api private\n     */\n    onOpen() {\n        this.readyState = \"open\";\n        Socket.priorWebsocketSuccess = \"websocket\" === this.transport.name;\n        this.emitReserved(\"open\");\n        this.flush();\n        // we check for `readyState` in case an `open`\n        // listener already closed the socket\n        if (\"open\" === this.readyState &&\n            this.opts.upgrade &&\n            this.transport.pause) {\n            let i = 0;\n            const l = this.upgrades.length;\n            for (; i < l; i++) {\n                this.probe(this.upgrades[i]);\n            }\n        }\n    }\n    /**\n     * Handles a packet.\n     *\n     * @api private\n     */\n    onPacket(packet) {\n        if (\"opening\" === this.readyState ||\n            \"open\" === this.readyState ||\n            \"closing\" === this.readyState) {\n            this.emitReserved(\"packet\", packet);\n            // Socket is live - any packet counts\n            this.emitReserved(\"heartbeat\");\n            switch (packet.type) {\n                case \"open\":\n                    this.onHandshake(JSON.parse(packet.data));\n                    break;\n                case \"ping\":\n                    this.resetPingTimeout();\n                    this.sendPacket(\"pong\");\n                    this.emitReserved(\"ping\");\n                    this.emitReserved(\"pong\");\n                    break;\n                case \"error\":\n                    const err = new Error(\"server error\");\n                    // @ts-ignore\n                    err.code = packet.data;\n                    this.onError(err);\n                    break;\n                case \"message\":\n                    this.emitReserved(\"data\", packet.data);\n                    this.emitReserved(\"message\", packet.data);\n                    break;\n            }\n        }\n        else {\n        }\n    }\n    /**\n     * Called upon handshake completion.\n     *\n     * @param {Object} data - handshake obj\n     * @api private\n     */\n    onHandshake(data) {\n        this.emitReserved(\"handshake\", data);\n        this.id = data.sid;\n        this.transport.query.sid = data.sid;\n        this.upgrades = this.filterUpgrades(data.upgrades);\n        this.pingInterval = data.pingInterval;\n        this.pingTimeout = data.pingTimeout;\n        this.maxPayload = data.maxPayload;\n        this.onOpen();\n        // In case open handler closes socket\n        if (\"closed\" === this.readyState)\n            return;\n        this.resetPingTimeout();\n    }\n    /**\n     * Sets and resets ping timeout timer based on server pings.\n     *\n     * @api private\n     */\n    resetPingTimeout() {\n        this.clearTimeoutFn(this.pingTimeoutTimer);\n        this.pingTimeoutTimer = this.setTimeoutFn(() => {\n            this.onClose(\"ping timeout\");\n        }, this.pingInterval + this.pingTimeout);\n        if (this.opts.autoUnref) {\n            this.pingTimeoutTimer.unref();\n        }\n    }\n    /**\n     * Called on `drain` event\n     *\n     * @api private\n     */\n    onDrain() {\n        this.writeBuffer.splice(0, this.prevBufferLen);\n        // setting prevBufferLen = 0 is very important\n        // for example, when upgrading, upgrade packet is sent over,\n        // and a nonzero prevBufferLen could cause problems on `drain`\n        this.prevBufferLen = 0;\n        if (0 === this.writeBuffer.length) {\n            this.emitReserved(\"drain\");\n        }\n        else {\n            this.flush();\n        }\n    }\n    /**\n     * Flush write buffers.\n     *\n     * @api private\n     */\n    flush() {\n        if (\"closed\" !== this.readyState &&\n            this.transport.writable &&\n            !this.upgrading &&\n            this.writeBuffer.length) {\n            const packets = this.getWritablePackets();\n            this.transport.send(packets);\n            // keep track of current length of writeBuffer\n            // splice writeBuffer and callbackBuffer on `drain`\n            this.prevBufferLen = packets.length;\n            this.emitReserved(\"flush\");\n        }\n    }\n    /**\n     * Ensure the encoded size of the writeBuffer is below the maxPayload value sent by the server (only for HTTP\n     * long-polling)\n     *\n     * @private\n     */\n    getWritablePackets() {\n        const shouldCheckPayloadSize = this.maxPayload &&\n            this.transport.name === \"polling\" &&\n            this.writeBuffer.length > 1;\n        if (!shouldCheckPayloadSize) {\n            return this.writeBuffer;\n        }\n        let payloadSize = 1; // first packet type\n        for (let i = 0; i < this.writeBuffer.length; i++) {\n            const data = this.writeBuffer[i].data;\n            if (data) {\n                payloadSize += byteLength(data);\n            }\n            if (i > 0 && payloadSize > this.maxPayload) {\n                return this.writeBuffer.slice(0, i);\n            }\n            payloadSize += 2; // separator + packet type\n        }\n        return this.writeBuffer;\n    }\n    /**\n     * Sends a message.\n     *\n     * @param {String} message.\n     * @param {Function} callback function.\n     * @param {Object} options.\n     * @return {Socket} for chaining.\n     * @api public\n     */\n    write(msg, options, fn) {\n        this.sendPacket(\"message\", msg, options, fn);\n        return this;\n    }\n    send(msg, options, fn) {\n        this.sendPacket(\"message\", msg, options, fn);\n        return this;\n    }\n    /**\n     * Sends a packet.\n     *\n     * @param {String} packet type.\n     * @param {String} data.\n     * @param {Object} options.\n     * @param {Function} callback function.\n     * @api private\n     */\n    sendPacket(type, data, options, fn) {\n        if (\"function\" === typeof data) {\n            fn = data;\n            data = undefined;\n        }\n        if (\"function\" === typeof options) {\n            fn = options;\n            options = null;\n        }\n        if (\"closing\" === this.readyState || \"closed\" === this.readyState) {\n            return;\n        }\n        options = options || {};\n        options.compress = false !== options.compress;\n        const packet = {\n            type: type,\n            data: data,\n            options: options\n        };\n        this.emitReserved(\"packetCreate\", packet);\n        this.writeBuffer.push(packet);\n        if (fn)\n            this.once(\"flush\", fn);\n        this.flush();\n    }\n    /**\n     * Closes the connection.\n     *\n     * @api public\n     */\n    close() {\n        const close = () => {\n            this.onClose(\"forced close\");\n            this.transport.close();\n        };\n        const cleanupAndClose = () => {\n            this.off(\"upgrade\", cleanupAndClose);\n            this.off(\"upgradeError\", cleanupAndClose);\n            close();\n        };\n        const waitForUpgrade = () => {\n            // wait for upgrade to finish since we can't send packets while pausing a transport\n            this.once(\"upgrade\", cleanupAndClose);\n            this.once(\"upgradeError\", cleanupAndClose);\n        };\n        if (\"opening\" === this.readyState || \"open\" === this.readyState) {\n            this.readyState = \"closing\";\n            if (this.writeBuffer.length) {\n                this.once(\"drain\", () => {\n                    if (this.upgrading) {\n                        waitForUpgrade();\n                    }\n                    else {\n                        close();\n                    }\n                });\n            }\n            else if (this.upgrading) {\n                waitForUpgrade();\n            }\n            else {\n                close();\n            }\n        }\n        return this;\n    }\n    /**\n     * Called upon transport error\n     *\n     * @api private\n     */\n    onError(err) {\n        Socket.priorWebsocketSuccess = false;\n        this.emitReserved(\"error\", err);\n        this.onClose(\"transport error\", err);\n    }\n    /**\n     * Called upon transport close.\n     *\n     * @api private\n     */\n    onClose(reason, description) {\n        if (\"opening\" === this.readyState ||\n            \"open\" === this.readyState ||\n            \"closing\" === this.readyState) {\n            // clear timers\n            this.clearTimeoutFn(this.pingTimeoutTimer);\n            // stop event from firing again for transport\n            this.transport.removeAllListeners(\"close\");\n            // ensure transport won't stay open\n            this.transport.close();\n            // ignore further transport communication\n            this.transport.removeAllListeners();\n            if (typeof removeEventListener === \"function\") {\n                removeEventListener(\"offline\", this.offlineEventListener, false);\n            }\n            // set ready state\n            this.readyState = \"closed\";\n            // clear session id\n            this.id = null;\n            // emit close event\n            this.emitReserved(\"close\", reason, description);\n            // clean buffers after, so users can still\n            // grab the buffers on `close` event\n            this.writeBuffer = [];\n            this.prevBufferLen = 0;\n        }\n    }\n    /**\n     * Filters upgrades, returning only those matching client transports.\n     *\n     * @param {Array} server upgrades\n     * @api private\n     *\n     */\n    filterUpgrades(upgrades) {\n        const filteredUpgrades = [];\n        let i = 0;\n        const j = upgrades.length;\n        for (; i < j; i++) {\n            if (~this.transports.indexOf(upgrades[i]))\n                filteredUpgrades.push(upgrades[i]);\n        }\n        return filteredUpgrades;\n    }\n}\nSocket.protocol = protocol;\n\n;// CONCATENATED MODULE: ./node_modules/engine.io-client/build/esm/index.js\n\n\nconst esm_protocol = Socket.protocol;\n\n\n\n\n\n;// CONCATENATED MODULE: ./node_modules/socket.io-client/build/esm/url.js\n\n/**\n * URL parser.\n *\n * @param uri - url\n * @param path - the request path of the connection\n * @param loc - An object meant to mimic window.location.\n *        Defaults to window.location.\n * @public\n */\nfunction url(uri, path = \"\", loc) {\n    let obj = uri;\n    // default to window.location\n    loc = loc || (typeof location !== \"undefined\" && location);\n    if (null == uri)\n        uri = loc.protocol + \"//\" + loc.host;\n    // relative path support\n    if (typeof uri === \"string\") {\n        if (\"/\" === uri.charAt(0)) {\n            if (\"/\" === uri.charAt(1)) {\n                uri = loc.protocol + uri;\n            }\n            else {\n                uri = loc.host + uri;\n            }\n        }\n        if (!/^(https?|wss?):\\/\\//.test(uri)) {\n            if (\"undefined\" !== typeof loc) {\n                uri = loc.protocol + \"//\" + uri;\n            }\n            else {\n                uri = \"https://\" + uri;\n            }\n        }\n        // parse\n        obj = parse(uri);\n    }\n    // make sure we treat `localhost:80` and `localhost` equally\n    if (!obj.port) {\n        if (/^(http|ws)$/.test(obj.protocol)) {\n            obj.port = \"80\";\n        }\n        else if (/^(http|ws)s$/.test(obj.protocol)) {\n            obj.port = \"443\";\n        }\n    }\n    obj.path = obj.path || \"/\";\n    const ipv6 = obj.host.indexOf(\":\") !== -1;\n    const host = ipv6 ? \"[\" + obj.host + \"]\" : obj.host;\n    // define unique id\n    obj.id = obj.protocol + \"://\" + host + \":\" + obj.port + path;\n    // define href\n    obj.href =\n        obj.protocol +\n            \"://\" +\n            host +\n            (loc && loc.port === obj.port ? \"\" : \":\" + obj.port);\n    return obj;\n}\n\n;// CONCATENATED MODULE: ./node_modules/socket.io-parser/build/esm/is-binary.js\nconst is_binary_withNativeArrayBuffer = typeof ArrayBuffer === \"function\";\nconst is_binary_isView = (obj) => {\n    return typeof ArrayBuffer.isView === \"function\"\n        ? ArrayBuffer.isView(obj)\n        : obj.buffer instanceof ArrayBuffer;\n};\nconst is_binary_toString = Object.prototype.toString;\nconst is_binary_withNativeBlob = typeof Blob === \"function\" ||\n    (typeof Blob !== \"undefined\" &&\n        is_binary_toString.call(Blob) === \"[object BlobConstructor]\");\nconst withNativeFile = typeof File === \"function\" ||\n    (typeof File !== \"undefined\" &&\n        is_binary_toString.call(File) === \"[object FileConstructor]\");\n/**\n * Returns true if obj is a Buffer, an ArrayBuffer, a Blob or a File.\n *\n * @private\n */\nfunction isBinary(obj) {\n    return ((is_binary_withNativeArrayBuffer && (obj instanceof ArrayBuffer || is_binary_isView(obj))) ||\n        (is_binary_withNativeBlob && obj instanceof Blob) ||\n        (withNativeFile && obj instanceof File));\n}\nfunction hasBinary(obj, toJSON) {\n    if (!obj || typeof obj !== \"object\") {\n        return false;\n    }\n    if (Array.isArray(obj)) {\n        for (let i = 0, l = obj.length; i < l; i++) {\n            if (hasBinary(obj[i])) {\n                return true;\n            }\n        }\n        return false;\n    }\n    if (isBinary(obj)) {\n        return true;\n    }\n    if (obj.toJSON &&\n        typeof obj.toJSON === \"function\" &&\n        arguments.length === 1) {\n        return hasBinary(obj.toJSON(), true);\n    }\n    for (const key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key) && hasBinary(obj[key])) {\n            return true;\n        }\n    }\n    return false;\n}\n\n;// CONCATENATED MODULE: ./node_modules/socket.io-parser/build/esm/binary.js\n\n/**\n * Replaces every Buffer | ArrayBuffer | Blob | File in packet with a numbered placeholder.\n *\n * @param {Object} packet - socket.io event packet\n * @return {Object} with deconstructed packet and list of buffers\n * @public\n */\nfunction deconstructPacket(packet) {\n    const buffers = [];\n    const packetData = packet.data;\n    const pack = packet;\n    pack.data = _deconstructPacket(packetData, buffers);\n    pack.attachments = buffers.length; // number of binary 'attachments'\n    return { packet: pack, buffers: buffers };\n}\nfunction _deconstructPacket(data, buffers) {\n    if (!data)\n        return data;\n    if (isBinary(data)) {\n        const placeholder = { _placeholder: true, num: buffers.length };\n        buffers.push(data);\n        return placeholder;\n    }\n    else if (Array.isArray(data)) {\n        const newData = new Array(data.length);\n        for (let i = 0; i < data.length; i++) {\n            newData[i] = _deconstructPacket(data[i], buffers);\n        }\n        return newData;\n    }\n    else if (typeof data === \"object\" && !(data instanceof Date)) {\n        const newData = {};\n        for (const key in data) {\n            if (Object.prototype.hasOwnProperty.call(data, key)) {\n                newData[key] = _deconstructPacket(data[key], buffers);\n            }\n        }\n        return newData;\n    }\n    return data;\n}\n/**\n * Reconstructs a binary packet from its placeholder packet and buffers\n *\n * @param {Object} packet - event packet with placeholders\n * @param {Array} buffers - binary buffers to put in placeholder positions\n * @return {Object} reconstructed packet\n * @public\n */\nfunction reconstructPacket(packet, buffers) {\n    packet.data = _reconstructPacket(packet.data, buffers);\n    packet.attachments = undefined; // no longer useful\n    return packet;\n}\nfunction _reconstructPacket(data, buffers) {\n    if (!data)\n        return data;\n    if (data && data._placeholder === true) {\n        const isIndexValid = typeof data.num === \"number\" &&\n            data.num >= 0 &&\n            data.num < buffers.length;\n        if (isIndexValid) {\n            return buffers[data.num]; // appropriate buffer (should be natural order anyway)\n        }\n        else {\n            throw new Error(\"illegal attachments\");\n        }\n    }\n    else if (Array.isArray(data)) {\n        for (let i = 0; i < data.length; i++) {\n            data[i] = _reconstructPacket(data[i], buffers);\n        }\n    }\n    else if (typeof data === \"object\") {\n        for (const key in data) {\n            if (Object.prototype.hasOwnProperty.call(data, key)) {\n                data[key] = _reconstructPacket(data[key], buffers);\n            }\n        }\n    }\n    return data;\n}\n\n;// CONCATENATED MODULE: ./node_modules/socket.io-parser/build/esm/index.js\n\n\n\n/**\n * Protocol version.\n *\n * @public\n */\nconst build_esm_protocol = 5;\nvar PacketType;\n(function (PacketType) {\n    PacketType[PacketType[\"CONNECT\"] = 0] = \"CONNECT\";\n    PacketType[PacketType[\"DISCONNECT\"] = 1] = \"DISCONNECT\";\n    PacketType[PacketType[\"EVENT\"] = 2] = \"EVENT\";\n    PacketType[PacketType[\"ACK\"] = 3] = \"ACK\";\n    PacketType[PacketType[\"CONNECT_ERROR\"] = 4] = \"CONNECT_ERROR\";\n    PacketType[PacketType[\"BINARY_EVENT\"] = 5] = \"BINARY_EVENT\";\n    PacketType[PacketType[\"BINARY_ACK\"] = 6] = \"BINARY_ACK\";\n})(PacketType || (PacketType = {}));\n/**\n * A socket.io Encoder instance\n */\nclass Encoder {\n    /**\n     * Encoder constructor\n     *\n     * @param {function} replacer - custom replacer to pass down to JSON.parse\n     */\n    constructor(replacer) {\n        this.replacer = replacer;\n    }\n    /**\n     * Encode a packet as a single string if non-binary, or as a\n     * buffer sequence, depending on packet type.\n     *\n     * @param {Object} obj - packet object\n     */\n    encode(obj) {\n        if (obj.type === PacketType.EVENT || obj.type === PacketType.ACK) {\n            if (hasBinary(obj)) {\n                obj.type =\n                    obj.type === PacketType.EVENT\n                        ? PacketType.BINARY_EVENT\n                        : PacketType.BINARY_ACK;\n                return this.encodeAsBinary(obj);\n            }\n        }\n        return [this.encodeAsString(obj)];\n    }\n    /**\n     * Encode packet as string.\n     */\n    encodeAsString(obj) {\n        // first is type\n        let str = \"\" + obj.type;\n        // attachments if we have them\n        if (obj.type === PacketType.BINARY_EVENT ||\n            obj.type === PacketType.BINARY_ACK) {\n            str += obj.attachments + \"-\";\n        }\n        // if we have a namespace other than `/`\n        // we append it followed by a comma `,`\n        if (obj.nsp && \"/\" !== obj.nsp) {\n            str += obj.nsp + \",\";\n        }\n        // immediately followed by the id\n        if (null != obj.id) {\n            str += obj.id;\n        }\n        // json data\n        if (null != obj.data) {\n            str += JSON.stringify(obj.data, this.replacer);\n        }\n        return str;\n    }\n    /**\n     * Encode packet as 'buffer sequence' by removing blobs, and\n     * deconstructing packet into object with placeholders and\n     * a list of buffers.\n     */\n    encodeAsBinary(obj) {\n        const deconstruction = deconstructPacket(obj);\n        const pack = this.encodeAsString(deconstruction.packet);\n        const buffers = deconstruction.buffers;\n        buffers.unshift(pack); // add packet info to beginning of data list\n        return buffers; // write all the buffers\n    }\n}\n/**\n * A socket.io Decoder instance\n *\n * @return {Object} decoder\n */\nclass Decoder extends Emitter {\n    /**\n     * Decoder constructor\n     *\n     * @param {function} reviver - custom reviver to pass down to JSON.stringify\n     */\n    constructor(reviver) {\n        super();\n        this.reviver = reviver;\n    }\n    /**\n     * Decodes an encoded packet string into packet JSON.\n     *\n     * @param {String} obj - encoded packet\n     */\n    add(obj) {\n        let packet;\n        if (typeof obj === \"string\") {\n            if (this.reconstructor) {\n                throw new Error(\"got plaintext data when reconstructing a packet\");\n            }\n            packet = this.decodeString(obj);\n            if (packet.type === PacketType.BINARY_EVENT ||\n                packet.type === PacketType.BINARY_ACK) {\n                // binary packet's json\n                this.reconstructor = new BinaryReconstructor(packet);\n                // no attachments, labeled binary but no binary data to follow\n                if (packet.attachments === 0) {\n                    super.emitReserved(\"decoded\", packet);\n                }\n            }\n            else {\n                // non-binary full packet\n                super.emitReserved(\"decoded\", packet);\n            }\n        }\n        else if (isBinary(obj) || obj.base64) {\n            // raw binary data\n            if (!this.reconstructor) {\n                throw new Error(\"got binary data when not reconstructing a packet\");\n            }\n            else {\n                packet = this.reconstructor.takeBinaryData(obj);\n                if (packet) {\n                    // received final buffer\n                    this.reconstructor = null;\n                    super.emitReserved(\"decoded\", packet);\n                }\n            }\n        }\n        else {\n            throw new Error(\"Unknown type: \" + obj);\n        }\n    }\n    /**\n     * Decode a packet String (JSON data)\n     *\n     * @param {String} str\n     * @return {Object} packet\n     */\n    decodeString(str) {\n        let i = 0;\n        // look up type\n        const p = {\n            type: Number(str.charAt(0)),\n        };\n        if (PacketType[p.type] === undefined) {\n            throw new Error(\"unknown packet type \" + p.type);\n        }\n        // look up attachments if type binary\n        if (p.type === PacketType.BINARY_EVENT ||\n            p.type === PacketType.BINARY_ACK) {\n            const start = i + 1;\n            while (str.charAt(++i) !== \"-\" && i != str.length) { }\n            const buf = str.substring(start, i);\n            if (buf != Number(buf) || str.charAt(i) !== \"-\") {\n                throw new Error(\"Illegal attachments\");\n            }\n            p.attachments = Number(buf);\n        }\n        // look up namespace (if any)\n        if (\"/\" === str.charAt(i + 1)) {\n            const start = i + 1;\n            while (++i) {\n                const c = str.charAt(i);\n                if (\",\" === c)\n                    break;\n                if (i === str.length)\n                    break;\n            }\n            p.nsp = str.substring(start, i);\n        }\n        else {\n            p.nsp = \"/\";\n        }\n        // look up id\n        const next = str.charAt(i + 1);\n        if (\"\" !== next && Number(next) == next) {\n            const start = i + 1;\n            while (++i) {\n                const c = str.charAt(i);\n                if (null == c || Number(c) != c) {\n                    --i;\n                    break;\n                }\n                if (i === str.length)\n                    break;\n            }\n            p.id = Number(str.substring(start, i + 1));\n        }\n        // look up json data\n        if (str.charAt(++i)) {\n            const payload = this.tryParse(str.substr(i));\n            if (Decoder.isPayloadValid(p.type, payload)) {\n                p.data = payload;\n            }\n            else {\n                throw new Error(\"invalid payload\");\n            }\n        }\n        return p;\n    }\n    tryParse(str) {\n        try {\n            return JSON.parse(str, this.reviver);\n        }\n        catch (e) {\n            return false;\n        }\n    }\n    static isPayloadValid(type, payload) {\n        switch (type) {\n            case PacketType.CONNECT:\n                return typeof payload === \"object\";\n            case PacketType.DISCONNECT:\n                return payload === undefined;\n            case PacketType.CONNECT_ERROR:\n                return typeof payload === \"string\" || typeof payload === \"object\";\n            case PacketType.EVENT:\n            case PacketType.BINARY_EVENT:\n                return Array.isArray(payload) && payload.length > 0;\n            case PacketType.ACK:\n            case PacketType.BINARY_ACK:\n                return Array.isArray(payload);\n        }\n    }\n    /**\n     * Deallocates a parser's resources\n     */\n    destroy() {\n        if (this.reconstructor) {\n            this.reconstructor.finishedReconstruction();\n        }\n    }\n}\n/**\n * A manager of a binary event's 'buffer sequence'. Should\n * be constructed whenever a packet of type BINARY_EVENT is\n * decoded.\n *\n * @param {Object} packet\n * @return {BinaryReconstructor} initialized reconstructor\n */\nclass BinaryReconstructor {\n    constructor(packet) {\n        this.packet = packet;\n        this.buffers = [];\n        this.reconPack = packet;\n    }\n    /**\n     * Method to be called when binary data received from connection\n     * after a BINARY_EVENT packet.\n     *\n     * @param {Buffer | ArrayBuffer} binData - the raw binary data received\n     * @return {null | Object} returns null if more binary data is expected or\n     *   a reconstructed packet object if all buffers have been received.\n     */\n    takeBinaryData(binData) {\n        this.buffers.push(binData);\n        if (this.buffers.length === this.reconPack.attachments) {\n            // done with buffer list\n            const packet = reconstructPacket(this.reconPack, this.buffers);\n            this.finishedReconstruction();\n            return packet;\n        }\n        return null;\n    }\n    /**\n     * Cleans up binary packet reconstruction variables.\n     */\n    finishedReconstruction() {\n        this.reconPack = null;\n        this.buffers = [];\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/socket.io-client/build/esm/on.js\nfunction on(obj, ev, fn) {\n    obj.on(ev, fn);\n    return function subDestroy() {\n        obj.off(ev, fn);\n    };\n}\n\n;// CONCATENATED MODULE: ./node_modules/socket.io-client/build/esm/socket.js\n\n\n\n/**\n * Internal events.\n * These events can't be emitted by the user.\n */\nconst RESERVED_EVENTS = Object.freeze({\n    connect: 1,\n    connect_error: 1,\n    disconnect: 1,\n    disconnecting: 1,\n    // EventEmitter reserved events: https://nodejs.org/api/events.html#events_event_newlistener\n    newListener: 1,\n    removeListener: 1,\n});\nclass socket_Socket extends Emitter {\n    /**\n     * `Socket` constructor.\n     *\n     * @public\n     */\n    constructor(io, nsp, opts) {\n        super();\n        this.connected = false;\n        this.receiveBuffer = [];\n        this.sendBuffer = [];\n        this.ids = 0;\n        this.acks = {};\n        this.flags = {};\n        this.io = io;\n        this.nsp = nsp;\n        if (opts && opts.auth) {\n            this.auth = opts.auth;\n        }\n        if (this.io._autoConnect)\n            this.open();\n    }\n    /**\n     * Whether the socket is currently disconnected\n     */\n    get disconnected() {\n        return !this.connected;\n    }\n    /**\n     * Subscribe to open, close and packet events\n     *\n     * @private\n     */\n    subEvents() {\n        if (this.subs)\n            return;\n        const io = this.io;\n        this.subs = [\n            on(io, \"open\", this.onopen.bind(this)),\n            on(io, \"packet\", this.onpacket.bind(this)),\n            on(io, \"error\", this.onerror.bind(this)),\n            on(io, \"close\", this.onclose.bind(this)),\n        ];\n    }\n    /**\n     * Whether the Socket will try to reconnect when its Manager connects or reconnects\n     */\n    get active() {\n        return !!this.subs;\n    }\n    /**\n     * \"Opens\" the socket.\n     *\n     * @public\n     */\n    connect() {\n        if (this.connected)\n            return this;\n        this.subEvents();\n        if (!this.io[\"_reconnecting\"])\n            this.io.open(); // ensure open\n        if (\"open\" === this.io._readyState)\n            this.onopen();\n        return this;\n    }\n    /**\n     * Alias for connect()\n     */\n    open() {\n        return this.connect();\n    }\n    /**\n     * Sends a `message` event.\n     *\n     * @return self\n     * @public\n     */\n    send(...args) {\n        args.unshift(\"message\");\n        this.emit.apply(this, args);\n        return this;\n    }\n    /**\n     * Override `emit`.\n     * If the event is in `events`, it's emitted normally.\n     *\n     * @return self\n     * @public\n     */\n    emit(ev, ...args) {\n        if (RESERVED_EVENTS.hasOwnProperty(ev)) {\n            throw new Error('\"' + ev.toString() + '\" is a reserved event name');\n        }\n        args.unshift(ev);\n        const packet = {\n            type: PacketType.EVENT,\n            data: args,\n        };\n        packet.options = {};\n        packet.options.compress = this.flags.compress !== false;\n        // event ack callback\n        if (\"function\" === typeof args[args.length - 1]) {\n            const id = this.ids++;\n            const ack = args.pop();\n            this._registerAckCallback(id, ack);\n            packet.id = id;\n        }\n        const isTransportWritable = this.io.engine &&\n            this.io.engine.transport &&\n            this.io.engine.transport.writable;\n        const discardPacket = this.flags.volatile && (!isTransportWritable || !this.connected);\n        if (discardPacket) {\n        }\n        else if (this.connected) {\n            this.notifyOutgoingListeners(packet);\n            this.packet(packet);\n        }\n        else {\n            this.sendBuffer.push(packet);\n        }\n        this.flags = {};\n        return this;\n    }\n    /**\n     * @private\n     */\n    _registerAckCallback(id, ack) {\n        const timeout = this.flags.timeout;\n        if (timeout === undefined) {\n            this.acks[id] = ack;\n            return;\n        }\n        // @ts-ignore\n        const timer = this.io.setTimeoutFn(() => {\n            delete this.acks[id];\n            for (let i = 0; i < this.sendBuffer.length; i++) {\n                if (this.sendBuffer[i].id === id) {\n                    this.sendBuffer.splice(i, 1);\n                }\n            }\n            ack.call(this, new Error(\"operation has timed out\"));\n        }, timeout);\n        this.acks[id] = (...args) => {\n            // @ts-ignore\n            this.io.clearTimeoutFn(timer);\n            ack.apply(this, [null, ...args]);\n        };\n    }\n    /**\n     * Sends a packet.\n     *\n     * @param packet\n     * @private\n     */\n    packet(packet) {\n        packet.nsp = this.nsp;\n        this.io._packet(packet);\n    }\n    /**\n     * Called upon engine `open`.\n     *\n     * @private\n     */\n    onopen() {\n        if (typeof this.auth == \"function\") {\n            this.auth((data) => {\n                this.packet({ type: PacketType.CONNECT, data });\n            });\n        }\n        else {\n            this.packet({ type: PacketType.CONNECT, data: this.auth });\n        }\n    }\n    /**\n     * Called upon engine or manager `error`.\n     *\n     * @param err\n     * @private\n     */\n    onerror(err) {\n        if (!this.connected) {\n            this.emitReserved(\"connect_error\", err);\n        }\n    }\n    /**\n     * Called upon engine `close`.\n     *\n     * @param reason\n     * @param description\n     * @private\n     */\n    onclose(reason, description) {\n        this.connected = false;\n        delete this.id;\n        this.emitReserved(\"disconnect\", reason, description);\n    }\n    /**\n     * Called with socket packet.\n     *\n     * @param packet\n     * @private\n     */\n    onpacket(packet) {\n        const sameNamespace = packet.nsp === this.nsp;\n        if (!sameNamespace)\n            return;\n        switch (packet.type) {\n            case PacketType.CONNECT:\n                if (packet.data && packet.data.sid) {\n                    const id = packet.data.sid;\n                    this.onconnect(id);\n                }\n                else {\n                    this.emitReserved(\"connect_error\", new Error(\"It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)\"));\n                }\n                break;\n            case PacketType.EVENT:\n            case PacketType.BINARY_EVENT:\n                this.onevent(packet);\n                break;\n            case PacketType.ACK:\n            case PacketType.BINARY_ACK:\n                this.onack(packet);\n                break;\n            case PacketType.DISCONNECT:\n                this.ondisconnect();\n                break;\n            case PacketType.CONNECT_ERROR:\n                this.destroy();\n                const err = new Error(packet.data.message);\n                // @ts-ignore\n                err.data = packet.data.data;\n                this.emitReserved(\"connect_error\", err);\n                break;\n        }\n    }\n    /**\n     * Called upon a server event.\n     *\n     * @param packet\n     * @private\n     */\n    onevent(packet) {\n        const args = packet.data || [];\n        if (null != packet.id) {\n            args.push(this.ack(packet.id));\n        }\n        if (this.connected) {\n            this.emitEvent(args);\n        }\n        else {\n            this.receiveBuffer.push(Object.freeze(args));\n        }\n    }\n    emitEvent(args) {\n        if (this._anyListeners && this._anyListeners.length) {\n            const listeners = this._anyListeners.slice();\n            for (const listener of listeners) {\n                listener.apply(this, args);\n            }\n        }\n        super.emit.apply(this, args);\n    }\n    /**\n     * Produces an ack callback to emit with an event.\n     *\n     * @private\n     */\n    ack(id) {\n        const self = this;\n        let sent = false;\n        return function (...args) {\n            // prevent double callbacks\n            if (sent)\n                return;\n            sent = true;\n            self.packet({\n                type: PacketType.ACK,\n                id: id,\n                data: args,\n            });\n        };\n    }\n    /**\n     * Called upon a server acknowlegement.\n     *\n     * @param packet\n     * @private\n     */\n    onack(packet) {\n        const ack = this.acks[packet.id];\n        if (\"function\" === typeof ack) {\n            ack.apply(this, packet.data);\n            delete this.acks[packet.id];\n        }\n        else {\n        }\n    }\n    /**\n     * Called upon server connect.\n     *\n     * @private\n     */\n    onconnect(id) {\n        this.id = id;\n        this.connected = true;\n        this.emitBuffered();\n        this.emitReserved(\"connect\");\n    }\n    /**\n     * Emit buffered events (received and emitted).\n     *\n     * @private\n     */\n    emitBuffered() {\n        this.receiveBuffer.forEach((args) => this.emitEvent(args));\n        this.receiveBuffer = [];\n        this.sendBuffer.forEach((packet) => {\n            this.notifyOutgoingListeners(packet);\n            this.packet(packet);\n        });\n        this.sendBuffer = [];\n    }\n    /**\n     * Called upon server disconnect.\n     *\n     * @private\n     */\n    ondisconnect() {\n        this.destroy();\n        this.onclose(\"io server disconnect\");\n    }\n    /**\n     * Called upon forced client/server side disconnections,\n     * this method ensures the manager stops tracking us and\n     * that reconnections don't get triggered for this.\n     *\n     * @private\n     */\n    destroy() {\n        if (this.subs) {\n            // clean subscriptions to avoid reconnections\n            this.subs.forEach((subDestroy) => subDestroy());\n            this.subs = undefined;\n        }\n        this.io[\"_destroy\"](this);\n    }\n    /**\n     * Disconnects the socket manually.\n     *\n     * @return self\n     * @public\n     */\n    disconnect() {\n        if (this.connected) {\n            this.packet({ type: PacketType.DISCONNECT });\n        }\n        // remove socket from pool\n        this.destroy();\n        if (this.connected) {\n            // fire events\n            this.onclose(\"io client disconnect\");\n        }\n        return this;\n    }\n    /**\n     * Alias for disconnect()\n     *\n     * @return self\n     * @public\n     */\n    close() {\n        return this.disconnect();\n    }\n    /**\n     * Sets the compress flag.\n     *\n     * @param compress - if `true`, compresses the sending data\n     * @return self\n     * @public\n     */\n    compress(compress) {\n        this.flags.compress = compress;\n        return this;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the event message will be dropped when this socket is not\n     * ready to send messages.\n     *\n     * @returns self\n     * @public\n     */\n    get volatile() {\n        this.flags.volatile = true;\n        return this;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the callback will be called with an error when the\n     * given number of milliseconds have elapsed without an acknowledgement from the server:\n     *\n     * ```\n     * socket.timeout(5000).emit(\"my-event\", (err) => {\n     *   if (err) {\n     *     // the server did not acknowledge the event in the given delay\n     *   }\n     * });\n     * ```\n     *\n     * @returns self\n     * @public\n     */\n    timeout(timeout) {\n        this.flags.timeout = timeout;\n        return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback.\n     *\n     * @param listener\n     * @public\n     */\n    onAny(listener) {\n        this._anyListeners = this._anyListeners || [];\n        this._anyListeners.push(listener);\n        return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback. The listener is added to the beginning of the listeners array.\n     *\n     * @param listener\n     * @public\n     */\n    prependAny(listener) {\n        this._anyListeners = this._anyListeners || [];\n        this._anyListeners.unshift(listener);\n        return this;\n    }\n    /**\n     * Removes the listener that will be fired when any event is emitted.\n     *\n     * @param listener\n     * @public\n     */\n    offAny(listener) {\n        if (!this._anyListeners) {\n            return this;\n        }\n        if (listener) {\n            const listeners = this._anyListeners;\n            for (let i = 0; i < listeners.length; i++) {\n                if (listener === listeners[i]) {\n                    listeners.splice(i, 1);\n                    return this;\n                }\n            }\n        }\n        else {\n            this._anyListeners = [];\n        }\n        return this;\n    }\n    /**\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n     * e.g. to remove listeners.\n     *\n     * @public\n     */\n    listenersAny() {\n        return this._anyListeners || [];\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback.\n     *\n     * @param listener\n     *\n     * <pre><code>\n     *\n     * socket.onAnyOutgoing((event, ...args) => {\n     *   console.log(event);\n     * });\n     *\n     * </pre></code>\n     *\n     * @public\n     */\n    onAnyOutgoing(listener) {\n        this._anyOutgoingListeners = this._anyOutgoingListeners || [];\n        this._anyOutgoingListeners.push(listener);\n        return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback. The listener is added to the beginning of the listeners array.\n     *\n     * @param listener\n     *\n     * <pre><code>\n     *\n     * socket.prependAnyOutgoing((event, ...args) => {\n     *   console.log(event);\n     * });\n     *\n     * </pre></code>\n     *\n     * @public\n     */\n    prependAnyOutgoing(listener) {\n        this._anyOutgoingListeners = this._anyOutgoingListeners || [];\n        this._anyOutgoingListeners.unshift(listener);\n        return this;\n    }\n    /**\n     * Removes the listener that will be fired when any event is emitted.\n     *\n     * @param listener\n     *\n     * <pre><code>\n     *\n     * const handler = (event, ...args) => {\n     *   console.log(event);\n     * }\n     *\n     * socket.onAnyOutgoing(handler);\n     *\n     * // then later\n     * socket.offAnyOutgoing(handler);\n     *\n     * </pre></code>\n     *\n     * @public\n     */\n    offAnyOutgoing(listener) {\n        if (!this._anyOutgoingListeners) {\n            return this;\n        }\n        if (listener) {\n            const listeners = this._anyOutgoingListeners;\n            for (let i = 0; i < listeners.length; i++) {\n                if (listener === listeners[i]) {\n                    listeners.splice(i, 1);\n                    return this;\n                }\n            }\n        }\n        else {\n            this._anyOutgoingListeners = [];\n        }\n        return this;\n    }\n    /**\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n     * e.g. to remove listeners.\n     *\n     * @public\n     */\n    listenersAnyOutgoing() {\n        return this._anyOutgoingListeners || [];\n    }\n    /**\n     * Notify the listeners for each packet sent\n     *\n     * @param packet\n     *\n     * @private\n     */\n    notifyOutgoingListeners(packet) {\n        if (this._anyOutgoingListeners && this._anyOutgoingListeners.length) {\n            const listeners = this._anyOutgoingListeners.slice();\n            for (const listener of listeners) {\n                listener.apply(this, packet.data);\n            }\n        }\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/socket.io-client/build/esm/contrib/backo2.js\n/**\n * Initialize backoff timer with `opts`.\n *\n * - `min` initial timeout in milliseconds [100]\n * - `max` max timeout [10000]\n * - `jitter` [0]\n * - `factor` [2]\n *\n * @param {Object} opts\n * @api public\n */\nfunction Backoff(opts) {\n    opts = opts || {};\n    this.ms = opts.min || 100;\n    this.max = opts.max || 10000;\n    this.factor = opts.factor || 2;\n    this.jitter = opts.jitter > 0 && opts.jitter <= 1 ? opts.jitter : 0;\n    this.attempts = 0;\n}\n/**\n * Return the backoff duration.\n *\n * @return {Number}\n * @api public\n */\nBackoff.prototype.duration = function () {\n    var ms = this.ms * Math.pow(this.factor, this.attempts++);\n    if (this.jitter) {\n        var rand = Math.random();\n        var deviation = Math.floor(rand * this.jitter * ms);\n        ms = (Math.floor(rand * 10) & 1) == 0 ? ms - deviation : ms + deviation;\n    }\n    return Math.min(ms, this.max) | 0;\n};\n/**\n * Reset the number of attempts.\n *\n * @api public\n */\nBackoff.prototype.reset = function () {\n    this.attempts = 0;\n};\n/**\n * Set the minimum duration\n *\n * @api public\n */\nBackoff.prototype.setMin = function (min) {\n    this.ms = min;\n};\n/**\n * Set the maximum duration\n *\n * @api public\n */\nBackoff.prototype.setMax = function (max) {\n    this.max = max;\n};\n/**\n * Set the jitter\n *\n * @api public\n */\nBackoff.prototype.setJitter = function (jitter) {\n    this.jitter = jitter;\n};\n\n;// CONCATENATED MODULE: ./node_modules/socket.io-client/build/esm/manager.js\n\n\n\n\n\n\nclass Manager extends Emitter {\n    constructor(uri, opts) {\n        var _a;\n        super();\n        this.nsps = {};\n        this.subs = [];\n        if (uri && \"object\" === typeof uri) {\n            opts = uri;\n            uri = undefined;\n        }\n        opts = opts || {};\n        opts.path = opts.path || \"/socket.io\";\n        this.opts = opts;\n        installTimerFunctions(this, opts);\n        this.reconnection(opts.reconnection !== false);\n        this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);\n        this.reconnectionDelay(opts.reconnectionDelay || 1000);\n        this.reconnectionDelayMax(opts.reconnectionDelayMax || 5000);\n        this.randomizationFactor((_a = opts.randomizationFactor) !== null && _a !== void 0 ? _a : 0.5);\n        this.backoff = new Backoff({\n            min: this.reconnectionDelay(),\n            max: this.reconnectionDelayMax(),\n            jitter: this.randomizationFactor(),\n        });\n        this.timeout(null == opts.timeout ? 20000 : opts.timeout);\n        this._readyState = \"closed\";\n        this.uri = uri;\n        const _parser = opts.parser || socket_io_parser_build_esm_namespaceObject;\n        this.encoder = new _parser.Encoder();\n        this.decoder = new _parser.Decoder();\n        this._autoConnect = opts.autoConnect !== false;\n        if (this._autoConnect)\n            this.open();\n    }\n    reconnection(v) {\n        if (!arguments.length)\n            return this._reconnection;\n        this._reconnection = !!v;\n        return this;\n    }\n    reconnectionAttempts(v) {\n        if (v === undefined)\n            return this._reconnectionAttempts;\n        this._reconnectionAttempts = v;\n        return this;\n    }\n    reconnectionDelay(v) {\n        var _a;\n        if (v === undefined)\n            return this._reconnectionDelay;\n        this._reconnectionDelay = v;\n        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMin(v);\n        return this;\n    }\n    randomizationFactor(v) {\n        var _a;\n        if (v === undefined)\n            return this._randomizationFactor;\n        this._randomizationFactor = v;\n        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setJitter(v);\n        return this;\n    }\n    reconnectionDelayMax(v) {\n        var _a;\n        if (v === undefined)\n            return this._reconnectionDelayMax;\n        this._reconnectionDelayMax = v;\n        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMax(v);\n        return this;\n    }\n    timeout(v) {\n        if (!arguments.length)\n            return this._timeout;\n        this._timeout = v;\n        return this;\n    }\n    /**\n     * Starts trying to reconnect if reconnection is enabled and we have not\n     * started reconnecting yet\n     *\n     * @private\n     */\n    maybeReconnectOnOpen() {\n        // Only try to reconnect if it's the first time we're connecting\n        if (!this._reconnecting &&\n            this._reconnection &&\n            this.backoff.attempts === 0) {\n            // keeps reconnection from firing twice for the same reconnection loop\n            this.reconnect();\n        }\n    }\n    /**\n     * Sets the current transport `socket`.\n     *\n     * @param {Function} fn - optional, callback\n     * @return self\n     * @public\n     */\n    open(fn) {\n        if (~this._readyState.indexOf(\"open\"))\n            return this;\n        this.engine = new Socket(this.uri, this.opts);\n        const socket = this.engine;\n        const self = this;\n        this._readyState = \"opening\";\n        this.skipReconnect = false;\n        // emit `open`\n        const openSubDestroy = on(socket, \"open\", function () {\n            self.onopen();\n            fn && fn();\n        });\n        // emit `error`\n        const errorSub = on(socket, \"error\", (err) => {\n            self.cleanup();\n            self._readyState = \"closed\";\n            this.emitReserved(\"error\", err);\n            if (fn) {\n                fn(err);\n            }\n            else {\n                // Only do this if there is no fn to handle the error\n                self.maybeReconnectOnOpen();\n            }\n        });\n        if (false !== this._timeout) {\n            const timeout = this._timeout;\n            if (timeout === 0) {\n                openSubDestroy(); // prevents a race condition with the 'open' event\n            }\n            // set timer\n            const timer = this.setTimeoutFn(() => {\n                openSubDestroy();\n                socket.close();\n                // @ts-ignore\n                socket.emit(\"error\", new Error(\"timeout\"));\n            }, timeout);\n            if (this.opts.autoUnref) {\n                timer.unref();\n            }\n            this.subs.push(function subDestroy() {\n                clearTimeout(timer);\n            });\n        }\n        this.subs.push(openSubDestroy);\n        this.subs.push(errorSub);\n        return this;\n    }\n    /**\n     * Alias for open()\n     *\n     * @return self\n     * @public\n     */\n    connect(fn) {\n        return this.open(fn);\n    }\n    /**\n     * Called upon transport open.\n     *\n     * @private\n     */\n    onopen() {\n        // clear old subs\n        this.cleanup();\n        // mark as open\n        this._readyState = \"open\";\n        this.emitReserved(\"open\");\n        // add new subs\n        const socket = this.engine;\n        this.subs.push(on(socket, \"ping\", this.onping.bind(this)), on(socket, \"data\", this.ondata.bind(this)), on(socket, \"error\", this.onerror.bind(this)), on(socket, \"close\", this.onclose.bind(this)), on(this.decoder, \"decoded\", this.ondecoded.bind(this)));\n    }\n    /**\n     * Called upon a ping.\n     *\n     * @private\n     */\n    onping() {\n        this.emitReserved(\"ping\");\n    }\n    /**\n     * Called with data.\n     *\n     * @private\n     */\n    ondata(data) {\n        try {\n            this.decoder.add(data);\n        }\n        catch (e) {\n            this.onclose(\"parse error\");\n        }\n    }\n    /**\n     * Called when parser fully decodes a packet.\n     *\n     * @private\n     */\n    ondecoded(packet) {\n        this.emitReserved(\"packet\", packet);\n    }\n    /**\n     * Called upon socket error.\n     *\n     * @private\n     */\n    onerror(err) {\n        this.emitReserved(\"error\", err);\n    }\n    /**\n     * Creates a new socket for the given `nsp`.\n     *\n     * @return {Socket}\n     * @public\n     */\n    socket(nsp, opts) {\n        let socket = this.nsps[nsp];\n        if (!socket) {\n            socket = new socket_Socket(this, nsp, opts);\n            this.nsps[nsp] = socket;\n        }\n        return socket;\n    }\n    /**\n     * Called upon a socket close.\n     *\n     * @param socket\n     * @private\n     */\n    _destroy(socket) {\n        const nsps = Object.keys(this.nsps);\n        for (const nsp of nsps) {\n            const socket = this.nsps[nsp];\n            if (socket.active) {\n                return;\n            }\n        }\n        this._close();\n    }\n    /**\n     * Writes a packet.\n     *\n     * @param packet\n     * @private\n     */\n    _packet(packet) {\n        const encodedPackets = this.encoder.encode(packet);\n        for (let i = 0; i < encodedPackets.length; i++) {\n            this.engine.write(encodedPackets[i], packet.options);\n        }\n    }\n    /**\n     * Clean up transport subscriptions and packet buffer.\n     *\n     * @private\n     */\n    cleanup() {\n        this.subs.forEach((subDestroy) => subDestroy());\n        this.subs.length = 0;\n        this.decoder.destroy();\n    }\n    /**\n     * Close the current socket.\n     *\n     * @private\n     */\n    _close() {\n        this.skipReconnect = true;\n        this._reconnecting = false;\n        this.onclose(\"forced close\");\n        if (this.engine)\n            this.engine.close();\n    }\n    /**\n     * Alias for close()\n     *\n     * @private\n     */\n    disconnect() {\n        return this._close();\n    }\n    /**\n     * Called upon engine close.\n     *\n     * @private\n     */\n    onclose(reason, description) {\n        this.cleanup();\n        this.backoff.reset();\n        this._readyState = \"closed\";\n        this.emitReserved(\"close\", reason, description);\n        if (this._reconnection && !this.skipReconnect) {\n            this.reconnect();\n        }\n    }\n    /**\n     * Attempt a reconnection.\n     *\n     * @private\n     */\n    reconnect() {\n        if (this._reconnecting || this.skipReconnect)\n            return this;\n        const self = this;\n        if (this.backoff.attempts >= this._reconnectionAttempts) {\n            this.backoff.reset();\n            this.emitReserved(\"reconnect_failed\");\n            this._reconnecting = false;\n        }\n        else {\n            const delay = this.backoff.duration();\n            this._reconnecting = true;\n            const timer = this.setTimeoutFn(() => {\n                if (self.skipReconnect)\n                    return;\n                this.emitReserved(\"reconnect_attempt\", self.backoff.attempts);\n                // check again for the case socket closed in above events\n                if (self.skipReconnect)\n                    return;\n                self.open((err) => {\n                    if (err) {\n                        self._reconnecting = false;\n                        self.reconnect();\n                        this.emitReserved(\"reconnect_error\", err);\n                    }\n                    else {\n                        self.onreconnect();\n                    }\n                });\n            }, delay);\n            if (this.opts.autoUnref) {\n                timer.unref();\n            }\n            this.subs.push(function subDestroy() {\n                clearTimeout(timer);\n            });\n        }\n    }\n    /**\n     * Called upon successful reconnect.\n     *\n     * @private\n     */\n    onreconnect() {\n        const attempt = this.backoff.attempts;\n        this._reconnecting = false;\n        this.backoff.reset();\n        this.emitReserved(\"reconnect\", attempt);\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/socket.io-client/build/esm/index.js\n\n\n\n/**\n * Managers cache.\n */\nconst cache = {};\nfunction esm_lookup(uri, opts) {\n    if (typeof uri === \"object\") {\n        opts = uri;\n        uri = undefined;\n    }\n    opts = opts || {};\n    const parsed = url(uri, opts.path || \"/socket.io\");\n    const source = parsed.source;\n    const id = parsed.id;\n    const path = parsed.path;\n    const sameNamespace = cache[id] && path in cache[id][\"nsps\"];\n    const newConnection = opts.forceNew ||\n        opts[\"force new connection\"] ||\n        false === opts.multiplex ||\n        sameNamespace;\n    let io;\n    if (newConnection) {\n        io = new Manager(source, opts);\n    }\n    else {\n        if (!cache[id]) {\n            cache[id] = new Manager(source, opts);\n        }\n        io = cache[id];\n    }\n    if (parsed.query && !opts.query) {\n        opts.query = parsed.queryKey;\n    }\n    return io.socket(parsed.path, opts);\n}\n// so that \"lookup\" can be used both as a function (e.g. `io(...)`) and as a\n// namespace (e.g. `io.connect(...)`), for backward compatibility\nObject.assign(esm_lookup, {\n    Manager: Manager,\n    Socket: socket_Socket,\n    io: esm_lookup,\n    connect: esm_lookup,\n});\n/**\n * Protocol version.\n *\n * @public\n */\n\n/**\n * Expose constructors for standalone build.\n *\n * @public\n */\n\n\n\n/***/ })\n\n}]);"],"names":["self","push","__unused_webpack___webpack_module__","__webpack_exports__","__webpack_require__","d","esm_lookup","PacketType","socket_io_parser_build_esm_namespaceObject","r","Decoder","Encoder","build_esm_protocol","PACKET_TYPES","Object","create","PACKET_TYPES_REVERSE","keys","forEach","key","ERROR_PACKET","type","data","withNativeBlob","Blob","prototype","toString","call","withNativeArrayBuffer","ArrayBuffer","isView","obj","buffer","encodePacket","supportsBinary","callback","encodeBlobAsBase64","fileReader","FileReader","onload","content","result","split","readAsDataURL","chars","lookup","Uint8Array","i","length","charCodeAt","decode","bufferLength","base64","len","p","encoded1","encoded2","encoded3","encoded4","arraybuffer","bytes","decodePacket_browser_withNativeArrayBuffer","decodePacket","encodedPacket","binaryType","mapBinary","charAt","decodeBase64Packet","substring","packetType","decoded","encodePayload","packets","encodedPackets","count","packet","encodePacket_browser","join","String","decodePayload","encodedPayload","decodedPacket","decodePacket_browser","Emitter","mixin","on","addEventListener","event","fn","_callbacks","once","off","apply","arguments","removeListener","removeAllListeners","removeEventListener","cb","callbacks","splice","emit","args","slice","emitReserved","listeners","hasListeners","globalThisShim","window","Function","pick","attr","reduce","acc","k","hasOwnProperty","NATIVE_SET_TIMEOUT","setTimeout","NATIVE_CLEAR_TIMEOUT","clearTimeout","installTimerFunctions","opts","useNativeTimers","setTimeoutFn","bind","clearTimeoutFn","TransportError","Error","constructor","reason","description","context","Transport","writable","query","readyState","socket","onError","open","doOpen","close","doClose","onClose","send","write","onOpen","onData","onPacket","details","alphabet","map","seed","prev","yeast_encode","num","encoded","Math","floor","yeast","now","Date","parseqs_encode","str","encodeURIComponent","value","XMLHttpRequest","err","hasCORS","XHR","xdomain","e","concat","empty","hasXHR2","xhr","responseType","Request","uri","method","async","undefined","xd","xscheme","xs","extraHeaders","setDisableHeaderCheck","setRequestHeader","withCredentials","requestTimeout","timeout","onreadystatechange","status","onLoad","document","index","requestsCount","requests","cleanup","fromError","abort","responseText","unloadHandler","attachEvent","nextTick","isPromiseAvailable","Promise","resolve","then","WebSocket","MozWebSocket","isReactNative","navigator","product","toLowerCase","transports","websocket","forceBase64","name","check","protocols","headers","ws","usingBrowserWebSocket","addEventListeners","onopen","autoUnref","_socket","unref","onclose","closeEvent","onmessage","ev","onerror","lastPacket","schema","secure","port","Number","timestampRequests","timestampParam","b64","encodedQuery","ipv6","hostname","indexOf","path","polling","location","isSSL","protocol","poll","pause","onPause","total","doPoll","doWrite","sid","request","assign","req","xhrStatus","pollXhr","re","parts","parse","src","b","replace","m","exec","source","host","authority","ipv6uri","pathNames","names","substr","queryKey","$0","$1","$2","Socket","writeBuffer","prevBufferLen","agent","upgrade","rememberUpgrade","rejectUnauthorized","perMessageDeflate","threshold","transportOptions","closeOnBeforeunload","parseqs_decode","qs","qry","pairs","l","pair","decodeURIComponent","id","upgrades","pingInterval","pingTimeout","pingTimeoutTimer","transport","offlineEventListener","createTransport","EIO","priorWebsocketSuccess","shift","setTransport","onDrain","probe","failed","onTransportOpen","msg","upgrading","flush","freezeTransport","error","onTransportClose","onupgrade","to","onHandshake","JSON","resetPingTimeout","sendPacket","code","filterUpgrades","maxPayload","getWritablePackets","shouldCheckPayloadSize","payloadSize","utf8Length","c","ceil","byteLength","size","options","compress","cleanupAndClose","waitForUpgrade","filteredUpgrades","j","is_binary_withNativeArrayBuffer","is_binary_isView","is_binary_toString","is_binary_withNativeBlob","withNativeFile","File","isBinary","replacer","encode","EVENT","ACK","hasBinary","toJSON","Array","isArray","BINARY_EVENT","BINARY_ACK","encodeAsBinary","encodeAsString","attachments","nsp","stringify","deconstruction","deconstructPacket","buffers","packetData","pack","_deconstructPacket","placeholder","_placeholder","newData","unshift","reviver","add","reconstructor","decodeString","BinaryReconstructor","takeBinaryData","start","buf","next","payload","tryParse","isPayloadValid","CONNECT","DISCONNECT","CONNECT_ERROR","destroy","finishedReconstruction","reconPack","binData","_reconstructPacket","isIndexValid","RESERVED_EVENTS","freeze","connect","connect_error","disconnect","disconnecting","newListener","socket_Socket","io","connected","receiveBuffer","sendBuffer","ids","acks","flags","auth","_autoConnect","disconnected","subEvents","subs","onpacket","active","_readyState","ack","pop","_registerAckCallback","isTransportWritable","engine","discardPacket","volatile","notifyOutgoingListeners","timer","_packet","sameNamespace","onconnect","onevent","onack","ondisconnect","message","emitEvent","_anyListeners","listener","sent","emitBuffered","subDestroy","onAny","prependAny","offAny","listenersAny","onAnyOutgoing","_anyOutgoingListeners","prependAnyOutgoing","offAnyOutgoing","listenersAnyOutgoing","Backoff","ms","min","max","factor","jitter","attempts","duration","pow","rand","random","deviation","reset","setMin","setMax","setJitter","Manager","_a","nsps","reconnection","reconnectionAttempts","Infinity","reconnectionDelay","reconnectionDelayMax","randomizationFactor","backoff","_parser","parser","encoder","decoder","autoConnect","v","_reconnection","_reconnectionAttempts","_reconnectionDelay","_randomizationFactor","_reconnectionDelayMax","_timeout","maybeReconnectOnOpen","_reconnecting","reconnect","skipReconnect","openSubDestroy","errorSub","onping","ondata","ondecoded","_destroy","_close","delay","onreconnect","attempt","cache","parsed","url","loc","test","href","newConnection","forceNew","multiplex"],"sourceRoot":""}