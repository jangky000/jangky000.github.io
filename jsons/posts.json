[{"id":1642690800,"title":"유한한 Action을 통한 상태 관리","author":"jangky000","date":"2022.01.21","content":"\n# 업무\n\n- 상품 필터 제작\n    1. [상품 필터 속성 - 셀렉터] \n        - ex. “상품 이름”, “상품 ID”, “카테고리”\n    2. [값 of 상품 필터 속성 - 모달]\n        - 상품 이름을 선택했을 때 → ex. “샘플 상품1”, “샘플 상품2”\n\n# 주제\n\n- 2번 `[값 of 상품 필터 속성 - 모달]` 컴포넌트를 리팩토링하면서\n- `액션 정의`를 통해 상태의 `사이드 이펙트` 를 관리했던 경험을 이야기해보고자 한다.\n\n![1](https://user-images.githubusercontent.com/46799722/150506783-3b601978-3d5e-4603-ac62-a8eb6656ebd1.png)\n\n![2](https://user-images.githubusercontent.com/46799722/150506774-d2dad4a7-8978-4abd-8cfd-7830cf85b245.png)\n\n![3](https://user-images.githubusercontent.com/46799722/150506777-886c7aac-1f6a-4437-99db-7d5197bdab88.png)\n\n![4](https://user-images.githubusercontent.com/46799722/150506781-2b375c4f-94d9-4b36-88e9-da9bf1085507.png)\n\n![5](https://user-images.githubusercontent.com/46799722/150506766-f515c78f-55cf-4702-96d9-3c0eb51005d9.png)\n\n# 시나리오\n\n- [값 of 상품 필터 속성 - 모달]: **<PropertyFilterValueModal2 />**\n    - API에서 `값 of 상품 필터 속성`을 5개씩 끊어서 불러옴\n        - 스크롤을 내리면 추가로 5개를 더 불러옴\n    - 각각의 옵션(값)을 눌러 체크박스를 선택/해제\n    - `모든 속성 선택` 을 눌렀을 때, 모든 옵션(값)의 체크 박스가 선택\n    - 검색 칸에 문구를 입력하면,\n        - API에서 해당 검색 문자를 포함하는 `값 of 상품 필터 속성`을 5개씩 끊어서 불러옴\n        - `모든 속성 선택` 옵션 숨김\n        - `‘[검색어]’를 포함한 모든 속성 선택` 옵션이 노출\n        - `‘[검색어]’를 포함한 모든 속성 선택`을 누르면\n\n# #1 액션을 정의하지 않았을 때\n\n## useState로 상태 관리\n\n- useState로 정의한 상태는 다음과 같다.\n    - 검색 키워드(searchKeyword)\n    - 모두 선택 여부(isAllChecked)\n    - 값의 체크 여부를 담고 있는 옵션 리스트(optionList)\n    - 체크된 값의 이름을 저장하는 리스트(checkedPropertyValueList)\n    \n    ```tsx\n    const [searchKeyword, setSearchKeyword] = useState<string>(testSearchKeyword || '');\n    const [isAllChecked, setIsAllChecked] = useState<boolean>(false);\n    const [optionList, setOptionList] = useState<IPropertyValue[]>(testOptionData || []);\n    const [checkedPropertyValueList, setCheckedPropertyValueList] = useState<string[]>([]);\n    const [skip, setSkip] = useState<number>(0);\n    ```\n    \n- presenter\n    \n    ```tsx\n    // presenter\n    \n    import React, { FC, useMemo } from 'react';\n    import InfiniteScroll from 'react-infinite-scroll-component';\n    import i18next from 'i18next';\n    import { Backdrop } from '../../Backdrop/Backdrop';\n    import { StyledBackButton, StyledLayout, StyledModalOption, StyledSearch } from './PropertyValueFilterModal2.style';\n    import { FontIcon } from '../../FontIcon/FontIcon';\n    import { BGCheckbox } from '../../BGCheckbox/BGCheckbox';\n    import { BGTooltip } from '../../BGTooltip/BGTooltip';\n    import { BGLoadingSpinner } from '../../BGLoadingSpinner/BGLoadingSpinner';\n    import { BGButtonGroup } from '../../BGButtonGroup/BGButtonGroup';\n    import { BGButton } from '../../BGButton/BGButton';\n    import { BGEmpty } from '../../BGEmpty/BGEmpty';\n    import { IProductProperty } from '../ProductSelectBox/ProductSelectBox.interface';\n    \n    type IsFetching = boolean;\n    \n    export interface IPropertyValue {\n      value: string;\n      checked: boolean;\n    }\n    \n    export interface PropertyValueFilterModal2PresenterProps {\n      isAllChecked: boolean;\n      toggleAllChecked: () => void;\n      searchKeyword: string;\n      handleSearchKeyword: (keyword: string) => void;\n      backToModal1: () => void;\n      closeModal: () => void;\n      optionList: IPropertyValue[];\n      toggleOption: (value: string) => void;\n      isFetching: IsFetching;\n      infiniteNext: () => void;\n      infiniteHasMore: boolean;\n      infiniteSkip: number;\n      selectedProductProperty: IProductProperty;\n      createFilterInfo: () => void;\n    }\n    \n    export const PropertyValueFilterModal2Presenter: FC<PropertyValueFilterModal2PresenterProps> = ({\n      isAllChecked,\n      toggleAllChecked,\n      searchKeyword,\n      handleSearchKeyword,\n      backToModal1,\n      closeModal,\n      optionList,\n      toggleOption,\n      isFetching,\n      infiniteNext,\n      infiniteHasMore,\n      infiniteSkip,\n      selectedProductProperty,\n      createFilterInfo,\n    }: PropertyValueFilterModal2PresenterProps) => {\n      const handleInput = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const keyword = event.target.value;\n        if (typeof keyword === 'string') handleSearchKeyword(keyword);\n      };\n    \n      const saveFilter = () => {\n        createFilterInfo();\n        closeModal();\n      };\n    \n      const isNoData = useMemo(() => optionList.length === 0 && !isFetching, [optionList, isFetching]);\n    \n      const isAnyChecked = useMemo(() => optionList.some((option) => option.checked === true), [optionList]);\n    \n      return (\n        <React.Fragment>\n          <Backdrop handleClick={closeModal} />\n          <StyledLayout>\n            <div className=\"top\">\n              <StyledBackButton onClick={backToModal1}>\n                <FontIcon name=\"ic-arrow-left\" size=\"16px\" />\n                <div>{selectedProductProperty.name}</div>\n              </StyledBackButton>\n            </div>\n            <StyledSearch>\n              <div className=\"search-input\">\n                <FontIcon name=\"ic-search\" size=\"16px\" />\n                <input\n                  data-testid=\"search-text\"\n                  type=\"text\"\n                  name=\"keyword\"\n                  placeholder=\"검색\"\n                  autoComplete=\"off\"\n                  onChange={handleInput}\n                />\n              </div>\n            </StyledSearch>\n            <InfiniteScroll\n              next={infiniteNext}\n              hasMore={infiniteHasMore}\n              dataLength={infiniteSkip}\n              height={220}\n              loader={<BGLoadingSpinner isLoading={isFetching} />}\n            >\n              <StyledModalOption>\n                {optionList.length > 0 && (\n                  <div className=\"row\" data-testid=\"check-all-button\" onClick={toggleAllChecked}>\n                    <BGCheckbox checked={isAllChecked} size={20} style={{ marginRight: '0.5em' }} />\n                    <div className=\"label\">\n                      {searchKeyword\n                        ? i18next.t('\"{{keyword}}\"을 포함한 모든 속성', { keyword: searchKeyword })\n                        : i18next.t('모든 속성')}\n                    </div>\n                  </div>\n                )}\n    \n                {optionList.map((option) => (\n                  <div\n                    data-testid={`option-${option.value}`}\n                    className=\"row\"\n                    key={option.value}\n                    onClick={() => toggleOption(option.value)}\n                  >\n                    <BGCheckbox checked={option.checked} size={20} style={{ marginRight: '0.5em' }} />\n                    <div className=\"label\">\n                      <BGTooltip title={option.value} placement=\"right\">\n                        <div className=\"tooltip\">{option.value}</div>\n                      </BGTooltip>\n                    </div>\n                  </div>\n                ))}\n                {isNoData && searchKeyword && (\n                  <BGEmpty title={i18next.t('\"{{keyword}}\"를 포함하는 데이터가 없습니다.', { keyword: searchKeyword })} />\n                )}\n                {isNoData && !searchKeyword && <BGEmpty title={i18next.t('데이터가 없습니다.')} />}\n              </StyledModalOption>\n            </InfiniteScroll>\n            <BGButtonGroup style={{ justifyContent: 'end', margin: '10px 10px 0 0' }}>\n              <BGButton appearance=\"secondary\" label={i18next.t('취소')} onClick={closeModal} />\n              <BGButton className=\"save-button\" label={i18next.t('확인')} onClick={saveFilter} isDisabled={!isAnyChecked} />\n            </BGButtonGroup>\n          </StyledLayout>\n        </React.Fragment>\n      );\n    };\n    ```\n    \n- container\n    \n    ```tsx\n    // container\n    \n    import React, { FC, useState, useMemo, useEffect, useCallback } from 'react';\n    import { cloneDeep, isEqual } from 'lodash';\n    import { IPropertyValue, PropertyValueFilterModal2Presenter } from './PropertyValueFilterModal2Presenter';\n    import { IFilterNotIn, IFilterNotMatch } from './PropertyValueFilterModal2.interface';\n    import { useInfiniteFormattingQuery } from '../../../hooks/useCustomQuery';\n    import { EventPropertyApi } from '../../../lib/api/EventProperty';\n    import BiginStorage from '../../../services/BiginStorage';\n    import { IProductProperty } from '../ProductSelectBox/ProductSelectBox.interface';\n    \n    interface APIResult {\n      eventPropertyValues: { value: string }[];\n      more: boolean;\n    }\n    \n    export interface PropertyValueFilterModal2ContainerProps {\n      initFilter: IFilterNotIn | IFilterNotMatch | undefined; // 초기 필터 세팅\n      handleFilter: (createdFilter: IFilterNotIn | IFilterNotMatch) => void; // 완성된 필터 반환\n      backToModal1: () => void;\n      closeModal: () => void; // 모달 닫기\n      selectedProductProperty: IProductProperty; // {id: 'event_seg_...', 'name': '상품 이름'}\n      testOptionData?: IPropertyValue[]; // 테스트\n      testSearchKeyword?: string; // 테스트\n    }\n    \n    export const PropertyValueFilterModal2Container: FC<PropertyValueFilterModal2ContainerProps> = ({\n      initFilter,\n      handleFilter,\n      backToModal1,\n      closeModal,\n      selectedProductProperty,\n      testOptionData,\n      testSearchKeyword,\n    }: PropertyValueFilterModal2ContainerProps) => {\n      const [searchKeyword, setSearchKeyword] = useState<string>(testSearchKeyword || '');\n      const [isAllChecked, setIsAllChecked] = useState<boolean>(false);\n      const [optionList, setOptionList] = useState<IPropertyValue[]>(testOptionData || []);\n      const [checkedPropertyValueList, setCheckedPropertyValueList] = useState<string[]>([]);\n    \n      // ====================================== ~를 포함한 모든 속성 선택 관리(searchKeyword + isAllChecked) =====================================\n      const handleSearchKeyword = (keyword: string) => {\n        if (testSearchKeyword) return;\n        setSearchKeyword(keyword);\n      };\n      useEffect(() => {\n        setIsAllChecked(false);\n      }, [searchKeyword]);\n    \n      // ====================================== 체크된 속성 값 handler =======================================\n      const addCheckedPropertyValue = (value: string) => {\n        const shallowCopiedList = [...checkedPropertyValueList];\n        shallowCopiedList.push(value);\n        setCheckedPropertyValueList(shallowCopiedList);\n      };\n      const removeCheckedPropertyValue = (value: string) => {\n        const filteredList = checkedPropertyValueList.filter((item) => item !== value);\n        setCheckedPropertyValueList(filteredList);\n      };\n    \n      // ====================================== select 옵션 handler ========================================================\n      const toggleOption = (value: string) => {\n        const deepCopied = cloneDeep(optionList);\n        const index = deepCopied.findIndex((item) => item.value === value);\n        const isChecked = !deepCopied[index].checked;\n    \n        deepCopied[index].checked = isChecked;\n        setOptionList(deepCopied);\n    \n        // checkedPropertyValue 업데이트\n        if (isChecked) addCheckedPropertyValue(deepCopied[index].value);\n        else removeCheckedPropertyValue(deepCopied[index].value);\n    \n        // all checked\n        const allChecked = deepCopied.every((item) => item.checked === true);\n        if (allChecked) setIsAllChecked(true);\n        else setIsAllChecked(false);\n      };\n    \n      // ====================================== 모든 속성 선택 handler =====================================\n      const toggleAllChecked = useCallback(() => {\n        const isChecked = !isAllChecked;\n        if (isChecked) {\n          // 전체 선택\n          const deepCopied = cloneDeep(optionList);\n          const updatedList = deepCopied.map((item) => ({ ...item, checked: isChecked }));\n          setOptionList(updatedList);\n          setCheckedPropertyValueList(deepCopied.map((item) => item.value));\n        } else {\n          // 전체 초기화\n          const deepCopied = cloneDeep(optionList);\n          const updatedList = deepCopied.map((item) => ({ ...item, checked: isChecked }));\n          setOptionList(updatedList);\n          setCheckedPropertyValueList([]);\n        }\n        setIsAllChecked(isChecked);\n      }, [isAllChecked, optionList]);\n    \n      // ======================================infinite scroll ========================================================\n      const limit = 5;\n      const projectID = useMemo(() => BiginStorage.selectedProject?.id, []);\n      const queryOptions = useMemo(\n        () => ({ enabled: Boolean(projectID), refetchOnWindowFocus: false, cacheTime: 0, retry: false }),\n        [],\n      );\n    \n      // skip\n      const [skip, setSkip] = useState<number>(0);\n      const updateSkip = useCallback(() => {\n        setSkip(optionList.length);\n      }, [optionList]);\n    \n      useEffect(() => {\n        updateSkip();\n      }, [optionList]);\n    \n      const query = useMemo(() => {\n        const basicQuery = {\n          application: projectID,\n          name: selectedProductProperty.id,\n        };\n    \n        const keywordQuery = {\n          application: projectID,\n          name: selectedProductProperty.id,\n          searchText: searchKeyword,\n        };\n        return searchKeyword === '' ? basicQuery : keywordQuery;\n      }, [projectID, searchKeyword, selectedProductProperty.id]);\n    \n      // api 결과 formatting\n      const formattingResult = useCallback(\n        (result: APIResult | undefined): IPropertyValue[] => {\n          if (!result) return [];\n          const list = result.eventPropertyValues.map((apiResultObj) => {\n            const isPrevChecked = !!checkedPropertyValueList.find((value) => value === apiResultObj.value);\n            return { ...apiResultObj, checked: isAllChecked || isPrevChecked };\n          });\n          return list;\n        },\n        [checkedPropertyValueList],\n      );\n    \n      // api 요청\n      const { data: newPropertyValueList, isFetching, refetch, fetchNextPage, hasNextPage } = useInfiniteFormattingQuery(\n        ['propertyValueList', searchKeyword],\n        ({ pageParam = 0 }) =>\n          EventPropertyApi.findEventPropValue({\n            query,\n            limit,\n            skip: pageParam,\n          }),\n    \n        {\n          ...queryOptions,\n          getNextPageParam: () => {\n            return skip ?? false;\n          },\n        },\n        formattingResult,\n      );\n    \n      // update\n      useEffect(() => {\n        if (testOptionData) return;\n        if (newPropertyValueList) setOptionList(newPropertyValueList);\n      }, [newPropertyValueList]);\n    \n      const loadMore = useCallback(() => fetchNextPage(), [fetchNextPage]);\n    \n      useEffect(() => {\n        refetch();\n        setSkip(0);\n      }, [searchKeyword]);\n    \n      // ====================================== make filter result ========================================================\n      const createFilterInfo = () => {\n        // 부모 컴포넌트로 선택 정보 전달\n        const is모든속성 = isAllChecked && !searchKeyword;\n        const is문자열포함한모든속성 = isAllChecked && searchKeyword;\n    \n        if (is모든속성) {\n          const createdFilterInfo: IFilterNotMatch = {\n            dimension: selectedProductProperty.id,\n            type: 'notMatch',\n            value: '.*',\n          };\n          handleFilter(createdFilterInfo);\n        } else if (is문자열포함한모든속성) {\n          const createdFilterInfo: IFilterNotMatch = {\n            dimension: selectedProductProperty.id,\n            type: 'notMatch',\n            value: searchKeyword,\n          };\n          handleFilter(createdFilterInfo);\n        } else {\n          // is직접선택 = !isAllChecked;\n          const createdFilterInfo: IFilterNotIn = {\n            dimension: selectedProductProperty.id,\n            type: 'not in',\n            value: checkedPropertyValueList,\n          };\n          handleFilter(createdFilterInfo);\n        }\n      };\n    \n      // init filter\n      useEffect(() => {\n        if (!initFilter) return;\n        if (initFilter.dimension !== selectedProductProperty.id) return;\n        switch (initFilter.type) {\n          default:\n          case 'not in': // 개별 선택\n            if (isAllChecked === true) toggleAllChecked();\n            if (!isEqual(initFilter.value, checkedPropertyValueList)) setCheckedPropertyValueList(initFilter.value);\n            break;\n          case 'notMatch': // 모두 선택\n            if (isAllChecked === false) toggleAllChecked();\n            if (initFilter.value === '.*' && searchKeyword !== '') handleSearchKeyword('');\n            else if (initFilter.value !== '.*') handleSearchKeyword(initFilter.value);\n            break;\n        }\n      }, [initFilter]);\n    \n      return (\n        <PropertyValueFilterModal2Presenter\n          isAllChecked={isAllChecked}\n          toggleAllChecked={toggleAllChecked}\n          searchKeyword={searchKeyword}\n          handleSearchKeyword={handleSearchKeyword}\n          backToModal1={backToModal1}\n          closeModal={closeModal}\n          optionList={optionList}\n          toggleOption={toggleOption}\n          isFetching={isFetching}\n          infiniteNext={loadMore}\n          infiniteHasMore={!!hasNextPage}\n          infiniteSkip={skip}\n          selectedProductProperty={selectedProductProperty}\n          createFilterInfo={createFilterInfo}\n        />\n      );\n    };\n    ```\n    \n- test\n    \n    ```tsx\n    // test\n    \n    import React from 'react';\n    import { render, fireEvent } from '@testing-library/react';\n    import { ThemeProvider } from '@emotion/react';\n    import { QueryClient, QueryClientProvider } from 'react-query';\n    \n    import { lightTheme } from '../../../Theme';\n    import { PropertyValueFilterModal2Container } from './PropertyValueFilterModal2Container';\n    import { EventPropertyApi } from '../../../lib/api/EventProperty';\n    import { IFilterNotIn, IFilterNotMatch } from './PropertyValueFilterModal2.interface';\n    \n    // 상품 ID\n    const idSelectOne: IFilterNotIn = { dimension: 'event_seg_productIds', type: 'not in', value: ['P54321'] };\n    const idSelectAll: IFilterNotMatch = { dimension: 'event_seg_productIds', type: 'notMatch', value: '.*' };\n    const idIncludeAllByKeywords: IFilterNotMatch = {\n      dimension: 'event_seg_productIds',\n      type: 'notMatch',\n      value: 'P12345',\n    };\n    \n    // 상품 이름\n    const nameSelectOne: IFilterNotIn = { dimension: 'event_seg_productNames', type: 'not in', value: ['샘플상품 1'] };\n    const nameSelectAll: IFilterNotMatch = { dimension: 'event_seg_productNames', type: 'notMatch', value: '.*' };\n    const nameIncludeAllByKeywords: IFilterNotMatch = {\n      dimension: 'event_seg_productNames',\n      type: 'notMatch',\n      value: '상품',\n    };\n    \n    // 상품 카테고리\n    const categorySelectOne: IFilterNotIn = {\n      dimension: 'event_seg_productCategories',\n      type: 'not in',\n      value: ['남성', '29', '33'],\n    };\n    const categorySelectAll: IFilterNotMatch = { dimension: 'event_seg_productCategories', type: 'notMatch', value: '.*' };\n    const categoryIncludeAllByKeywords: IFilterNotMatch = {\n      dimension: 'event_seg_productCategories',\n      type: 'notMatch',\n      value: '남성',\n    };\n    \n    beforeEach(() => {\n      jest.clearAllMocks();\n    });\n    \n    // [대분류] 테스트 대상\n    describe('PropertyValueFilterModal2Container', () => {\n      // local storage mock\n      const localStorageMock = (() => {\n        return {\n          getItem() {\n            return '{\"id\": \"test\"}';\n          },\n        };\n      })();\n      Object.defineProperty(window, 'localStorage', { value: localStorageMock });\n    \n      const queryClient = new QueryClient();\n      const backToModal1TestFn = jest.fn();\n      const closeModalTestFn = jest.fn();\n      const handleFilterTestFn = jest.fn();\n    \n      // [중분류] 특정 상황, 상태\n      describe('상품 이름 테스트', () => {\n        const selectedProductProperty = { id: 'event_seg_productNames', name: '상품 이름' };\n        // api mock\n        const mock = jest.spyOn(EventPropertyApi, 'findEventPropValue');\n        mock.mockImplementation(() =>\n          Promise.resolve({\n            eventPropertyValues: [\n              { value: '샘플상품 1' },\n              { value: '샘플상품2' },\n              { value: 'BlueJean' },\n              { value: '샘플상품 2' },\n              { value: 'BlueJean2' },\n            ],\n            more: true,\n          }),\n        );\n    \n        const testOptionData = [\n          { value: '샘플상품 1', checked: false },\n          { value: '샘플상품2', checked: false },\n          { value: 'BlueJean', checked: false },\n          { value: '샘플상품 2', checked: false },\n          { value: 'BlueJean2', checked: false },\n        ];\n    \n        // [소분류] 구체적 기능\n        it('1. 하나의 속성 선택', () => {\n          const { getByTestId, getAllByTestId } = render(\n            <QueryClientProvider client={queryClient}>\n              <ThemeProvider theme={lightTheme}>\n                <PropertyValueFilterModal2Container\n                  initFilter={undefined}\n                  backToModal1={backToModal1TestFn}\n                  closeModal={closeModalTestFn}\n                  handleFilter={handleFilterTestFn}\n                  selectedProductProperty={selectedProductProperty}\n                  testOptionData={testOptionData} // test 코드에서만 사용\n                />\n              </ThemeProvider>\n            </QueryClientProvider>,\n          );\n    \n          expect(mock).toHaveBeenCalled();\n    \n          // 하나의 속성 값 버튼 클릭\n          const checkAllButton = getByTestId('option-샘플상품 1');\n          fireEvent.click(checkAllButton);\n    \n          // 확인 버튼 클릭\n          const buttonList = getAllByTestId('bg-button');\n          const saveFilterButton = buttonList.find((button) => button.classList.contains('save-button'));\n          if (saveFilterButton) fireEvent.click(saveFilterButton);\n    \n          expect(handleFilterTestFn).toHaveBeenCalled();\n          expect(handleFilterTestFn).toHaveBeenCalledWith(nameSelectOne);\n        });\n    \n        // [소분류] 구체적 기능\n        it('2. 모든 속성 선택', async () => {\n          const { getByTestId, getAllByTestId } = render(\n            <QueryClientProvider client={queryClient}>\n              <ThemeProvider theme={lightTheme}>\n                <PropertyValueFilterModal2Container\n                  initFilter={undefined}\n                  backToModal1={backToModal1TestFn}\n                  closeModal={closeModalTestFn}\n                  handleFilter={handleFilterTestFn}\n                  selectedProductProperty={selectedProductProperty}\n                  testOptionData={testOptionData} // test 코드에서만 사용\n                />\n              </ThemeProvider>\n            </QueryClientProvider>,\n          );\n    \n          expect(mock).toHaveBeenCalled();\n    \n          // 모든 속성 버튼 클릭\n          const checkAllButton = getByTestId('check-all-button');\n          fireEvent.click(checkAllButton);\n    \n          // 확인 버튼 클릭\n          const buttonList = getAllByTestId('bg-button');\n          const saveFilterButton = buttonList.find((button) => button.classList.contains('save-button'));\n          if (saveFilterButton) fireEvent.click(saveFilterButton);\n    \n          expect(handleFilterTestFn).toHaveBeenCalled();\n          expect(handleFilterTestFn).toHaveBeenCalledWith(nameSelectAll);\n        });\n    \n        // [소분류] 구체적 기능\n        it('3. ~를 포함한 모든 속성 선택', async () => {\n          const { getByTestId, getAllByTestId } = render(\n            <QueryClientProvider client={queryClient}>\n              <ThemeProvider theme={lightTheme}>\n                <PropertyValueFilterModal2Container\n                  initFilter={undefined}\n                  backToModal1={backToModal1TestFn}\n                  closeModal={closeModalTestFn}\n                  handleFilter={handleFilterTestFn}\n                  selectedProductProperty={selectedProductProperty}\n                  testOptionData={testOptionData} // test 코드에서만 사용\n                  testSearchKeyword=\"상품\" // test 코드에서만 사용\n                />\n              </ThemeProvider>\n            </QueryClientProvider>,\n          );\n    \n          expect(mock).toHaveBeenCalledTimes(1);\n    \n          // 모든 속성 버튼 클릭\n          const checkAllButton = getByTestId('check-all-button');\n          fireEvent.click(checkAllButton);\n    \n          // 확인 버튼 클릭\n          const buttonList = getAllByTestId('bg-button');\n          const saveFilterButton = buttonList.find((button) => button.classList.contains('save-button'));\n          if (saveFilterButton) fireEvent.click(saveFilterButton);\n    \n          expect(handleFilterTestFn).toHaveBeenCalled();\n          expect(handleFilterTestFn).toHaveBeenCalledWith(nameIncludeAllByKeywords);\n        });\n      });\n    });\n    ```\n    \n\n## 해당 코드의 아쉬운 점\n\n- 상태 간의 사이드 이펙트 발생 → 예외처리 추가 → 코드 가독성 저하 및 유지보수가 어려워짐\n    - 예시:\n        - DB에 저장된 필터 설정을 불러온다\n            - → isAllChecked 업데이트\n            - → checkedPropertyValueList 업데이트\n            - → searchKeyword 업데이트\n        - searchKeyword 업데이트\n            - → skip = 0\n            - → API refetch→ optionList 업데이트 → skip 업데이트\n            - → isAllChecked = false\n    - 자주 만나게 될 에러: \"Error: Too many re-renders. React limits the number of renders to prevent an infinite loop.\"\n- 코드를 읽고 싶지가 않다.\n\n# #2 액션을 정의 했을 때\n\n## 유한 오토마타\n\n## 기타 라이브러리에서의 상태 관리\n\n- Redux\n    - reducer\n- Recoil\n    - action\n\n## SOLID 중에  S: 단일 책임 원칙\n\n- 하나의 컴포넌트는 하나의 책임만 가진다.\n- 컴포넌트 하나가 블랙박스의 역할\n- 컴포넌트 내부의 상태는 컴포넌트가 책임진다\n- 그래서 전역으로 상태 관리하지는 않는다.\n- 내부에서 액션으로 상태를 관리하기 위한 방법은 아래와 같다.\n\n## useReducer를 사용하여 상태 관리\n\n- 하나의 상태 정의\n    \n    ```tsx\n    interface State {\n      searchKeyword: string;\n      isAllChecked: boolean;\n      optionList: IPropertyValue[];\n      checkedPropertyValueList: string[];\n      infiniteScrollSkip: number;\n    }\n    \n    export const initialState: State = {\n      searchKeyword: '',\n      isAllChecked: false,\n      optionList: [],\n      checkedPropertyValueList: [],\n      infiniteScrollSkip: 0,\n    };\n    ```\n    \n- 액션 정의\n    - RESET : 초기화\n    - LOAD: 저장된 필터 설정 불러오기\n    - TOGGLE_ALL_CHECKED: 모든 속성 선택/해제\n    - TOGGLE_REG_EX_ALL_CHECKED: ~를 포함한 모든 속성 선택/해제\n    - UPDATE_SEARCH_KEYWORD: 검색어 업데이트\n    - TOGGLE_ONE: 하나의 속성 선택/해제\n    - UPDATE_OPTION_LIST: 옵션 리스트 업데이트(무한 스크롤 등)\n    \n    ```tsx\n    interface Action {\n      type: 'RESET' | 'TOGGLE_ALL_CHECKED' | 'TOGGLE_REG_EX_ALL_CHECKED';\n    }\n    \n    interface LoadAction {\n      type: 'LOAD';\n      filter: FilterEach | FilterRegEx;\n    }\n    \n    interface UpdateKeywordAction {\n      type: 'UPDATE_SEARCH_KEYWORD';\n      keyword: string;\n    }\n    \n    interface ToggleOneAction {\n      type: 'TOGGLE_ONE';\n      key: string;\n    }\n    \n    interface UpdateOptionListAction {\n      type: 'UPDATE_OPTION_LIST';\n      list: KeyValue[];\n    }\n    ```\n    \n- 리듀서 정의\n    \n    ```tsx\n    export const reducer = (\n      state: State,\n      action: Action | LoadAction | UpdateKeywordAction | ToggleOneAction | UpdateOptionListAction,\n    ): State => {\n      let newState;\n      switch (action.type) {\n        default:\n        case 'RESET':\n          newState = initialState;\n          break;\n        case 'LOAD':\n          newState = load(state, action.filter);\n          break;\n        case 'TOGGLE_ALL_CHECKED':\n          newState = toggleAllChecked(state);\n          break;\n        case 'TOGGLE_REG_EX_ALL_CHECKED':\n          newState = toggleAllChecked(state);\n          break;\n        case 'TOGGLE_ONE':\n          newState = toggleOne(state, action.key);\n          break;\n        case 'UPDATE_OPTION_LIST':\n          newState = updateOptionList(state, action.list);\n          break;\n        case 'UPDATE_SEARCH_KEYWORD':\n          newState = updateKeyword(state, action.keyword);\n          break;\n      }\n      return newState;\n    };\n    ```\n    \n\n- presenter\n    \n    ```tsx\n    // PropertyValueFilterModal2Presenter.tsx\n    import React, { FC, useMemo } from 'react';\n    import InfiniteScroll from 'react-infinite-scroll-component';\n    import { useTranslation } from 'react-i18next';\n    import { Backdrop } from '../../Backdrop/Backdrop';\n    import { StyledBackButton, StyledLayout, StyledModalOption, StyledSearch } from './PropertyValueFilterModal2.style';\n    import { FontIcon } from '../../FontIcon/FontIcon';\n    import { BGCheckbox } from '../../BGCheckbox/BGCheckbox';\n    import { BGTooltip } from '../../BGTooltip/BGTooltip';\n    import { BGLoadingSpinner } from '../../BGLoadingSpinner/BGLoadingSpinner';\n    import { BGButtonGroup } from '../../BGButtonGroup/BGButtonGroup';\n    import { BGButton } from '../../BGButton/BGButton';\n    import { BGEmpty } from '../../BGEmpty/BGEmpty';\n    import { IProductProperty } from '../ProductSelectBox/ProductSelectBox.interface';\n    import { IPropertyValue } from './PropertyValueFilterModal2.interface';\n    \n    type IsFetching = boolean;\n    \n    export interface PropertyValueFilterModal2PresenterProps {\n      isAllChecked: boolean;\n      toggleAllChecked: () => void;\n      toggleRegExAllChecked: () => void;\n      searchKeyword: string;\n      handleSearchKeyword: (keyword: string) => void;\n      backToModal1: () => void;\n      closeModal: () => void;\n      optionList: IPropertyValue[];\n      toggleOption: (value: string) => void;\n      isFetching: IsFetching;\n      infiniteNext: () => void;\n      infiniteHasMore: boolean;\n      infiniteSkip: number;\n      selectedProductProperty: IProductProperty;\n      createFilterInfo: () => void;\n    }\n    \n    export const PropertyValueFilterModal2Presenter: FC<PropertyValueFilterModal2PresenterProps> = ({\n      isAllChecked,\n      toggleAllChecked,\n      toggleRegExAllChecked,\n      searchKeyword,\n      handleSearchKeyword,\n      backToModal1,\n      closeModal,\n      optionList,\n      toggleOption,\n      isFetching,\n      infiniteNext,\n      infiniteHasMore,\n      infiniteSkip,\n      selectedProductProperty,\n      createFilterInfo,\n    }: PropertyValueFilterModal2PresenterProps) => {\n      const i18next = useTranslation();\n      const handleInput = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const keyword = event.target.value;\n        if (typeof keyword === 'string') {\n          handleSearchKeyword(keyword);\n        }\n      };\n    \n      const saveFilter = () => {\n        createFilterInfo();\n        closeModal();\n      };\n    \n      const isNoData = useMemo(() => optionList.length === 0 && !isFetching, [optionList, isFetching]);\n      const isAnyChecked = useMemo(() => optionList.some((option) => option.checked === true), [optionList]);\n    \n      return (\n        <React.Fragment>\n          <Backdrop handleClick={closeModal} />\n          <StyledLayout>\n            <div className=\"top\">\n              <StyledBackButton onClick={backToModal1}>\n                <FontIcon name=\"ic-arrow-left\" size=\"16px\" />\n                <div>{i18next.t(selectedProductProperty.name)}</div>\n              </StyledBackButton>\n            </div>\n            <StyledSearch>\n              <div className=\"search-input\">\n                <FontIcon name=\"ic-search\" size=\"16px\" />\n                <input\n                  data-testid=\"search-text\"\n                  type=\"text\"\n                  name=\"keyword\"\n                  placeholder={i18next.t('검색')}\n                  autoComplete=\"off\"\n                  value={searchKeyword}\n                  onChange={handleInput}\n                />\n              </div>\n            </StyledSearch>\n            <InfiniteScroll\n              next={infiniteNext}\n              hasMore={infiniteHasMore}\n              dataLength={infiniteSkip}\n              height={220}\n              loader={<BGLoadingSpinner isLoading={isFetching} />}\n            >\n              <StyledModalOption>\n                {optionList.length > 0 && !searchKeyword && (\n                  <div className=\"row\" data-testid=\"check-all-button\" onClick={toggleAllChecked}>\n                    <BGCheckbox checked={isAllChecked} size={20} style={{ marginRight: '0.5em' }} />\n                    <div className=\"label\">{i18next.t('모든 속성')}</div>\n                  </div>\n                )}\n    \n                {optionList.length > 0 && searchKeyword && (\n                  <div className=\"row\" data-testid=\"check-reg-ex-all-button\" onClick={toggleRegExAllChecked}>\n                    <BGCheckbox checked={isAllChecked} size={20} style={{ marginRight: '0.5em' }} />\n                    <div className=\"label\">{i18next.t('\"{{keyword}}\"을 포함한 모든 속성', { keyword: searchKeyword })}</div>\n                  </div>\n                )}\n    \n                {optionList.map((option) => (\n                  <div\n                    data-testid={`option-${option.value}`}\n                    className=\"row\"\n                    key={option.value}\n                    onClick={() => toggleOption(option.value)}\n                  >\n                    <BGCheckbox checked={option.checked} size={20} style={{ marginRight: '0.5em' }} />\n                    <BGTooltip title={option.value} placement=\"right\">\n                      <div className=\"label\">{option.value}</div>\n                    </BGTooltip>\n                  </div>\n                ))}\n                {isNoData && searchKeyword && (\n                  <BGEmpty title={i18next.t('\"{{keyword}}\"를 포함하는 데이터가 없습니다.', { keyword: searchKeyword })} />\n                )}\n                {isNoData && !searchKeyword && <BGEmpty title={i18next.t('데이터가 없습니다.')} />}\n              </StyledModalOption>\n            </InfiniteScroll>\n            <BGButtonGroup style={{ justifyContent: 'end', margin: '10px 10px 0 0' }}>\n              <BGButton appearance=\"secondary\" label={i18next.t('취소')} onClick={closeModal} />\n              <BGButton className=\"save-button\" label={i18next.t('확인')} onClick={saveFilter} isDisabled={!isAnyChecked} />\n            </BGButtonGroup>\n          </StyledLayout>\n        </React.Fragment>\n      );\n    };\n    ```\n    \n- container\n    \n    ```tsx\n    // PropertyValueFilterModal2Container.tsx\n    \n    import React, { FC, useReducer, useMemo, useEffect, useCallback } from 'react';\n    import { PropertyValueFilterModal2Presenter } from './PropertyValueFilterModal2Presenter';\n    import { FilterEach, FilterRegEx } from './PropertyValueFilterModal2.interface';\n    import { useInfiniteFormattingQuery } from '../../../hooks/useCustomQuery';\n    import { EventPropertyApi } from '../../../lib/api/EventProperty';\n    import BiginStorage from '../../../services/BiginStorage';\n    import { IProductProperty } from '../ProductSelectBox/ProductSelectBox.interface';\n    import { reducer, initialState } from './PropertyValueFilterModal2.action';\n    import { useDebounce } from '../../../hooks/useDebounce';\n    \n    interface APIResult {\n      eventPropertyValues: { value: string }[];\n      more: boolean;\n    }\n    \n    interface Query {\n      application: string;\n      name: string;\n      searchText?: string;\n      notFiltered?: boolean;\n    }\n    \n    // api 결과 formatting\n    const formattingResult = (result: APIResult | undefined): string[] => {\n      if (!result) return [];\n      const list = result.eventPropertyValues.map((apiResultObj) => {\n        return apiResultObj.value;\n      });\n      return list;\n    };\n    \n    export interface PropertyValueFilterModal2ContainerProps {\n      initFilter: FilterEach | FilterRegEx | undefined; // 초기 필터 세팅\n      handleFilter: (createdFilter: FilterEach | FilterRegEx) => void; // 완성된 필터 반환\n      backToModal1: () => void;\n      closeModal: () => void; // 모달 닫기\n      selectedProductProperty: IProductProperty; // {id: 'event_seg_...', 'name': '상품 이름'}\n      notFiltered?: boolean;\n    }\n    \n    export const PropertyValueFilterModal2Container: FC<PropertyValueFilterModal2ContainerProps> = ({\n      initFilter,\n      handleFilter,\n      backToModal1,\n      closeModal,\n      selectedProductProperty,\n      notFiltered = false,\n    }: PropertyValueFilterModal2ContainerProps) => {\n      const [state, dispatch] = useReducer(reducer, initialState);\n      const debouncedSearchKeyword = useDebounce(state.searchKeyword, 1000);\n    \n      const toggleAllChecked = () => {\n        dispatch({ type: 'TOGGLE_ALL_CHECKED' });\n      };\n    \n      const toggleRegExAllChecked = () => {\n        dispatch({ type: 'TOGGLE_REG_EX_ALL_CHECKED' });\n      };\n    \n      const handleSearchKeyword = (keyword: string) => {\n        dispatch({ type: 'UPDATE_SEARCH_KEYWORD', keyword });\n      };\n    \n      const toggleOption = (value: string) => {\n        dispatch({ type: 'TOGGLE_ONE', value });\n      };\n    \n      // ======================================infinite scroll ========================================================\n      const limit = 5;\n      const projectID = useMemo(() => BiginStorage.selectedProject?.id, []);\n      const queryOptions = useMemo(\n        () => ({ enabled: Boolean(projectID), refetchOnWindowFocus: false, cacheTime: 0, retry: false }),\n        [],\n      );\n      const query = useMemo(() => {\n        const basicQuery: Query = {\n          application: projectID,\n          name: selectedProductProperty.id,\n          notFiltered,\n        };\n        const finalQuery = basicQuery;\n        if (debouncedSearchKeyword) finalQuery.searchText = debouncedSearchKeyword;\n        return finalQuery;\n      }, [projectID, debouncedSearchKeyword, selectedProductProperty.id]);\n    \n      // api 요청\n      const { data: newPropertyValueList, isFetching, fetchNextPage, hasNextPage } = useInfiniteFormattingQuery(\n        ['propertyValueList', debouncedSearchKeyword],\n        ({ pageParam = 0 }) => {\n          return EventPropertyApi.findEventPropValue({\n            query,\n            limit,\n            skip: pageParam,\n          });\n        },\n        {\n          ...queryOptions,\n          getNextPageParam: () => {\n            return state.infiniteScrollSkip ?? false;\n          },\n        },\n        formattingResult,\n      );\n    \n      // add option list\n      useEffect(() => {\n        if (newPropertyValueList.length > 0) dispatch({ type: 'UPDATE_OPTION_LIST', list: newPropertyValueList });\n      }, [newPropertyValueList]);\n    \n      const loadMore = useCallback(() => fetchNextPage(), [fetchNextPage]);\n    \n    // ====================================== make filter result ========================================================\n      const createFilterInfo = () => {\n        // 부모 컴포넌트로 선택 정보 전달\n        const isAll = state.isAllChecked && !state.searchKeyword;\n        const isRegEx = state.isAllChecked && state.searchKeyword;\n    \n        if (isAll) {\n          const createdFilterInfo: FilterEach | FilterRegEx = {\n            dimension: selectedProductProperty.id,\n            regex: '.*',\n          };\n          handleFilter(createdFilterInfo);\n        } else if (isRegEx) {\n          const createdFilterInfo: FilterEach | FilterRegEx = {\n            dimension: selectedProductProperty.id,\n            regex: state.searchKeyword,\n          };\n          // createdFilterInfo.value = productIDList\n          handleFilter(createdFilterInfo);\n        } else {\n          // 개별 선택\n          const createdFilterInfo: FilterEach | FilterRegEx = {\n            dimension: selectedProductProperty.id,\n            value: state.checkedPropertyValueList,\n          };\n          handleFilter(createdFilterInfo);\n        }\n      };\n    \n      // // init filter\n      useEffect(() => {\n        if (!initFilter) return;\n        if (initFilter.dimension !== selectedProductProperty.id) return;\n        dispatch({ type: 'LOAD', filter: initFilter });\n      }, [initFilter]);\n    \n      return (\n        <PropertyValueFilterModal2Presenter\n          isAllChecked={state.isAllChecked}\n          toggleAllChecked={toggleAllChecked}\n          toggleRegExAllChecked={toggleRegExAllChecked}\n          searchKeyword={state.searchKeyword}\n          handleSearchKeyword={handleSearchKeyword}\n          backToModal1={backToModal1}\n          closeModal={closeModal}\n          optionList={state.optionList}\n          toggleOption={toggleOption}\n          isFetching={isFetching}\n          infiniteNext={loadMore}\n          infiniteHasMore={!!hasNextPage}\n          infiniteSkip={state.infiniteScrollSkip}\n          selectedProductProperty={selectedProductProperty}\n          createFilterInfo={createFilterInfo}\n        />\n      );\n    };\n    ```\n    \n- action\n    \n    ```tsx\n    import { cloneDeep } from 'lodash';\n    import { FilterEach, FilterRegEx, IPropertyValue } from './PropertyValueFilterModal2.interface';\n    \n    interface State {\n      searchKeyword: string;\n      isAllChecked: boolean;\n      optionList: IPropertyValue[];\n      checkedPropertyValueList: string[];\n      infiniteScrollSkip: number;\n    }\n    \n    export const initialState: State = {\n      searchKeyword: '',\n      isAllChecked: false,\n      optionList: [],\n      checkedPropertyValueList: [],\n      infiniteScrollSkip: 0,\n    };\n    \n    interface Action {\n      type: 'RESET' | 'TOGGLE_ALL_CHECKED' | 'TOGGLE_REG_EX_ALL_CHECKED';\n    }\n    \n    interface LoadAction {\n      type: 'LOAD';\n      filter: FilterEach | FilterRegEx;\n    }\n    \n    interface UpdateKeywordAction {\n      type: 'UPDATE_SEARCH_KEYWORD';\n      keyword: string;\n    }\n    \n    interface ToggleOneAction {\n      type: 'TOGGLE_ONE';\n      value: string;\n    }\n    \n    interface AddOptionListAction {\n      type: 'UPDATE_OPTION_LIST';\n      list: string[];\n    }\n    \n    // action Functions\n    const load = (state: State, filter: FilterEach | FilterRegEx) => {\n      const newState = cloneDeep(state);\n    \n      // 정규식\n      if ('regex' in filter) {\n        newState.isAllChecked = true;\n        newState.searchKeyword = filter.regex === '.*' ? '' : filter.regex;\n      } else {\n        // 개별 선택\n        newState.isAllChecked = false;\n        if (filter.value) newState.checkedPropertyValueList = filter.value;\n      }\n    \n      return newState;\n    };\n    \n    const toggleAllChecked = (state: State) => {\n      const newState = cloneDeep(state);\n      const isChecked = !state.isAllChecked;\n      newState.isAllChecked = isChecked;\n      newState.optionList = state.optionList.map((option) => ({ ...option, checked: isChecked }));\n      if (isChecked) {\n        newState.checkedPropertyValueList = state.optionList.map((option) => option.value);\n      } else {\n        newState.checkedPropertyValueList = [];\n      }\n      return newState;\n    };\n    \n    const updateKeyword = (state: State, keyword: string) => {\n      const newState = cloneDeep(state);\n      newState.searchKeyword = keyword;\n      newState.isAllChecked = false;\n      newState.infiniteScrollSkip = 0;\n      newState.checkedPropertyValueList = [];\n      newState.optionList = [];\n      return newState;\n    };\n    \n    const toggleOne = (state: State, value: string) => {\n      const newState = cloneDeep(state);\n      const index = state.optionList.findIndex((option) => option.value === value);\n      const isChecked = !state.optionList[index].checked;\n    \n      // optionList\n      newState.optionList[index].checked = isChecked;\n    \n      // checkedPropertyValueList\n      // - add\n      if (isChecked) newState.checkedPropertyValueList.push(value);\n      else {\n        // - remove\n        const isPrevAllChecked = state.isAllChecked;\n        if (isPrevAllChecked) {\n          const allList = state.optionList.map((option) => option.value);\n          newState.checkedPropertyValueList = allList.filter((item) => item !== value);\n        } else {\n          newState.checkedPropertyValueList = state.checkedPropertyValueList.filter((item) => item !== value);\n        }\n      }\n    \n      // isAllChecked\n      if (newState.optionList.every((option) => option.checked === true)) {\n        newState.isAllChecked = true;\n      } else {\n        newState.isAllChecked = false;\n      }\n      return newState;\n    };\n    \n    const updateOptionList = (state: State, newList: string[]) => {\n      const newState = cloneDeep(state);\n      const newOptionList = newList.map((value) => {\n        const isPrevChecked = state.checkedPropertyValueList.includes(value);\n        return { value, checked: state.isAllChecked || isPrevChecked };\n      });\n      newState.optionList = newOptionList;\n      newState.infiniteScrollSkip = newOptionList.length;\n      return newState;\n    };\n    \n    // reducer\n    export const reducer = (\n      state: State,\n      action: Action | LoadAction | UpdateKeywordAction | ToggleOneAction | AddOptionListAction,\n    ): State => {\n      switch (action.type) {\n        default:\n        case 'RESET':\n          return initialState;\n        case 'LOAD':\n          return load(state, action.filter);\n        case 'TOGGLE_ALL_CHECKED':\n          return toggleAllChecked(state);\n        case 'TOGGLE_REG_EX_ALL_CHECKED':\n          return toggleAllChecked(state);\n        case 'TOGGLE_ONE':\n          return toggleOne(state, action.value);\n        case 'UPDATE_OPTION_LIST':\n          return updateOptionList(state, action.list);\n        case 'UPDATE_SEARCH_KEYWORD':\n          return updateKeyword(state, action.keyword);\n      }\n    };\n    ```\n    \n\n- <ProductSelectBox/> 접기\n    \n    ```tsx\n    //action\n    \n    import { IFilterNotIn, IFilterNotMatch } from '../PropertyValueFilterModal2/PropertyValueFilterModal2.interface';\n    import { IProductProperty, productPropertyList } from './ProductSelectBox.interface';\n    \n    export interface State {\n      text: string;\n      isModal1Open: boolean;\n      isModal2Open: boolean;\n      selectedProductProperty: IProductProperty;\n    }\n    export interface Action {\n      type: 'RESET' | 'OPEN_MODAL1' | 'BACK_TO_MODAL1' | 'CLOSE';\n    }\n    export interface OpenModal2Action {\n      type: 'OPEN_MODAL2';\n      selectedProductProperty: IProductProperty;\n    }\n    export interface LoadAction {\n      type: 'LOAD';\n      propertyValueFilter: IFilterNotIn | IFilterNotMatch;\n    }\n    export const initialState: State = {\n      text: '',\n      isModal1Open: false,\n      isModal2Open: false,\n      selectedProductProperty: productPropertyList[0],\n    };\n    const getSelectBoxText = (propertyValueFilter: IFilterNotIn | IFilterNotMatch) => {\n      const selectedProductProperty =\n        productPropertyList.find((property) => property.id === propertyValueFilter.dimension) || productPropertyList[0];\n    \n      const is개별선택1개 = propertyValueFilter.type === 'not in' && propertyValueFilter.value.length === 1;\n      const is개별선택2개이상 = propertyValueFilter.type === 'not in' && propertyValueFilter.value.length > 1;\n      const is모든속성선택 = propertyValueFilter.type === 'notMatch' && propertyValueFilter.value === '.*';\n      const is문자열포함한모든속성선택 = propertyValueFilter.type === 'notMatch' && propertyValueFilter.value !== '.*';\n    \n      if (is개별선택1개) {\n        return `${selectedProductProperty.name}: ${propertyValueFilter.value[0]}`;\n      }\n    \n      if (is개별선택2개이상) {\n        return `${selectedProductProperty.name}: ${propertyValueFilter.value[0]} 외 ${\n          propertyValueFilter.value.length - 1\n        }개`;\n      }\n    \n      if (is모든속성선택) {\n        return `${selectedProductProperty.name}: 모든 속성`;\n      }\n    \n      if (is문자열포함한모든속성선택) {\n        return `${selectedProductProperty.name}: \"${propertyValueFilter.value}\"을 포함한 모든 속성`;\n      }\n      return '';\n    };\n    const filterMapper = (state: State, propertyValueFilter: IFilterNotIn | IFilterNotMatch): State => {\n      const text = getSelectBoxText(propertyValueFilter);\n      const selectedProductProperty =\n        productPropertyList.find((property) => property.id === propertyValueFilter.dimension) || productPropertyList[0];\n      return { ...state, text, selectedProductProperty };\n    };\n    export const reducer = (state: State, action: Action | OpenModal2Action | LoadAction): State => {\n      switch (action.type) {\n        default:\n        case 'RESET':\n          return initialState;\n        case 'LOAD':\n          return filterMapper(state, action.propertyValueFilter);\n        case 'OPEN_MODAL1':\n          return { ...state, isModal1Open: true };\n        case 'OPEN_MODAL2':\n          return {\n            ...state,\n            isModal1Open: false,\n            isModal2Open: true,\n            selectedProductProperty: action.selectedProductProperty,\n          };\n        case 'BACK_TO_MODAL1':\n          return { ...state, isModal1Open: true, isModal2Open: false };\n        case 'CLOSE':\n          return { ...state, isModal1Open: false, isModal2Open: false };\n      }\n    };\n    ```\n    \n    ```tsx\n    // component\n    \n    import React, { FC, useEffect, useReducer } from 'react';\n    import { IProductProperty, productPropertyList } from './ProductSelectBox.interface';\n    import { IFilterNotIn, IFilterNotMatch } from '../PropertyValueFilterModal2/PropertyValueFilterModal2.interface';\n    import { PropertyValueFilterModal2Container } from '../PropertyValueFilterModal2/PropertyValueFilterModal2Container';\n    import { StyledSelectBox, StyledModalLayout, StyledRow } from './ProductSelectBox.style';\n    import { FontIcon } from '../../FontIcon/FontIcon';\n    import { Backdrop } from '../../Backdrop/Backdrop';\n    import { reducer, initialState } from './ProductSelectBox.action';\n    \n    export interface ProductSelectBoxProps {\n      propertyValueFilter: IFilterNotIn | IFilterNotMatch | undefined;\n      handlePropertyValueFilter: (createdFilter: IFilterNotIn | IFilterNotMatch) => void; // 완성된 필터 반환\n    }\n    export const ProductSelectBox: FC<ProductSelectBoxProps> = ({\n      propertyValueFilter,\n      handlePropertyValueFilter,\n    }: ProductSelectBoxProps) => {\n      const [state, dispatch] = useReducer(reducer, initialState);\n    \n      const openModal1 = () => {\n        dispatch({ type: 'OPEN_MODAL1' });\n      };\n    \n      const backToModal1 = () => {\n        dispatch({ type: 'BACK_TO_MODAL1' });\n      };\n    \n      const closeModal = () => {\n        dispatch({ type: 'CLOSE' });\n      };\n    \n      const openModal2 = (property: IProductProperty) => {\n        dispatch({ type: 'OPEN_MODAL2', selectedProductProperty: property });\n      };\n    \n      useEffect(() => {\n        if (!propertyValueFilter) return;\n        dispatch({ type: 'LOAD', propertyValueFilter });\n      }, [propertyValueFilter]);\n    \n      return (\n        <div style={{ position: 'relative' }}>\n          <StyledSelectBox onClick={openModal1}>\n            <div className=\"text\">{state.text || state.selectedProductProperty.name}</div>\n            <FontIcon name=\"ic-arrow-down\" size=\"20px\" />\n          </StyledSelectBox>\n          {state.isModal1Open && (\n            <React.Fragment>\n              <Backdrop handleClick={closeModal} />\n              <StyledModalLayout>\n                <StyledRow notHover onClick={closeModal}>\n                  <div className=\"text\">{state.text || state.selectedProductProperty.name}</div>\n                  <FontIcon name=\"ic-arrow-up\" size=\"20px\" />\n                </StyledRow>\n                {productPropertyList.map((property) => (\n                  <StyledRow\n                    key={property.id}\n                    selected={state.selectedProductProperty.id === property.id}\n                    onClick={() => openModal2(property)}\n                  >\n                    {property.name}\n                  </StyledRow>\n                ))}\n              </StyledModalLayout>\n            </React.Fragment>\n          )}\n    \n          {state.isModal2Open && (\n            <PropertyValueFilterModal2Container\n              initFilter={propertyValueFilter}\n              backToModal1={backToModal1}\n              closeModal={closeModal}\n              handleFilter={handlePropertyValueFilter}\n              selectedProductProperty={state.selectedProductProperty}\n            />\n          )}\n        </div>\n      );\n    };\n    ```"},{"id":1636038000,"title":"평점 분석을 위한 Python 라이브러리 기초 문법을 배워보자","author":"jangky000","date":"2021.11.05","content":"\n# 사용 라이브러리\n\n````python\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport math\n````\n\n# CSV 불러오기\n\n````python\ndf = pd.read_csv('movielens/ratings.csv')\n````\n\n\n# DataFrame의 shape, columns 확인\n````python\nprint(df.shape)\nprint(df.columns)\n````\n\n````\nresult: \n\n(100004, 4)\nIndex(['userId', 'movieId', 'rating', 'timestamp'], dtype='object')\n````\n\n# iloc\n- integer-location based indexing\n- 행 선택\n\n````python\ndf[['userId', 'movieId', 'rating']].iloc[10:15]\n````\n\n````\nresult: \n\n\tuserId\tmovieId\trating\n10\t1\t1371\t2.5\n11\t1\t1405\t1.0\n12\t1\t1953\t4.0\n13\t1\t2105\t4.0\n14\t1\t2150\t3.0\n````\n\n# timestamp를 '2009-12-14 02:52:24' 형태로 출력\n\n````python\npd.to_datetime(df['timestamp'].astype(int), unit='s')\n````\n\n````\nresult: \n\n0        2009-12-14 02:52:24\n1        2009-12-14 02:52:59\n2        2009-12-14 02:53:02\n3        2009-12-14 02:53:05\n4        2009-12-14 02:53:25\n                 ...        \n````\n\n# 'year' 칼럼 추가\n\n````python\ndf['date'] = pd.to_datetime(df['timestamp'].astype(int), unit='s')\ndf['year'] = df['date'].apply(lambda x: x.year)\ndf\n````\n\n````\nresult: \n\n        userId  movieId  rating   timestamp                date  year\n0            1       31     2.5  1260759144 2009-12-14 02:52:24  2009\n1            1     1029     3.0  1260759179 2009-12-14 02:52:59  2009\n2            1     1061     3.0  1260759182 2009-12-14 02:53:02  2009\n3            1     1129     2.0  1260759185 2009-12-14 02:53:05  2009\n4            1     1172     4.0  1260759205 2009-12-14 02:53:25  2009\n...        ...      ...     ...         ...                 ...   ...\n````\n\n# 그룹별 Count\n- group by(), size()\n\n````python\nyearCounts = df.groupby('year').size()\nprint(type(yearCounts))\nyearCounts\n````\n\n````\nresult: \n\n<class 'pandas.core.series.Series'>\nyear\n1995        3\n1996     6239\n1997     3294\n1998     1825\n1999     5901\n2000    13869\n2001     4658\n2002     3938\n...\n````\n\n# 바 차트 그리기\n\n````python\nyearCounts = pd.DataFrame(data = yearCounts, columns = ['counts']) # DataFrame\nyearCounts.plot(kind='bar', figsize=(12, 8), label='counts', legend=True)\n````\n\n````\nresult: \n````\n<img src=\"https://user-images.githubusercontent.com/46799722/140495795-36473127-33d3-488c-afcc-16d3570d05f5.png\" style=\"width: 100%;\"/>\n\n# Train Data 추출\n- frac: 추출할 표본 비율\n- random_state: 난수 발생 초기값, 재현 가능성을 위해 필요, seed for random number generator\n\n````python\ntrain = df.sample(frac=0.9, random_state=1)\ntrain['type'] = 'train'\ntrain.head()\n````\n\n````\nresult: \n\n       userId  movieId  rating   timestamp                date  year   type\n99778     667      446     4.0   847271818 1996-11-06 09:16:58  1996  train\n16170     104    71135     3.5  1446674062 2015-11-04 21:54:22  2015  train\n3521       19     1394     5.0   855192061 1997-02-06 01:21:01  1997  train\n55070     395      671     5.0   953007109 2000-03-14 04:11:49  2000  train\n25477     187      953     3.0  1230361942 2008-12-27 07:12:22  2008  train\n````\n\n# Test Data 추출\n\n````python\ntest = df.drop(train.index)\ntest['type'] = 'test'\ntest.head()\n````\n\n````\nresult: \n\n    userId  movieId  rating   timestamp                date  year  type\n9        1     1343     2.0  1260759131 2009-12-14 02:52:11  2009  test\n15       1     2193     2.0  1260759198 2009-12-14 02:53:18  2009  test\n18       1     2968     1.0  1260759200 2009-12-14 02:53:20  2009  test\n27       2      110     4.0   835355532 1996-06-21 11:12:12  1996  test\n47       2      273     4.0   835355779 1996-06-21 11:16:19  1996  test\n````\n\n---\n\n# 영화 전체의 평균 평점으로 각각의 영화 평점 예측\n\n## Train Data의 평점 평균을 계산\n\n````python\navgRating = train['rating'].mean()\navgRating\n````\n\n````\nresult: \n\n3.5421147948980045\n````\n\n## Test 데이터의 'pred' 칼럼에 Train Data의 평점 평균을 모두 추가\n\n````python\navgPred = test[['userId', 'movieId', 'rating']].copy()\navgPred['pred'] = avgRating\navgPred.head()\n````\n\n````\nresult: \n\n\tuserId\tmovieId\trating\tpred\n9\t1\t1343\t2.0\t3.542115\n15\t1\t2193\t2.0\t3.542115\n18\t1\t2968\t1.0\t3.542115\n27\t2\t110\t4.0\t3.542115\n47\t2\t273\t4.0\t3.542115\n````\n\n## Test 데이터의 평점과 예측값 사이의 MAE, RMSE를 계산\n\n- 평점 예측 기준이 세분화되지 않아 에러가 크다.\n- rmse는 평점과 예측값 사이의 차이가 클수록 mae에 비해 에러값이 증가\n\n````python\navgPredErrors = avgPred['pred'] - avgPred['rating']\nmae = avgPredErrors.abs().mean()\nrmse = math.sqrt(avgPredErrors.pow(2).mean())\nprint(mae)\nprint(rmse)\n````\n\n````\nresult: \n\n0.8586874505577531\n1.0629409004509323\n````\n\n---\n\n# 사용자 ID별 영화 평균 평점으로 각각의 영화 평점 예측\n\n- 사용자의 평점 성향을 파악할 수 있다.\n\n## Train 데이터에서 사용자 ID별로 그룹 평균 계산\n\n- .groupby('userId').mean() === .groupby('userId').agg('mean')\n- agg는 그룹별로 결과를 얻는 조작을 Aggregation의 약자\n- .agg({'price': my_mean, 'quantity': np.sum}) 등으로 두 개 이상의 그룹 계산을 진행할 수 있다.\n\n````python\nuserAvgRatings = train[['userId', 'rating']].groupby('userId').agg('mean')\nuserAvgRatings.columns = ['pred']\nuserAvgRatings\n````\n\n````\nresult: \n\n1\t2.705882\n2\t3.485294\n3\t3.579545\n4\t4.351351\n5\t3.893617\n````\n\n## merge: left inner join\n\n- Test 데이터에 사용자별 예측 평점을 추가한다.\n- right_index: Use the index from the left DataFrame as the join key(s). \n- right_index는 default가 false이므로 표기할 필요 없다.\n\n````python\nuserAvgPred = test[['userId', 'movieId', 'rating']]\nuserAvgPred = pd.merge(userAvgPred, userAvgRatings, how='left', left_on=['userId'], right_on=['userId'], right_index = False)\nuserAvgPred.head()\n\n````\n\n````\nresult: \n\n\tuserId\tmovieId\trating\tpred\n0\t1\t1343\t2.0\t2.705882\n1\t1\t2193\t2.0\t2.705882\n2\t1\t2968\t1.0\t2.705882\n3\t2\t110\t4.0\t3.485294\n4\t2\t273\t4.0\t3.485294\n````\n\n## MAE, RMSE 계산\n\n- 사용자의 성향이 고려되어 에러 값이 낮아졌다.\n- MAE: 0.8586874505577531 -> 0.7581636860631077\n- RSME: 1.0629409004509323 -> 0.9652871605248908\n\n````python\nuserAvgPredErrors = userAvgPred['pred'] - userAvgPred['rating']\nmae2 = userAvgPredErrors.abs().mean()\nrmse2 = math.sqrt(userAvgPredErrors.pow(2).mean())\nprint(mae2)\nprint(rmse2)\n````\n\n````\nresult: \n\n0.7581636860631077\n0.9652871605248908\n````\n\n---\n\n# 영화별 평점 평균을 통한 영화 평점 예측\n\n## movieId 그룹별로 평균 계산\n\n````python\nitemAvgRatings = train[['movieId', 'rating']].groupby('movieId').agg('mean')\nitemAvgRatings.columns = ['pred'] # 'rating' 칼럼의 이름을 'pred'로 수정\nitemAvgRatings.head()\n\n````\n\n````\nresult: \n\n\tpred\nmovieId\t\n1\t3.870044\n2\t3.435644\n3\t3.200000\n4\t2.388889\n5\t3.294118\n````\n\n## merge\n\n````python\nitemAvgPred = test[['userId', 'movieId', 'rating']]\nitemAvgPred = pd.merge(itemAvgPred, itemAvgRatings, how='left', left_on=['movieId'], right_on=['movieId'], right_index = False)\nitemAvgPred.head()\n````\n\n````\nresult: \n\n  userId\tmovieId\trating\tpred\n0\t1\t1343\t2.0\t3.720588\n1\t1\t2193\t2.0\t3.166667\n2\t1\t2968\t1.0\t3.587500\n3\t2\t110\t4.0\t3.923858\n4\t2\t273\t4.0\t3.125000\n````\n\n## MAE, RMSE\n\n- 사용자 별로 평점을 예측 했을 때보다 에러가 조금 상승했다.\n\n````python\nitemAvgPredErrors = itemAvgPred['pred'] - itemAvgPred['rating']\nmae3 = itemAvgPredErrors.abs().mean()\nrmse3 = math.sqrt(itemAvgPredErrors.pow(2).mean())\nprint(mae3)\nprint(rmse3)\n````\n\n````\nresult: \n\n0.761464979636912\n0.974768257763819\n````\n\n---\n\n# URL을 주피터 노트북에서 이미지로 확인하기\n\n## 데이터 불러오기 \n````python\ndfMovie = pd.read_csv('movielens/movies_w_imgurl.csv')\ndfMovie.head()\n````\n\n````\nresult: \n\n\n  movieId\timdbId\ttitle\tgenres\timgurl\n0\t1\t114709\tToy Story (1995)\tAdventure|Animation|Children|Comedy|Fantasy\thttps://images-na.ssl-images-amazon.com/images...\n1\t2\t113497\tJumanji (1995)\tAdventure|Children|Fantasy\thttps://images-na.ssl-images-amazon.com/images...\n2\t3\t113228\tGrumpier Old Men (1995)\tComedy|Romance\thttps://images-na.ssl-images-amazon.com/images...\n3\t4\t114885\tWaiting to Exhale (1995)\tComedy|Drama|Romance\thttps://images-na.ssl-images-amazon.com/images...\n4\t5\t113041\tFather of the Bride Part II (1995)\tComedy\thttps://images-na.ssl-images-amazon.com/images...\n````\n\n## 주피터 노트북 셀 실행화면에 다음과 같이 이미지를 확인할 수 있다.\n\n````python\nfrom IPython.display import Image, display\n\nfor i in range(0, 5):\n    display(Image(dfMovie['imgurl'].iloc[i]))\n````\n\n````\nresult: \n````\n<img src=\"https://user-images.githubusercontent.com/46799722/140501330-31eaf555-3d63-4dba-910d-a065f680b14b.png\" style=\"width: 100%;\"/>\n"},{"id":1635951600,"title":"React HOC를 사용해보자","author":"jangky000","date":"2021.11.04","content":"\n# 상황 #1\n\n이번에 회사에서 React 프로젝트에 4개의 새로운 페이지를 추가하는 태스크를 맡게 되었다. \n\n아래와 같이 4개의 페이지를 제작해야 한다고 하자, 4개의 페이지에는 공통적으로 날짜를 선택할 수 있는 Calendar Selector가 있고, 이 셀렉터에는 사용자에 따라 **선택 가능한 기간**과 **기본 설정 기간** 정보가 필요하다.\n- **선택 가능한 기간**은 서버에서 데이터를 불러와 전역 상태로 관리되고 있는 데이터다.\n- **기본 설정 기간** 역시 전역 상태 데이터다.\n- 각각의 페이지는 Calendar Selector에서 선택한 기간에 따라 다른 데이터를 불러와 출력해야 한다.\n\n<div style=\"display: grid;grid-template-columns: repeat(2, 1fr);grid-column-gap: 20px;grid-row-gap: 20px;\">\n    <img src=\"https://user-images.githubusercontent.com/46799722/140294319-00c25762-be33-4452-93ad-b9ffec94b290.png\" style=\"width:100%;\"/>\n    <img src=\"https://user-images.githubusercontent.com/46799722/140294330-2092adfa-5527-4b24-a23b-2c75838e98f7.png\" style=\"width:100%;\"/>\n    <img src=\"https://user-images.githubusercontent.com/46799722/140294336-21ddcf01-228d-4ff0-b74c-4148139496cc.png\" style=\"width:100%;\"/>\n    <img src=\"https://user-images.githubusercontent.com/46799722/140294339-c4061391-c5a0-47ab-b619-4a34e8a11ec8.png\" style=\"width:100%;\"/>\n</div>\n\n# 코드의 재사용\n\n*전역 상태 관리 스토어에서 **선택 가능한 기간**과 **기본 설정 기간**을 가져와 데이터를 검증을 한 뒤 사용하고 싶다, 4개의 페이지에서 똑같이.*\n\n**선택 가능한 기간**과, **기본 설정 기간** 정도 데이터를 불러오는데, 이 로직을 재사용하겠다고 결심한 이유는 다음과 같다.\n\n- 유지 보수할 때, 복사 붙여넣기 되어 있는 4개의 소스를 하나씩 찾아 고치고 싶지 않다.\n- 각각의 페이지에서 최대한 데이터를 가공하는 로직을 제거하고, View를 그리는 역할에만 집중하고 싶다.\n\n# 리액트에서 코드를 재사용할 수 있는 방법\n\n- Util 성 순수 함수\n- Composition\n- Render Props\n- HOC\n- Custom Hook\n\n# 이중 HOC를 선택한 이유는 다음과 같다.\n\n- Util 성 순수함수는 전역 상태 관리 스토어 값을 활용 할 수 없다.(순수 함수 정의에 위배)\n- Composition은, Render Props는 JSX Element 형태로 사용하여 동적으로 무엇을 그릴지에 초점이 있는 느낌이다.\n- 하지만 내게 필요한 기능은 단순히 전역 상태 관리 스토어에서 데이터를 가져오는 기능이다.\n- <s>선택지가 아직 두 개가 남았지만 내게 가장 낯선 HOC를 사용해보고 싶었다.</s>\n\n# HOC(Higher Order Component): 고차함수\n\n> 고차 컴포넌트(HOC, Higher Order Component)는 컴포넌트 로직을 재사용하기 위한 React의 고급 기술이다. 고차 컴포넌트(HOC)는 React API의 일부가 아니며, React의 구성적 특성에서 나오는 패턴이다. ([참고](https://ko.reactjs.org/docs/higher-order-components.html))\n\n> *\"횡단 관심사(Cross-Cutting Concerns)에 고차 컴포넌트를 사용할 수 있다.\"*\n\n이 설명을 보고 JAVA의 AOP가 떠올랐다. 여러 컴포넌트에서 공통적으로 사용되는 로직을 횡단 관심사로 보아 하나로 묶어 관리할 수 있다고 한다.\n\n## HOC는\n\n- 리액트 컴포넌트를 인자로 받아서 다른 리액트 컴포넌트를 반환하는 함수\n- 컴포넌트에 특정 기능을 부여한다.\n- 특정한 기능을 수행한 후 인자로 받은 컴포넌트에 데이터를 넘겨줄 수도 있다.\n\n\n# 어떠한 경우에 HOC를 사용할까?\n\n- 로딩, 에러, 데이터 요청 등 여러 컴포넌트에서 반복적으로 사용되는 로직을 컴포넌트 바깥으로 분리할 때 고려될 수 있다.\n\n# Functional하게 HOC 사용하기\n\n- React 공식 홈페이지에서는 class 형태로 HOC를 사용하는 예제가 나와 있지만, 리액트 프로젝트에서 함수형 컴포넌트로 사용하고 있기 때문에, 함수의 형태로 HOC를 사용하는 방법을 조사했다.\n\n# 사용 예제\n\n````typescript\n// HOC 함수: withCalendarDateRange\nimport React, { FC, useMemo } from 'react';\nimport moment from 'moment';\nimport { useDataStore } from './context/Store';\nimport { DateRange } from './Calendar';\n\nexport interface CalendarDateRangeProps {\n  selectableDateRange: DateRange;\n  initSelectedDateRange: DateRange;\n}\n\ninterface WrapperProps extends CalendarDateRangeProps {\n  [props: string]: unknown;\n}\n\nexport const withCalendarDateRange = <OriginProps,>(WrappedComponent: FC<WrapperProps>): FC<OriginProps> => {\n  const WrapperComponent = (props?: OriginProps) => {\n    const { projectStore } = useDataStore();\n\n    const selectableDateRange = useMemo(() => {\n      const dateRange = projectStore.date.selectable\n      // 검증 로직...\n      return dateRange;\n    }, []);\n\n    const initSelectedDateRange = useMemo(() => {\n      const dateRange = projectStore.date.init\n      // 검증 로직...\n      return dateRange;\n    }, []);\n\n    return (\n      <WrappedComponent\n        {...props}\n        selectableDateRange={selectableDateRange}\n        initSelectedDateRange={initSelectedDateRange}\n      />\n    );\n  };\n  WrapperComponent.displayName = WrappedComponent.displayName || WrappedComponent.name || 'CalendarDateRangeWrapper';\n  return WrapperComponent;\n};\n````\n\n````typescript\n// 공통 로직을 추가할 컴포넌트: WrappedVisitStatus\n// Props를 통해 selectableDateRange, initSelectedDateRange 데이터를 받는다.\nimport React, { useState } from 'react';\nimport { Calendar, DateRange } from './Calendar';\nimport { withCalendarDateRange, CalendarDateRangeProps } from './HOC/withCalendarDateRange';\n\ntype WrappedVisitStatusProps = CalendarDateRangeProps;\n\nconst WrappedVisitStatus = ({ selectableDateRange, initSelectedDateRange }: WrappedVisitStatusProps) => {\n  const [dateRange, setDateRange] = useState<DateRange>();\n  const handleDateRange = (changedDateRange: DateRange) => setDateRange(changedDateRange);\n\n  return (\n    <StyledLayout>\n      <StyledTitleWrapper>\n        <StyledTitle>방문 현황</StyledTitle>\n        <Calendar\n          selectableRange={selectableDateRange}\n          initDateRange={initSelectedDateRange}\n          dateHandle={handleDateRange}\n        />\n      </StyledTitleWrapper>\n    </StyledLayout>\n  );\n};\n\n// HOC를 통해 캘린더 데이터 Props 삽입\nexport const VisitStatus = withCalendarDateRange(WrappedVisitStatus);\n````\n\n````typescript\n// 공통 로직이 추가된 컴포넌트 사용: Dashboard\nimport React, { FC, useState } from 'react';\nimport { BGTab, ITab } from './components/BGTab';\nimport { TopNavBar } from './components/TopNavBar';\nimport { Container } from './Dashboard.style';\nimport { tabList } from './Dashboard.data';\nimport { BorderSection } from './components/BorderSection';\nimport { VisitStatus } from './components/VisitStatus';\n\ninterface IUseTab {\n  selectedTab: ITab;\n  handleTab: (tab: ITab) => void;\n}\nexport const useTab = (defaultTab: ITab): IUseTab => {\n  const [selectedTab, setTab] = useState<ITab>(defaultTab);\n  const handleTab = (tab: ITab) => {\n    setTab(tab);\n  };\n  return { selectedTab, handleTab };\n};\n\nexport const Dashboard: FC = () => {\n  const { selectedTab, handleTab } = useTab(tabList[0]);\n\n  return (\n    <Container>\n      <TopNavBar title=\"CRM 대시보드\" style={{ border: 0 }} />\n      <BGTab tabList={tabList} selectedTab={selectedTab} handleTab={handleTab} />\n      <BorderSection style={{ marginTop: '32px', borderRadius: '8px' }}>\n        {selectedTab.key === 'visitStatus' && <VisitStatus />}\n      </BorderSection>\n    </Container>\n  );\n};\n\n````\n\n# 좀 더 간단한 코드\n\n````javascript\n// HOC\nexport const withHOC = WrappedComponent => {\n  const NewComponent = async (props) => {\n    // 공통 로직\n    const { newData } = await fetchNewDate(); // newData = 'Higher Order Component'\n    return (\n        <WrappedComponent {...props} data={newData} />\n      );\n  }\n  NewComponent.displayName = 'NewComponent'\n  return NewComponent;\n}\n````\n\n````javascript\n// 공통 로직을 추가할 컴포넌트\nimport { withHOC } from 'withHOC.tsx'\nconst WrappedComponent = ({text, data})=>{\n    // name은 PageComponent에서 props로 넘겨준 데이터\n    // data는 HOC에 의해 props에 추가된\n    return (\n        <div>\n            <div>{text}</div>\n            <div>{data}</div>\n        </div>\n    );\n}\nexport const MyComponent = withHOC(WrappedComponent)\n````\n\n````javascript\nimport { MyComponent } from 'MyComponent.tsx'\n// 공통 로직이 추가된 컴포넌트 사용\nconst PageComponent에서 = ()=>{\n    return <MyComponent text={'HOC'}/>\n}\n````\n````\n결과 화면:\n\nHOC\nHigher Order Component\n````\n\n# 그런데,\n\n어찌저찌 HOC를 사용해보고 싶은 지적인 욕심은 풀었으나 HOC의 단점들이 눈에 들어오기 시작했다.\n\n- 타입스크립트를 사용한다면, 타입을 맞추기도 어려울 뿐더러, 읽기도 어렵다.\n\n````typescript\nexport interface CalendarDateRangeProps {\n  selectableDateRange: DateRange;\n  initSelectedDateRange: DateRange;\n}\n\ninterface WrapperProps extends CalendarDateRangeProps {\n  [props: string]: unknown;\n}\n\nexport const withCalendarDateRange = <OriginProps,>(WrappedComponent: FC<WrapperProps>): FC<OriginProps> => {\n  const WrapperComponent = (props?: OriginProps) => {\n    ...\n````\n\n- 여러 HOC를 하나의 컴포넌트에서 사용해야 할 경우가 생긴다면, `withA(withB(withC(MyComponent)))` 처럼 함수 호출 Depth가 깊어진다(Nesting).\n\n# 나는 평소 Hooks를 소중히 여기지 않았지\n\n필자는 리액트를 처음 시작할 때부터 함수형 컴포넌트와 리액트 Hooks를 사용해왔기 때문에 Hooks의 편리함을 잘 몰랐다. [리액트 Hooks는 대부분의 HOC와 Render Props를 대체 가능하며, 더 간단하고 리액트 가상 DOM Tree의 Nesting을 줄여준다.](https://reactjs.org/docs/hooks-faq.html#do-hooks-replace-render-props-and-higher-order-components)\n다음과 같이 Custom Hook을 사용하여 해결이 가능하다.\n\n````typescript\n// useCalendarDateRange.ts\nconst useCalendarDateRange = ()=>{\n  const { projectStore } = useDataStore();\n\n    const selectableDateRange = useMemo(() => {\n      const dateRange = projectStore.date.selectable\n      // 검증 로직...\n      return dateRange;\n    }, []);\n\n    const initSelectedDateRange = useMemo(() => {\n      const dateRange = projectStore.date.init\n      // 검증 로직...\n      return dateRange;\n    }, []);\n  return {selectableDateRange, initSelectedDateRange}\n}\n````\n\n````typescript\n// 공통 로직을 추가할 컴포넌트: VisitStatus\n// Props를 통해서가 아닌 useCalendarDateRange()를 호출해서 필요한 데이터를 받는다.\nimport React, { useState } from 'react';\nimport { Calendar, DateRange } from './Calendar';\nimport { useCalendarDateRange } from './hooks/useCalendarDateRange';\n\nexport const VisitStatus = () => {\n  const [dateRange, setDateRange] = useState<DateRange>();\n  const handleDateRange = (changedDateRange: DateRange) => setDateRange(changedDateRange);\n  const {selectableDateRange, initSelectedDateRange} = useCalendarDateRange();\n\n  return (\n    <StyledLayout>\n      <StyledTitleWrapper>\n        <StyledTitle>방문 현황</StyledTitle>\n        <Calendar\n          selectableRange={selectableDateRange}\n          initDateRange={initSelectedDateRange}\n          dateHandle={handleDateRange}\n        />\n      </StyledTitleWrapper>\n    </StyledLayout>\n  );\n};\n````\n\n# 결론\n\n- HOC는 함수형 컴포넌트와 리액트 Hooks가 나오기 이전부터 Class Component 개발에서 리액트 Life Cycle에 종속적이지 않은 중복된 코드를 분리하기 위해서 사용되었다. (그래서 공식 홈페이지에 클래스형 컴포넌트로 만들어진 HOC 예제가 있나보다.)\n- HOC는 클래스형, 그리고 함수형 모두에 적용할 수 있어, 레거시와 모던한 리액트 컴포넌트 사이에서 연결 다리처럼 재사용이 가능하다는 장점이 있다. \n- 현재는 리액트 Hooks를 사용해 Custom Hook을 만들어 HOC를 대부분 대체할 수 있으며, 이렇게 사용하는 것이 더 간단하고 직관적이다.\n- 그러니 다시 소스를 수정하러 가야겠다.\n\n# 참고\n- [https://ko.reactjs.org/docs/higher-order-components.html](https://ko.reactjs.org/docs/higher-order-components.html)\n- [https://reactjs.org/docs/hooks-faq.html#do-hooks-replace-render-props-and-higher-order-components](https://reactjs.org/docs/hooks-faq.html#do-hooks-replace-render-props-and-higher-order-components)\n- [https://velog.io/@yeonseo07/%EB%AA%A8%EB%8B%AC%EC%9D%84-%EB%A7%8C%EB%93%A4%EB%8B%A4-%EC%83%9D%EA%B8%B4-%EC%9D%BC](https://velog.io/@yeonseo07/%EB%AA%A8%EB%8B%AC%EC%9D%84-%EB%A7%8C%EB%93%A4%EB%8B%A4-%EC%83%9D%EA%B8%B4-%EC%9D%BC)\n- [https://yceffort.kr/2020/10/react-hooks-and-hocs](https://yceffort.kr/2020/10/react-hooks-and-hocs)"},{"id":1635778800,"title":"첫 게시글","author":"jangky000","date":"2021.11.02","content":"\nNextJS 프레임워크로 만든 Markdown 블로그입니다."}]