[{"id":1641913200,"title":"React와 Recoil을 사용해 튜토리얼을 만들어보자\r","author":"jangky000\r","date":"2022.01.12\r","content":"\r\n# 기획 내용\r\n\r\n- 전달 받은 튜토리얼 내용\r\n    - 특이 사항: 포커스가 변하지 않아도, 팝오버 설명 텍스트가 변할 수 있다. (포커스 개수  ≤ 튜토리얼 개수)\r\n    \r\n    ![1](https://user-images.githubusercontent.com/46799722/149144274-e7ecc1f0-786d-45bd-9ea9-d8c7151090fe.png)\r\n    \r\n\r\n- 첫 화면\r\n    \r\n    ![2](https://user-images.githubusercontent.com/46799722/149144272-f16aa2de-6095-4397-981d-63c9100d245c.png)\r\n    \r\n\r\n- 다음 버튼을 누르면 설명에 해당하는 부분으로 스크롤 이동하며 포커싱\r\n    \r\n    ![3](https://user-images.githubusercontent.com/46799722/149144263-e3b5c3ee-d8dc-4b18-a040-6fa3171ae81a.png)\r\n    \r\n    ![4](https://user-images.githubusercontent.com/46799722/149144251-71981a02-f214-45d6-a979-ee91feb5e2a9.png)\r\n    \r\n\r\n- 접기 > PopOver를 접고 FAB 사이즈가 줄어듦\r\n    \r\n    ![5](https://user-images.githubusercontent.com/46799722/149144269-fbda31a6-4741-4ef9-8fcd-234edb27bc31.png)\r\n    \r\n\r\n# 전역 상태 관리\r\n\r\n- atom & selector\r\n    \r\n    ```tsx\r\n    import { atom, selector } from 'recoil';\r\n    import { tutorialHelperText } from '@/components/Demo/TutorialHelper/TutorialHelper.data';\r\n    import { TutorialNode } from '@/components/Demo/TutorialHelper/TutorialNode';\r\n    import { TutorialMenu } from '@/components/Demo/TutorialHelper/TutorialHelper.interface';\r\n    \r\n    interface DemoTutorialState {\r\n      isDemo: boolean;\r\n      isExpired: boolean;\r\n      isEmailVerified: boolean;\r\n      isFolded: boolean;\r\n      tutorialNode: TutorialNode | null;\r\n    }\r\n    \r\n    const isDemo = JSON.parse(sessionStorage.getItem('isDemo') || 'false') as boolean;\r\n    \r\n    export const demoTutorialState = atom<DemoTutorialState>({\r\n      key: 'demoGuideState',\r\n      default: {\r\n        isDemo,\r\n        isExpired: false,\r\n        isEmailVerified: false,\r\n        isFolded: false,\r\n        tutorialNode: null,\r\n      },\r\n    });\r\n    \r\n    interface TutorialHelperState {\r\n      menu: TutorialMenu | null;\r\n      title: string | null;\r\n      subTitle: string | null;\r\n      desc: string | null;\r\n      tutorialStep: number;\r\n      totalStep: number;\r\n      prev: TutorialNode | null;\r\n      next: TutorialNode | null;\r\n    }\r\n    \r\n    export const demoTutorialStateSelector = selector({\r\n      key: 'demoGuideStateSelector',\r\n      get: ({ get }) => {\r\n        const { tutorialNode } = get(demoTutorialState);\r\n    \r\n        if (tutorialNode === null)\r\n          return {\r\n            menu: null,\r\n            title: null,\r\n            subTitle: null,\r\n            desc: null,\r\n            tutorialStep: 0,\r\n            totalStep: 0,\r\n            prev: null,\r\n            next: null,\r\n          };\r\n    \r\n        const {\r\n          info: { menu, tutorialStep },\r\n          prev,\r\n          next,\r\n        } = tutorialNode;\r\n        const { title, step } = tutorialHelperText[menu];\r\n        const { subTitle, desc } = step[tutorialStep];\r\n        const totalStep = tutorialHelperText[menu].step.length;\r\n        const derivedState = {\r\n          menu,\r\n          title,\r\n          subTitle: subTitle || null,\r\n          desc,\r\n          tutorialStep,\r\n          totalStep,\r\n          prev,\r\n          next,\r\n        };\r\n        return derivedState as TutorialHelperState;\r\n      },\r\n    });\r\n    ```\r\n    \r\n- 튜토리얼 내용 관리\r\n    - 양방향 연결 리스트로 튜토리얼의 내용 연결 순서 관리\r\n    - 튜토리얼 안내 문구 관리\r\n    \r\n    ```tsx\r\n    import { TutorialLinkedList } from './TutorialLinkedList';\r\n    import { TutorialHelperText } from './TutorialHelper.interface';\r\n    \r\n    //튜토리얼 안내 문구\r\n    export const tutorialHelperText: TutorialHelperText = {\r\n      Automation: {\r\n        title: '자동화',\r\n        step: [\r\n          {\r\n            desc:\r\n              '내 사이트의 퍼널, 판매 현황을 파악하고 각 퍼널 단계별로 고객그룹을 분류하여 캠페인을 빠르게 진행할 수 있습니다.',\r\n          },\r\n          {\r\n            subTitle: '퍼널 현황',\r\n            desc:\r\n              '방문부터 결제까지 각 퍼널 단계별 전환과 이탈 수치를 확인하고, 이탈고객을 붙잡기 위한 추천 캠페인을 진행할 수 있습니다.',\r\n          },\r\n          {\r\n            subTitle: '퍼널 현황-주요관리필요구간',\r\n            desc: '이탈 수치가 가장 높은 퍼널의 고객을 확인하거나 추천 캠페인을 바로 진행할 수 있습니다.',\r\n          },\r\n          {\r\n            subTitle: '캠페인 성과',\r\n            desc: '빅인을 통해 진행한 캠페인 성과를 유형별로 요약하여 확인할 수 있습니다.',\r\n          },\r\n          {\r\n            subTitle: '구매 현황',\r\n            desc: '사이트의 구매 전환 분석 데이터와 상품 정보를 확인할 수 있습니다.',\r\n          },\r\n        ],\r\n      },\r\n      CampaignList: {\r\n        title: '캠페인',\r\n        step: [\r\n          {\r\n            desc: '고객 행동 데이터 기반으로 타겟팅 하여 사이트 내에서 또는 메신저를 통해 자동화 캠페인을 할 수 있습니다.',\r\n          },\r\n          {\r\n            subTitle: '캠페인 시작하기 버튼 - 캠페인 종류 선택 레이어',\r\n            desc: '팝업, 토스트를 활용해 웹 사이트 내에서 온사이트 캠페인을 할 수 있습니다.',\r\n          },\r\n          {\r\n            subTitle: '캠페인 시작하기 버튼 - 캠페인 종류 선택 레이어',\r\n            desc: '카카오 친구톡/알림톡, SMS 를 활용 해 오프사이트 캠페인을 할 수 있습니다.',\r\n          },\r\n          {\r\n            subTitle: '캠페인 리스트',\r\n            desc: '캠페인들의 진행 상황을 관리할 수 있습니다.',\r\n          },\r\n        ],\r\n      },\r\n      SegmentSmartList: {\r\n        title: '스마트 그룹',\r\n        step: [\r\n          {\r\n            desc:\r\n              '방문, 구매이력 등의 수집 데이터를 통해 빅인의 알고리즘으로 분석한 고객 세그먼트 입니다. SDK 를 설치하면 2주 뒤에 활성화 됩니다.',\r\n          },\r\n          {\r\n            subTitle: '스마트그룹 리스트',\r\n            desc:\r\n              '리스트의 고객 그룹을 선택하면 해당하는 고객 리스트를 확인할 수 있습니다. 다만, 데이터가 충분하지 않으면 해당 세그먼트에 고객 리스트가 없을 수 있습니다.',\r\n          },\r\n        ],\r\n      },\r\n      SegmentManualList: {\r\n        title: '고객 분류',\r\n        step: [\r\n          {\r\n            desc: 'CRM, 마케팅 목적에 맞는 고객 그룹을 직접 만들어 캠페인에 활용할 수 있습니다.',\r\n          },\r\n          {\r\n            subTitle: '기본',\r\n            desc:\r\n              '마케터들이 많이 궁금해하는 고객 목록이 기본으로 제공 됩니다. 별도의 조건 설정 없이 빠르게 고객목록을 확인하고 캠페인을 진행할 수 있습니다.',\r\n          },\r\n          {\r\n            subTitle: '맞춤',\r\n            desc: '빅인 사용자가 직접 조건을 설정해 생성한 고객 그룹 입니다.',\r\n          },\r\n          {\r\n            subTitle: '새 고객 그룹 생성',\r\n            desc: '맞춤 고객 그룹을 생성하는 화면으로 이동할 수 있습니다.',\r\n          },\r\n        ],\r\n      },\r\n      ReportList: {\r\n        title: '보고서',\r\n        step: [\r\n          {\r\n            desc:\r\n              '빅인 SDK 로 수집한 데이터를 사용자가 원하는 형태로 보고서를 만들고, 고객의 행동 정보를 확인할 수 있습니다.',\r\n          },\r\n          {\r\n            subTitle: '보고서 만들기 - 이벤트',\r\n            desc: '이벤트 보고서를 통해 마케터가 직접 분석하고자 하는 조건을 설정하여 보고서를 만들 수 있습니다.',\r\n          },\r\n          {\r\n            subTitle: '보고서 만들기 - 라이브',\r\n            desc: '사이트에서 발생하는 이벤트를 실시간으로 확인할 수 있습니다.',\r\n          },\r\n          {\r\n            subTitle: '보고서 만들기 - 고객 탐색',\r\n            desc: '사용자가 생성한 고객 그룹에 해당하는 고객 목록을 확인 할 수 있습니다.',\r\n          },\r\n        ],\r\n      },\r\n    };\r\n    \r\n    \r\n    //튜토리얼 순서 설정 연결 리스트 생성\r\n    export const TutorialAutomationList = new TutorialLinkedList();\r\n    tutorialHelperText.Automation.step.forEach((_, index) =>\r\n      TutorialAutomationList.add({ menu: 'Automation', tutorialStep: index }),\r\n    );\r\n    export const TutorialCampaignList = new TutorialLinkedList();\r\n    tutorialHelperText.CampaignList.step.forEach((_, index) =>\r\n      TutorialCampaignList.add({ menu: 'CampaignList', tutorialStep: index }),\r\n    );\r\n    export const TutorialSegmentSmartList = new TutorialLinkedList();\r\n    tutorialHelperText.SegmentSmartList.step.forEach((_, index) =>\r\n      TutorialSegmentSmartList.add({ menu: 'SegmentSmartList', tutorialStep: index }),\r\n    );\r\n    export const TutorialSegmentManualList = new TutorialLinkedList();\r\n    tutorialHelperText.SegmentManualList.step.forEach((_, index) =>\r\n      TutorialSegmentManualList.add({ menu: 'SegmentManualList', tutorialStep: index }),\r\n    );\r\n    export const TutorialReportList = new TutorialLinkedList();\r\n    tutorialHelperText.ReportList.step.forEach((_, index) =>\r\n      TutorialReportList.add({ menu: 'ReportList', tutorialStep: index }),\r\n    );\r\n    ```\r\n    \r\n    - 인터페이스, 노드, 연결리스트 보기\r\n        \r\n        ```tsx\r\n        // TutorialHelper.interface.ts\r\n        \r\n        export type TutorialMenu = 'Automation' | 'CampaignList' | 'SegmentSmartList' | 'SegmentManualList' | 'ReportList';\r\n        \r\n        export type TutorialHelperText = {\r\n          [key in TutorialMenu]: {\r\n            title: string;\r\n            step: Array<{\r\n              subTitle?: string;\r\n              desc: string;\r\n            }>;\r\n          };\r\n        };\r\n        \r\n        export interface TutorialInfo {\r\n          menu: TutorialMenu;\r\n          tutorialStep: number;\r\n        }\r\n        ```\r\n        \r\n        ```tsx\r\n        // TutorialNode.ts\r\n        \r\n        import { TutorialInfo } from './TutorialHelper.interface';\r\n        \r\n        export class TutorialNode {\r\n          info: TutorialInfo;\r\n        \r\n          prev: TutorialNode | null;\r\n        \r\n          next: TutorialNode | null;\r\n        \r\n          constructor(info: TutorialInfo) {\r\n            this.info = info;\r\n            this.prev = null;\r\n            this.next = null;\r\n          }\r\n        }\r\n        ```\r\n        \r\n        ```tsx\r\n        // TutorialLinkedList.ts\r\n        \r\n        import { TutorialInfo } from './TutorialHelper.interface';\r\n        import { TutorialNode } from './TutorialNode';\r\n        \r\n        export class TutorialLinkedList {\r\n          public head: TutorialNode | null = null;\r\n        \r\n          tail: TutorialNode | null = null;\r\n        \r\n          constructor(headInfo?: TutorialInfo) {\r\n            if (headInfo) this.init(headInfo);\r\n          }\r\n        \r\n          init(headInfo: TutorialInfo): void {\r\n            this.head = new TutorialNode(headInfo);\r\n            this.tail = this.head;\r\n          }\r\n        \r\n          add(newInfo: TutorialInfo): void {\r\n            if (this.tail === null) this.init(newInfo);\r\n            else {\r\n              const newNode = new TutorialNode(newInfo);\r\n              newNode.prev = this.tail;\r\n              this.tail.next = newNode;\r\n              this.tail = newNode;\r\n            }\r\n          }\r\n        }\r\n        ```\r\n        \r\n\r\n# 포커스 컴포넌트\r\n\r\n- 포커스\r\n    \r\n    ```tsx\r\n    import React, { FC, useMemo, useEffect, useRef } from 'react';\r\n    import { useRecoilValue } from 'recoil';\r\n    import { isEqual } from 'lodash';\r\n    import { demoTutorialState } from '../../../recoil/DemoTutorialState';\r\n    import { TutorialMenu } from '../TutorialHelper/TutorialHelper.interface';\r\n    import { StyledLayout } from './TutorialFocus.style';\r\n    \r\n    export interface FocusTarget {\r\n      menu: TutorialMenu;\r\n      tutorialStep: number;\r\n    }\r\n    \r\n    const isMatch = (propTarget: FocusTarget | FocusTarget[], recoilInfo: FocusTarget) => {\r\n      if (Array.isArray(propTarget)) return propTarget.some((target) => isEqual(target, recoilInfo));\r\n      return isEqual(propTarget, recoilInfo);\r\n    };\r\n    export interface TutorialFocusProps {\r\n      focusTarget: FocusTarget | FocusTarget[];\r\n      style?: React.CSSProperties;\r\n      children: React.ReactNode;\r\n    }\r\n    export const TutorialFocus: FC<TutorialFocusProps> = ({ focusTarget, style, children }: TutorialFocusProps) => {\r\n      const ref = useRef<HTMLDivElement>(null);\r\n      const { tutorialNode, isFolded } = useRecoilValue(demoTutorialState);\r\n    \r\n      const isFocusOn = useMemo(() => {\r\n        if (isFolded) return false;\r\n        if (tutorialNode === null) return false;\r\n        const { info } = tutorialNode;\r\n        return isMatch(focusTarget, info);\r\n      }, [isFolded, tutorialNode]);\r\n    \r\n      useEffect(() => {\r\n        if (isFocusOn) ref.current?.scrollIntoView({ behavior: 'smooth', block: 'center' });\r\n      }, [isFocusOn]);\r\n    \r\n      return (\r\n        <StyledLayout isFocusOn={isFocusOn} style={style} ref={ref}>\r\n          {isFocusOn && <span className=\"dot\" />}\r\n          {children}\r\n        </StyledLayout>\r\n      );\r\n    };\r\n    ```\r\n    \r\n    - 스타일\r\n        \r\n        ```tsx\r\n        // TutorialFocus.style.tsx\r\n        \r\n        import { keyframes } from '@emotion/react';\r\n        import styled from '@emotion/styled';\r\n        \r\n        const pulse = keyframes`\r\n          0% {\r\n            transform: scale(1);\r\n          }\r\n        \r\n          70% {\r\n            opacity: 0;\r\n          }\r\n        \r\n          100% {\r\n            transform: scale(2);\r\n            opacity: 0;\r\n          }\r\n        `;\r\n        \r\n        export const StyledLayout = styled.div<{ isFocusOn: boolean }>`\r\n          label: tutorial-focus-layout;\r\n        \r\n          ${({ isFocusOn, theme }) =>\r\n            isFocusOn &&\r\n            `\r\n          border-radius: 8px;\r\n          border: solid 1px ${theme.colors.primary};\r\n          position: relative;\r\n          `}\r\n          \r\n          .dot {\r\n            position: absolute;\r\n            top: 0;\r\n            left: 0;\r\n            width: 12px;\r\n            height: 12px;\r\n            background-color: ${({ theme }) => theme.colors.primary};\r\n            border-radius: 50%;\r\n            transform: translate(-50%, -50%);\r\n            z-index: 1;\r\n        \r\n            :before {\r\n              content: '';\r\n              position: absolute;\r\n              left: 0;\r\n              right: 0;\r\n              top: 0;\r\n              bottom: 0;\r\n              background-color: ${({ theme }) => theme.colors.primary};\r\n              border-radius: 50%;\r\n              animation: ${pulse} 1.25s cubic-bezier(0.215, 0.61, 0.355, 1) infinite;\r\n            }\r\n        `;\r\n        ```\r\n        \r\n\r\n# 튜토리얼 FAB 컴포넌트\r\n\r\n- Tutorial FAB & PopOver\r\n    \r\n    ```tsx\r\n    // TutorialHelper.tsx\r\n    ...\r\n    import { useRecoilValue, useSetRecoilState } from 'recoil';\r\n    import { demoTutorialState, demoTutorialStateSelector } from '../../../recoil/DemoTutorialState';\r\n    ...\r\n    \r\n    export const TutorialHelper: FC = () => {\r\n      const i18next = useTranslation();\r\n    \r\n      const { title, subTitle, desc, prev, next } = useRecoilValue(demoTutorialStateSelector);\r\n      const { isDemo, isFolded } = useRecoilValue(demoTutorialState);\r\n      const setDemoTutorial = useSetRecoilState(demoTutorialState);\r\n    \r\n      const openPopOver = () => setDemoTutorial((curVal) => ({ ...curVal, isFolded: false }));\r\n      const closePopOver = () => setDemoTutorial((curVal) => ({ ...curVal, isFolded: true }));\r\n    \r\n      const toPrevTutorial = () => {\r\n        if (prev !== null) setDemoTutorial((currVal) => ({ ...currVal, tutorialNode: prev }));\r\n      };\r\n      const toNextTutorial = () => {\r\n        if (next !== null) setDemoTutorial((currVal) => ({ ...currVal, tutorialNode: next }));\r\n      };\r\n    \r\n      const List: FC<{ href: string; children: React.ReactNode }> = ({\r\n        href,\r\n        children,\r\n      }: {\r\n        href: string;\r\n        children: React.ReactNode;\r\n      }) => {\r\n        return (\r\n          <React.Fragment>\r\n            <StyledList\r\n              onClick={() => {\r\n                window.open(href, '_blank');\r\n              }}\r\n            >\r\n              <div className=\"children\">{children}</div>\r\n              <FontIcon name=\"ic-arrow-right\" size=\"16px\" />\r\n            </StyledList>\r\n          </React.Fragment>\r\n        );\r\n      };\r\n      return isDemo && title && desc ? (\r\n        <StyledLayout>\r\n          {!isFolded && (\r\n            <React.Fragment>\r\n              <StyledUpperPopOver>\r\n                <div className=\"title\">{i18next.t('바로가기')}</div>\r\n    \r\n                <ul className=\"menu-list\">\r\n                  <List href=\"https://bigin.io/contact\">\r\n                    <span role=\"img\" aria-label=\"\">\r\n                      💌\r\n                    </span>\r\n                    <span>{i18next.t('상담 신청하기')}</span>\r\n                  </List>\r\n    \r\n                  <List href=\"https://docs.google.com/forms/d/e/1FAIpQLScH1ZlWpgqPtcTS0RWHxGxOsUO_4cCYiBFdgxfh6SWEIZgEBA/viewform\">\r\n                    <span role=\"img\" aria-label=\"\">\r\n                      👩‍💻\r\n                    </span>\r\n                    <span>{i18next.t('비대면 오리엔테이션 듣기')}</span>\r\n                    <BGTooltip\r\n                      title={\r\n                        i18next.t(\r\n                          'bigin 오리엔테이션은 bigin을 통해 활용할 수 있는 데이터 항목, 데이터를 기반으로 고객을 분류하는 세 가지 방법, CRM 마케팅 활용 사례를 공유하고 간략한 bigin 대시보드 시연합니다.',\r\n                        ) || ''\r\n                      }\r\n                    >\r\n                      <div className=\"tip\">\r\n                        <FontIcon name=\"ic-info\" size=\"16px\" />\r\n                      </div>\r\n                    </BGTooltip>\r\n                  </List>\r\n                </ul>\r\n              </StyledUpperPopOver>\r\n    \r\n              {title && desc && (\r\n                <StyledPopOver>\r\n                  <div className=\"border-box\">\r\n                    <div className=\"title\">{subTitle ? `${title}: ${subTitle}` : title}</div>\r\n                    <div className=\"desc\">{desc}</div>\r\n                  </div>\r\n    \r\n                  <div className=\"bottom\">\r\n                    <button type=\"button\" className=\"close\" onClick={closePopOver}>\r\n                      접기\r\n                    </button>\r\n    \r\n                    <BGButtonGroup>\r\n                      {prev !== null && (\r\n                        <BGButton appearance=\"secondary\" onClick={toPrevTutorial}>\r\n                          <FontIcon name=\"ic-arrow-left\" size=\"20px\" />\r\n                        </BGButton>\r\n                      )}\r\n    \r\n                      {next !== null && (\r\n                        <BGButton onClick={toNextTutorial}>\r\n                          <FontIcon name=\"ic-arrow-right\" size=\"20px\" />\r\n                        </BGButton>\r\n                      )}\r\n                    </BGButtonGroup>\r\n                  </div>\r\n                </StyledPopOver>\r\n              )}\r\n            </React.Fragment>\r\n          )}\r\n    \r\n          {/* button */}\r\n          <StyledFAB type=\"button\" active={!isFolded} onClick={isFolded ? openPopOver : closePopOver}>\r\n            <img\r\n              src={isFolded ? '/assets/img/demo/logo-symbol-white.svg' : '/assets/img/demo/img-tutorial-helper.svg'}\r\n              alt=\"tutorial helper\"\r\n            />\r\n          </StyledFAB>\r\n        </StyledLayout>\r\n      ) : (\r\n        <React.Fragment />\r\n      );\r\n    };\r\n    ```\r\n    \r\n    - 스타일\r\n        \r\n        ```tsx\r\n        // TutorialHelper.style.tsx\r\n        \r\n        import { keyframes, css } from '@emotion/react';\r\n        import styled from '@emotion/styled';\r\n        \r\n        const borderRadiusBig = 12;\r\n        const borderRadiusSmall = 8;\r\n        \r\n        const pulse = keyframes`\r\n          0% {\r\n            transform: scale(1);\r\n          }\r\n        \r\n          70% {\r\n            opacity: 0;\r\n          }\r\n        \r\n          100% {\r\n            transform: scale(1.2);\r\n            opacity: 0;\r\n          }\r\n        `;\r\n        \r\n        export const StyledLayout = styled.div`\r\n          label: tutorial-helper-layout;\r\n        \r\n          box-sizing: border-box;\r\n        \r\n          position: fixed;\r\n          right: 30px;\r\n          bottom: 30px;\r\n          z-index: 99;\r\n          display: flex;\r\n          flex-direction: column;\r\n          align-items: flex-end;\r\n        `;\r\n        \r\n        export const StyledUpperPopOver = styled.div`\r\n          label: tutorial-helper-upper-pop-over;\r\n        \r\n          box-sizing: border-box;\r\n        \r\n          width: 320px;\r\n          padding: 9px 12px;\r\n          border-radius: ${borderRadiusBig}px;\r\n          background-color: #000a29;\r\n        \r\n          .title {\r\n            font-size: 14px;\r\n            font-weight: bold;\r\n            line-height: 1.43;\r\n            color: #e3e5eb;\r\n            margin-bottom: 8px;\r\n          }\r\n        \r\n          .menu-list {\r\n            list-style: none;\r\n            margin: 0;\r\n            padding: 0;\r\n          }\r\n        `;\r\n        \r\n        export const StyledList = styled.li`\r\n          label: upper-pop-over-list;\r\n        \r\n          box-sizing: border-box;\r\n          list-style: none;\r\n          display: flex;\r\n          justify-content: space-between;\r\n          align-items: center;\r\n          padding: 6px 10px;\r\n          border-radius: ${borderRadiusSmall}px;\r\n          border: solid 1px #2b4289;\r\n          font-size: 14px;\r\n          font-weight: normal;\r\n          line-height: 1.71;\r\n          color: #e4e4e4;\r\n        \r\n          :hover {\r\n            cursor: pointer;\r\n          }\r\n        \r\n          :not(:last-child) {\r\n            margin-bottom: 8px;\r\n          }\r\n        \r\n          .children {\r\n            display: flex;\r\n        \r\n            span[role='img'] {\r\n              margin-right: 10px;\r\n            }\r\n        \r\n            .tip {\r\n              margin-left: 3px;\r\n              display: flex;\r\n              align-items: center;\r\n            }\r\n          }\r\n        `;\r\n        \r\n        export const StyledPopOver = styled.div`\r\n          label: tutorial-helper-pop-over;\r\n        \r\n          box-sizing: border-box;\r\n        \r\n          width: 320px;\r\n          margin-top: 5px;\r\n          padding: 8px 8px 12px;\r\n          border-radius: ${borderRadiusBig}px;\r\n          background-color: #000a29;\r\n          position: relative;\r\n        \r\n          :before {\r\n            content: '';\r\n            position: absolute;\r\n            right: 40px;\r\n            bottom: -16px;\r\n            width: 0;\r\n            height: 0;\r\n            border-top: 16px solid black;\r\n            border-left: 16px solid transparent;\r\n          }\r\n        \r\n          .border-box {\r\n            border-radius: ${borderRadiusSmall}px;\r\n            border: solid 1px #2b4289;\r\n            padding: 12px;\r\n            margin-bottom: 18px;\r\n        \r\n            .title {\r\n              font-size: 16px;\r\n              font-weight: bold;\r\n              line-height: 1.5;\r\n              color: #fff;\r\n              margin-bottom: 12px;\r\n            }\r\n        \r\n            .desc {\r\n              font-size: 14px;\r\n              font-weight: normal;\r\n              line-height: 1.71;\r\n              color: #d8d8d8;\r\n            }\r\n          }\r\n        \r\n          .bottom {\r\n            display: flex;\r\n            justify-content: space-between;\r\n        \r\n            .close {\r\n              border: 0;\r\n              outline: 0;\r\n              background-color: transparent;\r\n              font-size: 16px;\r\n              font-weight: normal;\r\n              line-height: normal;\r\n              color: #abb3c2;\r\n        \r\n              :hover {\r\n                cursor: pointer;\r\n                font-weight: bold;\r\n                text-decoration: underline;\r\n              }\r\n            }\r\n        \r\n            .bg-button {\r\n              padding: 8px;\r\n            }\r\n          }\r\n        `;\r\n        \r\n        export const StyledFAB = styled.button<{ active?: boolean }>`\r\n          label: tutorial-helper-fab;\r\n        \r\n          all: unset;\r\n        \r\n          display: flex;\r\n          justify-content: center;\r\n          align-items: center;\r\n          position: relative;\r\n          transition: width 1s ease, height 1s ease;\r\n        \r\n          :hover {\r\n            cursor: pointer;\r\n          }\r\n        \r\n          ${({ active, theme }) => {\r\n            if (active)\r\n              return css`\r\n                background-color: ${theme.colors.primary};\r\n                margin-top: 30px;\r\n                border-radius: ${borderRadiusBig}px;\r\n                width: 80px;\r\n                height: 80px;\r\n        \r\n                &:before {\r\n                  content: '';\r\n                  position: absolute;\r\n                  left: 0;\r\n                  top: 0;\r\n                  right: 0;\r\n                  bottom: 0;\r\n                  border-radius: ${borderRadiusBig}px;\r\n                  transform: scale(1);\r\n                  border: 1px solid ${theme.colors.primary};\r\n                  animation: ${pulse} 1.25s cubic-bezier(0.215, 0.61, 0.355, 1) infinite;\r\n                }\r\n        \r\n                &:after {\r\n                  content: '';\r\n                  position: absolute;\r\n                  left: 0;\r\n                  top: 0;\r\n                  right: 0;\r\n                  bottom: 0;\r\n                  border-radius: ${borderRadiusBig}px;\r\n                  transform: scale(1);\r\n                  border: 1px solid ${theme.colors.primary};\r\n                  animation: ${pulse} 1.25s cubic-bezier(0.215, 0.61, 0.355, 1) infinite;\r\n                  animation-delay: 0.2s;\r\n                }\r\n        \r\n                img {\r\n                  width: 100%;\r\n                  height: auto;\r\n                }\r\n              `;\r\n        \r\n            return css`\r\n              background-color: #000a29;\r\n              width: 48px;\r\n              height: 48px;\r\n              border-radius: ${borderRadiusSmall}px;\r\n        \r\n              img {\r\n                width: 45%;\r\n                height: auto;\r\n              }\r\n            `;\r\n          }}\r\n        `;\r\n        ```\r\n        \r\n\r\n# 사용\r\n\r\n- /demo 라우터로 들어왔을 때, 데모 계정으로 로그인 한 후 isDemo 업데이트\r\n    \r\n    ```tsx\r\n    \r\n    demoLoginPromise.then((res)=>{\r\n    \t...\r\n    \tsetDemoTutorial((prev) => ({ ...prev, isDemo: true }));\r\n    \t...\r\n    })\r\n    ```\r\n    \r\n- 튜토리얼 FAB + 팝오버\r\n    \r\n    ```tsx\r\n    // 최상단 컴포넌트에 추가\r\n    <TutorialHelper />\r\n    ```\r\n    \r\n- 페이지 시작 부분에서 초기화\r\n\r\n```tsx\r\n// /pages/Automation.tsx\r\n\r\nimport { useRecoilValue, useSetRecoilState } from 'recoil';\r\nimport { demoTutorialState } from '@/recoil/DemoTutorialState';\r\nimport { TutorialAutomationList } from '@/components/Demo/TutorialHelper/TutorialHelper.data';\r\n\r\nexport const Automation = (): ReactElement => {\r\n\t...\r\n  const { isDemo } = useRecoilValue(demoTutorialState);\r\n  const setDemoTutorial = useSetRecoilState(demoTutorialState);\r\n\r\n\t...\r\n\r\n  useEffect(() => {\r\n    if (isDemo) setDemoTutorial((curVal) => ({ ...curVal, tutorialNode: TutorialAutomationList.head }));\r\n    return () => {\r\n      if (isDemo) setDemoTutorial((curVal) => ({ ...curVal, tutorialNode: null }));\r\n    };\r\n  }, [isDemo]);\r\n\r\n\t...\r\n\r\n  return (\r\n    <BGPage className=\"container-section\" direction=\"column\" css={[baseCss]}>\r\n      ...\r\n    </BGPage>\r\n  );\r\n};\r\n```\r\n\r\n- 포커스 설정\r\n    - demoTutorialState의 menu가 “Automation”이고 focusStep이 1이면 포커싱이 활성화된다.\r\n\r\n```tsx\r\n<TutorialFocus focusTarget={{ menu: 'Automation', tutorialStep: 3 }}>\r\n  <BorderSection>\r\n    ...\r\n  </BorderSection> \r\n</TutorialFocus>\r\n```\r\n\r\n```tsx\r\n<TutorialFocus\r\n  focusTarget={[\r\n    { menu: 'Automation', tutorialStep: 3 },\r\n    { menu: 'CampaignList', tutorialStep: 2 },\r\n  ]}\r\n>\r\n  <BorderSection>\r\n    ...\r\n  </BorderSection>\r\n</TutorialFocus>\r\n```"},{"id":1636038000,"title":"평점 분석을 위한 Python 라이브러리 기초 문법을 배워보자\r","author":"jangky000\r","date":"2021.11.05\r","content":"\r\n# 사용 라이브러리\r\n\r\n````python\r\nimport pandas as pd\r\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\nimport math\r\n````\r\n\r\n# CSV 불러오기\r\n\r\n````python\r\ndf = pd.read_csv('movielens/ratings.csv')\r\n````\r\n\r\n\r\n# DataFrame의 shape, columns 확인\r\n````python\r\nprint(df.shape)\r\nprint(df.columns)\r\n````\r\n\r\n````\r\nresult: \r\n\r\n(100004, 4)\r\nIndex(['userId', 'movieId', 'rating', 'timestamp'], dtype='object')\r\n````\r\n\r\n# iloc\r\n- integer-location based indexing\r\n- 행 선택\r\n\r\n````python\r\ndf[['userId', 'movieId', 'rating']].iloc[10:15]\r\n````\r\n\r\n````\r\nresult: \r\n\r\n\tuserId\tmovieId\trating\r\n10\t1\t1371\t2.5\r\n11\t1\t1405\t1.0\r\n12\t1\t1953\t4.0\r\n13\t1\t2105\t4.0\r\n14\t1\t2150\t3.0\r\n````\r\n\r\n# timestamp를 '2009-12-14 02:52:24' 형태로 출력\r\n\r\n````python\r\npd.to_datetime(df['timestamp'].astype(int), unit='s')\r\n````\r\n\r\n````\r\nresult: \r\n\r\n0        2009-12-14 02:52:24\r\n1        2009-12-14 02:52:59\r\n2        2009-12-14 02:53:02\r\n3        2009-12-14 02:53:05\r\n4        2009-12-14 02:53:25\r\n                 ...        \r\n````\r\n\r\n# 'year' 칼럼 추가\r\n\r\n````python\r\ndf['date'] = pd.to_datetime(df['timestamp'].astype(int), unit='s')\r\ndf['year'] = df['date'].apply(lambda x: x.year)\r\ndf\r\n````\r\n\r\n````\r\nresult: \r\n\r\n        userId  movieId  rating   timestamp                date  year\r\n0            1       31     2.5  1260759144 2009-12-14 02:52:24  2009\r\n1            1     1029     3.0  1260759179 2009-12-14 02:52:59  2009\r\n2            1     1061     3.0  1260759182 2009-12-14 02:53:02  2009\r\n3            1     1129     2.0  1260759185 2009-12-14 02:53:05  2009\r\n4            1     1172     4.0  1260759205 2009-12-14 02:53:25  2009\r\n...        ...      ...     ...         ...                 ...   ...\r\n````\r\n\r\n# 그룹별 Count\r\n- group by(), size()\r\n\r\n````python\r\nyearCounts = df.groupby('year').size()\r\nprint(type(yearCounts))\r\nyearCounts\r\n````\r\n\r\n````\r\nresult: \r\n\r\n<class 'pandas.core.series.Series'>\r\nyear\r\n1995        3\r\n1996     6239\r\n1997     3294\r\n1998     1825\r\n1999     5901\r\n2000    13869\r\n2001     4658\r\n2002     3938\r\n...\r\n````\r\n\r\n# 바 차트 그리기\r\n\r\n````python\r\nyearCounts = pd.DataFrame(data = yearCounts, columns = ['counts']) # DataFrame\r\nyearCounts.plot(kind='bar', figsize=(12, 8), label='counts', legend=True)\r\n````\r\n\r\n````\r\nresult: \r\n````\r\n<img src=\"https://user-images.githubusercontent.com/46799722/140495795-36473127-33d3-488c-afcc-16d3570d05f5.png\" style=\"width: 100%;\"/>\r\n\r\n# Train Data 추출\r\n- frac: 추출할 표본 비율\r\n- random_state: 난수 발생 초기값, 재현 가능성을 위해 필요, seed for random number generator\r\n\r\n````python\r\ntrain = df.sample(frac=0.9, random_state=1)\r\ntrain['type'] = 'train'\r\ntrain.head()\r\n````\r\n\r\n````\r\nresult: \r\n\r\n       userId  movieId  rating   timestamp                date  year   type\r\n99778     667      446     4.0   847271818 1996-11-06 09:16:58  1996  train\r\n16170     104    71135     3.5  1446674062 2015-11-04 21:54:22  2015  train\r\n3521       19     1394     5.0   855192061 1997-02-06 01:21:01  1997  train\r\n55070     395      671     5.0   953007109 2000-03-14 04:11:49  2000  train\r\n25477     187      953     3.0  1230361942 2008-12-27 07:12:22  2008  train\r\n````\r\n\r\n# Test Data 추출\r\n\r\n````python\r\ntest = df.drop(train.index)\r\ntest['type'] = 'test'\r\ntest.head()\r\n````\r\n\r\n````\r\nresult: \r\n\r\n    userId  movieId  rating   timestamp                date  year  type\r\n9        1     1343     2.0  1260759131 2009-12-14 02:52:11  2009  test\r\n15       1     2193     2.0  1260759198 2009-12-14 02:53:18  2009  test\r\n18       1     2968     1.0  1260759200 2009-12-14 02:53:20  2009  test\r\n27       2      110     4.0   835355532 1996-06-21 11:12:12  1996  test\r\n47       2      273     4.0   835355779 1996-06-21 11:16:19  1996  test\r\n````\r\n\r\n---\r\n\r\n# 영화 전체의 평균 평점으로 각각의 영화 평점 예측\r\n\r\n## Train Data의 평점 평균을 계산\r\n\r\n````python\r\navgRating = train['rating'].mean()\r\navgRating\r\n````\r\n\r\n````\r\nresult: \r\n\r\n3.5421147948980045\r\n````\r\n\r\n## Test 데이터의 'pred' 칼럼에 Train Data의 평점 평균을 모두 추가\r\n\r\n````python\r\navgPred = test[['userId', 'movieId', 'rating']].copy()\r\navgPred['pred'] = avgRating\r\navgPred.head()\r\n````\r\n\r\n````\r\nresult: \r\n\r\n\tuserId\tmovieId\trating\tpred\r\n9\t1\t1343\t2.0\t3.542115\r\n15\t1\t2193\t2.0\t3.542115\r\n18\t1\t2968\t1.0\t3.542115\r\n27\t2\t110\t4.0\t3.542115\r\n47\t2\t273\t4.0\t3.542115\r\n````\r\n\r\n## Test 데이터의 평점과 예측값 사이의 MAE, RMSE를 계산\r\n\r\n- 평점 예측 기준이 세분화되지 않아 에러가 크다.\r\n- rmse는 평점과 예측값 사이의 차이가 클수록 mae에 비해 에러값이 증가\r\n\r\n````python\r\navgPredErrors = avgPred['pred'] - avgPred['rating']\r\nmae = avgPredErrors.abs().mean()\r\nrmse = math.sqrt(avgPredErrors.pow(2).mean())\r\nprint(mae)\r\nprint(rmse)\r\n````\r\n\r\n````\r\nresult: \r\n\r\n0.8586874505577531\r\n1.0629409004509323\r\n````\r\n\r\n---\r\n\r\n# 사용자 ID별 영화 평균 평점으로 각각의 영화 평점 예측\r\n\r\n- 사용자의 평점 성향을 파악할 수 있다.\r\n\r\n## Train 데이터에서 사용자 ID별로 그룹 평균 계산\r\n\r\n- .groupby('userId').mean() === .groupby('userId').agg('mean')\r\n- agg는 그룹별로 결과를 얻는 조작을 Aggregation의 약자\r\n- .agg({'price': my_mean, 'quantity': np.sum}) 등으로 두 개 이상의 그룹 계산을 진행할 수 있다.\r\n\r\n````python\r\nuserAvgRatings = train[['userId', 'rating']].groupby('userId').agg('mean')\r\nuserAvgRatings.columns = ['pred']\r\nuserAvgRatings\r\n````\r\n\r\n````\r\nresult: \r\n\r\n1\t2.705882\r\n2\t3.485294\r\n3\t3.579545\r\n4\t4.351351\r\n5\t3.893617\r\n````\r\n\r\n## merge: left inner join\r\n\r\n- Test 데이터에 사용자별 예측 평점을 추가한다.\r\n- right_index: Use the index from the left DataFrame as the join key(s). \r\n- right_index는 default가 false이므로 표기할 필요 없다.\r\n\r\n````python\r\nuserAvgPred = test[['userId', 'movieId', 'rating']]\r\nuserAvgPred = pd.merge(userAvgPred, userAvgRatings, how='left', left_on=['userId'], right_on=['userId'], right_index = False)\r\nuserAvgPred.head()\r\n\r\n````\r\n\r\n````\r\nresult: \r\n\r\n\tuserId\tmovieId\trating\tpred\r\n0\t1\t1343\t2.0\t2.705882\r\n1\t1\t2193\t2.0\t2.705882\r\n2\t1\t2968\t1.0\t2.705882\r\n3\t2\t110\t4.0\t3.485294\r\n4\t2\t273\t4.0\t3.485294\r\n````\r\n\r\n## MAE, RMSE 계산\r\n\r\n- 사용자의 성향이 고려되어 에러 값이 낮아졌다.\r\n- MAE: 0.8586874505577531 -> 0.7581636860631077\r\n- RSME: 1.0629409004509323 -> 0.9652871605248908\r\n\r\n````python\r\nuserAvgPredErrors = userAvgPred['pred'] - userAvgPred['rating']\r\nmae2 = userAvgPredErrors.abs().mean()\r\nrmse2 = math.sqrt(userAvgPredErrors.pow(2).mean())\r\nprint(mae2)\r\nprint(rmse2)\r\n````\r\n\r\n````\r\nresult: \r\n\r\n0.7581636860631077\r\n0.9652871605248908\r\n````\r\n\r\n---\r\n\r\n# 영화별 평점 평균을 통한 영화 평점 예측\r\n\r\n## movieId 그룹별로 평균 계산\r\n\r\n````python\r\nitemAvgRatings = train[['movieId', 'rating']].groupby('movieId').agg('mean')\r\nitemAvgRatings.columns = ['pred'] # 'rating' 칼럼의 이름을 'pred'로 수정\r\nitemAvgRatings.head()\r\n\r\n````\r\n\r\n````\r\nresult: \r\n\r\n\tpred\r\nmovieId\t\r\n1\t3.870044\r\n2\t3.435644\r\n3\t3.200000\r\n4\t2.388889\r\n5\t3.294118\r\n````\r\n\r\n## merge\r\n\r\n````python\r\nitemAvgPred = test[['userId', 'movieId', 'rating']]\r\nitemAvgPred = pd.merge(itemAvgPred, itemAvgRatings, how='left', left_on=['movieId'], right_on=['movieId'], right_index = False)\r\nitemAvgPred.head()\r\n````\r\n\r\n````\r\nresult: \r\n\r\n  userId\tmovieId\trating\tpred\r\n0\t1\t1343\t2.0\t3.720588\r\n1\t1\t2193\t2.0\t3.166667\r\n2\t1\t2968\t1.0\t3.587500\r\n3\t2\t110\t4.0\t3.923858\r\n4\t2\t273\t4.0\t3.125000\r\n````\r\n\r\n## MAE, RMSE\r\n\r\n- 사용자 별로 평점을 예측 했을 때보다 에러가 조금 상승했다.\r\n\r\n````python\r\nitemAvgPredErrors = itemAvgPred['pred'] - itemAvgPred['rating']\r\nmae3 = itemAvgPredErrors.abs().mean()\r\nrmse3 = math.sqrt(itemAvgPredErrors.pow(2).mean())\r\nprint(mae3)\r\nprint(rmse3)\r\n````\r\n\r\n````\r\nresult: \r\n\r\n0.761464979636912\r\n0.974768257763819\r\n````\r\n\r\n---\r\n\r\n# URL을 주피터 노트북에서 이미지로 확인하기\r\n\r\n## 데이터 불러오기 \r\n````python\r\ndfMovie = pd.read_csv('movielens/movies_w_imgurl.csv')\r\ndfMovie.head()\r\n````\r\n\r\n````\r\nresult: \r\n\r\n\r\n  movieId\timdbId\ttitle\tgenres\timgurl\r\n0\t1\t114709\tToy Story (1995)\tAdventure|Animation|Children|Comedy|Fantasy\thttps://images-na.ssl-images-amazon.com/images...\r\n1\t2\t113497\tJumanji (1995)\tAdventure|Children|Fantasy\thttps://images-na.ssl-images-amazon.com/images...\r\n2\t3\t113228\tGrumpier Old Men (1995)\tComedy|Romance\thttps://images-na.ssl-images-amazon.com/images...\r\n3\t4\t114885\tWaiting to Exhale (1995)\tComedy|Drama|Romance\thttps://images-na.ssl-images-amazon.com/images...\r\n4\t5\t113041\tFather of the Bride Part II (1995)\tComedy\thttps://images-na.ssl-images-amazon.com/images...\r\n````\r\n\r\n## 주피터 노트북 셀 실행화면에 다음과 같이 이미지를 확인할 수 있다.\r\n\r\n````python\r\nfrom IPython.display import Image, display\r\n\r\nfor i in range(0, 5):\r\n    display(Image(dfMovie['imgurl'].iloc[i]))\r\n````\r\n\r\n````\r\nresult: \r\n````\r\n<img src=\"https://user-images.githubusercontent.com/46799722/140501330-31eaf555-3d63-4dba-910d-a065f680b14b.png\" style=\"width: 100%;\"/>\r\n"},{"id":1635951600,"title":"React HOC를 사용해보자\r","author":"jangky000\r","date":"2021.11.04\r","content":"\r\n# 상황 #1\r\n\r\n이번에 회사에서 React 프로젝트에 4개의 새로운 페이지를 추가하는 태스크를 맡게 되었다. \r\n\r\n아래와 같이 4개의 페이지를 제작해야 한다고 하자, 4개의 페이지에는 공통적으로 날짜를 선택할 수 있는 Calendar Selector가 있고, 이 셀렉터에는 사용자에 따라 **선택 가능한 기간**과 **기본 설정 기간** 정보가 필요하다.\r\n- **선택 가능한 기간**은 서버에서 데이터를 불러와 전역 상태로 관리되고 있는 데이터다.\r\n- **기본 설정 기간** 역시 전역 상태 데이터다.\r\n- 각각의 페이지는 Calendar Selector에서 선택한 기간에 따라 다른 데이터를 불러와 출력해야 한다.\r\n\r\n<div style=\"display: grid;grid-template-columns: repeat(2, 1fr);grid-column-gap: 20px;grid-row-gap: 20px;\">\r\n    <img src=\"https://user-images.githubusercontent.com/46799722/140294319-00c25762-be33-4452-93ad-b9ffec94b290.png\" style=\"width:100%;\"/>\r\n    <img src=\"https://user-images.githubusercontent.com/46799722/140294330-2092adfa-5527-4b24-a23b-2c75838e98f7.png\" style=\"width:100%;\"/>\r\n    <img src=\"https://user-images.githubusercontent.com/46799722/140294336-21ddcf01-228d-4ff0-b74c-4148139496cc.png\" style=\"width:100%;\"/>\r\n    <img src=\"https://user-images.githubusercontent.com/46799722/140294339-c4061391-c5a0-47ab-b619-4a34e8a11ec8.png\" style=\"width:100%;\"/>\r\n</div>\r\n\r\n# 코드의 재사용\r\n\r\n*전역 상태 관리 스토어에서 **선택 가능한 기간**과 **기본 설정 기간**을 가져와 데이터를 검증을 한 뒤 사용하고 싶다, 4개의 페이지에서 똑같이.*\r\n\r\n**선택 가능한 기간**과, **기본 설정 기간** 정도 데이터를 불러오는데, 이 로직을 재사용하겠다고 결심한 이유는 다음과 같다.\r\n\r\n- 유지 보수할 때, 복사 붙여넣기 되어 있는 4개의 소스를 하나씩 찾아 고치고 싶지 않다.\r\n- 각각의 페이지에서 최대한 데이터를 가공하는 로직을 제거하고, View를 그리는 역할에만 집중하고 싶다.\r\n\r\n# 리액트에서 코드를 재사용할 수 있는 방법\r\n\r\n- Util 성 순수 함수\r\n- Composition\r\n- Render Props\r\n- HOC\r\n- Custom Hook\r\n\r\n# 이중 HOC를 선택한 이유는 다음과 같다.\r\n\r\n- Util 성 순수함수는 전역 상태 관리 스토어 값을 활용 할 수 없다.(순수 함수 정의에 위배)\r\n- Composition은, Render Props는 JSX Element 형태로 사용하여 동적으로 무엇을 그릴지에 초점이 있는 느낌이다.\r\n- 하지만 내게 필요한 기능은 단순히 전역 상태 관리 스토어에서 데이터를 가져오는 기능이다.\r\n- <s>선택지가 아직 두 개가 남았지만 내게 가장 낯선 HOC를 사용해보고 싶었다.</s>\r\n\r\n# HOC(Higher Order Component): 고차함수\r\n\r\n> 고차 컴포넌트(HOC, Higher Order Component)는 컴포넌트 로직을 재사용하기 위한 React의 고급 기술이다. 고차 컴포넌트(HOC)는 React API의 일부가 아니며, React의 구성적 특성에서 나오는 패턴이다. ([참고](https://ko.reactjs.org/docs/higher-order-components.html))\r\n\r\n> *\"횡단 관심사(Cross-Cutting Concerns)에 고차 컴포넌트를 사용할 수 있다.\"*\r\n\r\n이 설명을 보고 JAVA의 AOP가 떠올랐다. 여러 컴포넌트에서 공통적으로 사용되는 로직을 횡단 관심사로 보아 하나로 묶어 관리할 수 있다고 한다.\r\n\r\n## HOC는\r\n\r\n- 리액트 컴포넌트를 인자로 받아서 다른 리액트 컴포넌트를 반환하는 함수\r\n- 컴포넌트에 특정 기능을 부여한다.\r\n- 특정한 기능을 수행한 후 인자로 받은 컴포넌트에 데이터를 넘겨줄 수도 있다.\r\n\r\n\r\n# 어떠한 경우에 HOC를 사용할까?\r\n\r\n- 로딩, 에러, 데이터 요청 등 여러 컴포넌트에서 반복적으로 사용되는 로직을 컴포넌트 바깥으로 분리할 때 고려될 수 있다.\r\n\r\n# Functional하게 HOC 사용하기\r\n\r\n- React 공식 홈페이지에서는 class 형태로 HOC를 사용하는 예제가 나와 있지만, 리액트 프로젝트에서 함수형 컴포넌트로 사용하고 있기 때문에, 함수의 형태로 HOC를 사용하는 방법을 조사했다.\r\n\r\n# 사용 예제\r\n\r\n````typescript\r\n// HOC 함수: withCalendarDateRange\r\nimport React, { FC, useMemo } from 'react';\r\nimport moment from 'moment';\r\nimport { useDataStore } from './context/Store';\r\nimport { DateRange } from './Calendar';\r\n\r\nexport interface CalendarDateRangeProps {\r\n  selectableDateRange: DateRange;\r\n  initSelectedDateRange: DateRange;\r\n}\r\n\r\ninterface WrapperProps extends CalendarDateRangeProps {\r\n  [props: string]: unknown;\r\n}\r\n\r\nexport const withCalendarDateRange = <OriginProps,>(WrappedComponent: FC<WrapperProps>): FC<OriginProps> => {\r\n  const WrapperComponent = (props?: OriginProps) => {\r\n    const { projectStore } = useDataStore();\r\n\r\n    const selectableDateRange = useMemo(() => {\r\n      const dateRange = projectStore.date.selectable\r\n      // 검증 로직...\r\n      return dateRange;\r\n    }, []);\r\n\r\n    const initSelectedDateRange = useMemo(() => {\r\n      const dateRange = projectStore.date.init\r\n      // 검증 로직...\r\n      return dateRange;\r\n    }, []);\r\n\r\n    return (\r\n      <WrappedComponent\r\n        {...props}\r\n        selectableDateRange={selectableDateRange}\r\n        initSelectedDateRange={initSelectedDateRange}\r\n      />\r\n    );\r\n  };\r\n  WrapperComponent.displayName = WrappedComponent.displayName || WrappedComponent.name || 'CalendarDateRangeWrapper';\r\n  return WrapperComponent;\r\n};\r\n````\r\n\r\n````typescript\r\n// 공통 로직을 추가할 컴포넌트: WrappedVisitStatus\r\n// Props를 통해 selectableDateRange, initSelectedDateRange 데이터를 받는다.\r\nimport React, { useState } from 'react';\r\nimport { Calendar, DateRange } from './Calendar';\r\nimport { withCalendarDateRange, CalendarDateRangeProps } from './HOC/withCalendarDateRange';\r\n\r\ntype WrappedVisitStatusProps = CalendarDateRangeProps;\r\n\r\nconst WrappedVisitStatus = ({ selectableDateRange, initSelectedDateRange }: WrappedVisitStatusProps) => {\r\n  const [dateRange, setDateRange] = useState<DateRange>();\r\n  const handleDateRange = (changedDateRange: DateRange) => setDateRange(changedDateRange);\r\n\r\n  return (\r\n    <StyledLayout>\r\n      <StyledTitleWrapper>\r\n        <StyledTitle>방문 현황</StyledTitle>\r\n        <Calendar\r\n          selectableRange={selectableDateRange}\r\n          initDateRange={initSelectedDateRange}\r\n          dateHandle={handleDateRange}\r\n        />\r\n      </StyledTitleWrapper>\r\n    </StyledLayout>\r\n  );\r\n};\r\n\r\n// HOC를 통해 캘린더 데이터 Props 삽입\r\nexport const VisitStatus = withCalendarDateRange(WrappedVisitStatus);\r\n````\r\n\r\n````typescript\r\n// 공통 로직이 추가된 컴포넌트 사용: Dashboard\r\nimport React, { FC, useState } from 'react';\r\nimport { BGTab, ITab } from './components/BGTab';\r\nimport { TopNavBar } from './components/TopNavBar';\r\nimport { Container } from './Dashboard.style';\r\nimport { tabList } from './Dashboard.data';\r\nimport { BorderSection } from './components/BorderSection';\r\nimport { VisitStatus } from './components/VisitStatus';\r\n\r\ninterface IUseTab {\r\n  selectedTab: ITab;\r\n  handleTab: (tab: ITab) => void;\r\n}\r\nexport const useTab = (defaultTab: ITab): IUseTab => {\r\n  const [selectedTab, setTab] = useState<ITab>(defaultTab);\r\n  const handleTab = (tab: ITab) => {\r\n    setTab(tab);\r\n  };\r\n  return { selectedTab, handleTab };\r\n};\r\n\r\nexport const Dashboard: FC = () => {\r\n  const { selectedTab, handleTab } = useTab(tabList[0]);\r\n\r\n  return (\r\n    <Container>\r\n      <TopNavBar title=\"CRM 대시보드\" style={{ border: 0 }} />\r\n      <BGTab tabList={tabList} selectedTab={selectedTab} handleTab={handleTab} />\r\n      <BorderSection style={{ marginTop: '32px', borderRadius: '8px' }}>\r\n        {selectedTab.key === 'visitStatus' && <VisitStatus />}\r\n      </BorderSection>\r\n    </Container>\r\n  );\r\n};\r\n\r\n````\r\n\r\n# 좀 더 간단한 코드\r\n\r\n````javascript\r\n// HOC\r\nexport const withHOC = WrappedComponent => {\r\n  const NewComponent = async (props) => {\r\n    // 공통 로직\r\n    const { newData } = await fetchNewDate(); // newData = 'Higher Order Component'\r\n    return (\r\n        <WrappedComponent {...props} data={newData} />\r\n      );\r\n  }\r\n  NewComponent.displayName = 'NewComponent'\r\n  return NewComponent;\r\n}\r\n````\r\n\r\n````javascript\r\n// 공통 로직을 추가할 컴포넌트\r\nimport { withHOC } from 'withHOC.tsx'\r\nconst WrappedComponent = ({text, data})=>{\r\n    // name은 PageComponent에서 props로 넘겨준 데이터\r\n    // data는 HOC에 의해 props에 추가된\r\n    return (\r\n        <div>\r\n            <div>{text}</div>\r\n            <div>{data}</div>\r\n        </div>\r\n    );\r\n}\r\nexport const MyComponent = withHOC(WrappedComponent)\r\n````\r\n\r\n````javascript\r\nimport { MyComponent } from 'MyComponent.tsx'\r\n// 공통 로직이 추가된 컴포넌트 사용\r\nconst PageComponent에서 = ()=>{\r\n    return <MyComponent text={'HOC'}/>\r\n}\r\n````\r\n````\r\n결과 화면:\r\n\r\nHOC\r\nHigher Order Component\r\n````\r\n\r\n# 그런데,\r\n\r\n어찌저찌 HOC를 사용해보고 싶은 지적인 욕심은 풀었으나 HOC의 단점들이 눈에 들어오기 시작했다.\r\n\r\n- 타입스크립트를 사용한다면, 타입을 맞추기도 어려울 뿐더러, 읽기도 어렵다.\r\n\r\n````typescript\r\nexport interface CalendarDateRangeProps {\r\n  selectableDateRange: DateRange;\r\n  initSelectedDateRange: DateRange;\r\n}\r\n\r\ninterface WrapperProps extends CalendarDateRangeProps {\r\n  [props: string]: unknown;\r\n}\r\n\r\nexport const withCalendarDateRange = <OriginProps,>(WrappedComponent: FC<WrapperProps>): FC<OriginProps> => {\r\n  const WrapperComponent = (props?: OriginProps) => {\r\n    ...\r\n````\r\n\r\n- 여러 HOC를 하나의 컴포넌트에서 사용해야 할 경우가 생긴다면, `withA(withB(withC(MyComponent)))` 처럼 함수 호출 Depth가 깊어진다(Nesting).\r\n\r\n# 나는 평소 Hooks를 소중히 여기지 않았지\r\n\r\n필자는 리액트를 처음 시작할 때부터 함수형 컴포넌트와 리액트 Hooks를 사용해왔기 때문에 Hooks의 편리함을 잘 몰랐다. [리액트 Hooks는 대부분의 HOC와 Render Props를 대체 가능하며, 더 간단하고 리액트 가상 DOM Tree의 Nesting을 줄여준다.](https://reactjs.org/docs/hooks-faq.html#do-hooks-replace-render-props-and-higher-order-components)\r\n다음과 같이 Custom Hook을 사용하여 해결이 가능하다.\r\n\r\n````typescript\r\n// useCalendarDateRange.ts\r\nconst useCalendarDateRange = ()=>{\r\n  const { projectStore } = useDataStore();\r\n\r\n    const selectableDateRange = useMemo(() => {\r\n      const dateRange = projectStore.date.selectable\r\n      // 검증 로직...\r\n      return dateRange;\r\n    }, []);\r\n\r\n    const initSelectedDateRange = useMemo(() => {\r\n      const dateRange = projectStore.date.init\r\n      // 검증 로직...\r\n      return dateRange;\r\n    }, []);\r\n  return {selectableDateRange, initSelectedDateRange}\r\n}\r\n````\r\n\r\n````typescript\r\n// 공통 로직을 추가할 컴포넌트: VisitStatus\r\n// Props를 통해서가 아닌 useCalendarDateRange()를 호출해서 필요한 데이터를 받는다.\r\nimport React, { useState } from 'react';\r\nimport { Calendar, DateRange } from './Calendar';\r\nimport { useCalendarDateRange } from './hooks/useCalendarDateRange';\r\n\r\nexport const VisitStatus = () => {\r\n  const [dateRange, setDateRange] = useState<DateRange>();\r\n  const handleDateRange = (changedDateRange: DateRange) => setDateRange(changedDateRange);\r\n  const {selectableDateRange, initSelectedDateRange} = useCalendarDateRange();\r\n\r\n  return (\r\n    <StyledLayout>\r\n      <StyledTitleWrapper>\r\n        <StyledTitle>방문 현황</StyledTitle>\r\n        <Calendar\r\n          selectableRange={selectableDateRange}\r\n          initDateRange={initSelectedDateRange}\r\n          dateHandle={handleDateRange}\r\n        />\r\n      </StyledTitleWrapper>\r\n    </StyledLayout>\r\n  );\r\n};\r\n````\r\n\r\n# 결론\r\n\r\n- HOC는 함수형 컴포넌트와 리액트 Hooks가 나오기 이전부터 Class Component 개발에서 리액트 Life Cycle에 종속적이지 않은 중복된 코드를 분리하기 위해서 사용되었다. (그래서 공식 홈페이지에 클래스형 컴포넌트로 만들어진 HOC 예제가 있나보다.)\r\n- HOC는 클래스형, 그리고 함수형 모두에 적용할 수 있어, 레거시와 모던한 리액트 컴포넌트 사이에서 연결 다리처럼 재사용이 가능하다는 장점이 있다. \r\n- 현재는 리액트 Hooks를 사용해 Custom Hook을 만들어 HOC를 대부분 대체할 수 있으며, 이렇게 사용하는 것이 더 간단하고 직관적이다.\r\n- 그러니 다시 소스를 수정하러 가야겠다.\r\n\r\n# 참고\r\n- [https://ko.reactjs.org/docs/higher-order-components.html](https://ko.reactjs.org/docs/higher-order-components.html)\r\n- [https://reactjs.org/docs/hooks-faq.html#do-hooks-replace-render-props-and-higher-order-components](https://reactjs.org/docs/hooks-faq.html#do-hooks-replace-render-props-and-higher-order-components)\r\n- [https://velog.io/@yeonseo07/%EB%AA%A8%EB%8B%AC%EC%9D%84-%EB%A7%8C%EB%93%A4%EB%8B%A4-%EC%83%9D%EA%B8%B4-%EC%9D%BC](https://velog.io/@yeonseo07/%EB%AA%A8%EB%8B%AC%EC%9D%84-%EB%A7%8C%EB%93%A4%EB%8B%A4-%EC%83%9D%EA%B8%B4-%EC%9D%BC)\r\n- [https://yceffort.kr/2020/10/react-hooks-and-hocs](https://yceffort.kr/2020/10/react-hooks-and-hocs)"},{"id":1635778800,"title":"첫 게시글\r","author":"jangky000\r","date":"2021.11.02\r","content":"\r\nNextJS 프레임워크로 만든 Markdown 블로그입니다."}]